
F401-akcelerometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a040  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800a1e0  0800a1e0  0001a1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8d4  0800a8d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8dc  0800a8dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a8e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001e8  0800aac8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800aac8  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001144c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0d  00000000  00000000  00031660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d04  00000000  00000000  00035a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b8b  00000000  00000000  0004d744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9a3  00000000  00000000  0005e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bec  00000000  00000000  000e8cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1c8 	.word	0x0800a1c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a1c8 	.word	0x0800a1c8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a30      	ldr	r2, [pc, #192]	; (80010fc <MX_GPIO_Init+0xe0>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a29      	ldr	r2, [pc, #164]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_GPIO_Init+0xe0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_GPIO_Init+0xe0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_GPIO_Init+0xe0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI_GPIO_Port, LIS_SPI_Pin, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2110      	movs	r1, #16
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_GPIO_Init+0xe4>)
 80010a8:	f002 f91c 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80010ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_GPIO_Init+0xe8>)
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0xec>)
 80010c2:	f001 ff8b 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIS_SPI_Pin;
 80010c6:	2310      	movs	r3, #16
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2302      	movs	r3, #2
 80010d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LIS_SPI_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0xe4>)
 80010de:	f001 ff7d 	bl	8002fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f001 feaf 	bl	8002e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f001 fec8 	bl	8002e82 <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400
 8001104:	10110000 	.word	0x10110000
 8001108:	40020800 	.word	0x40020800

0800110c <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <strtoke+0x1a>
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <strtoke+0x60>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <strtoke+0x60>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <strtoke+0x26>
 800112e:	2300      	movs	r3, #0
 8001130:	e017      	b.n	8001162 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <strtoke+0x60>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <strtoke+0x60>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fa96 	bl	8006670 <strpbrk>
 8001144:	4603      	mov	r3, r0
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <strtoke+0x60>)
 8001148:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <strtoke+0x60>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <strtoke+0x54>
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <strtoke+0x60>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	4904      	ldr	r1, [pc, #16]	; (800116c <strtoke+0x60>)
 800115a:	600a      	str	r2, [r1, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000204 	.word	0x20000204

08001170 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800117e:	3301      	adds	r3, #1
 8001180:	425a      	negs	r2, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	bf58      	it	pl
 8001188:	4253      	negpl	r3, r2
 800118a:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	429a      	cmp	r2, r3
 8001196:	d02f      	beq.n	80011f8 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <NEO6_ReceiveUartChar+0xa0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b0d      	cmp	r3, #13
 80011a0:	d114      	bne.n	80011cc <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80011a8:	3301      	adds	r3, #1
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <NEO6_ReceiveUartChar+0xa0>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	b2d1      	uxtb	r1, r2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	460a      	mov	r2, r1
 80011c8:	711a      	strb	r2, [r3, #4]
 80011ca:	e015      	b.n	80011f8 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <NEO6_ReceiveUartChar+0xa0>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d010      	beq.n	80011f8 <NEO6_ReceiveUartChar+0x88>
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <NEO6_ReceiveUartChar+0xa0>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d00b      	beq.n	80011f8 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <NEO6_ReceiveUartChar+0xa0>)
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	b2d1      	uxtb	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	460a      	mov	r2, r1
 80011f6:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4904      	ldr	r1, [pc, #16]	; (8001210 <NEO6_ReceiveUartChar+0xa0>)
 8001200:	4618      	mov	r0, r3
 8001202:	f003 ffe8 	bl	80051d6 <HAL_UART_Receive_IT>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000218 	.word	0x20000218

08001214 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001228:	429a      	cmp	r2, r3
 800122a:	d102      	bne.n	8001232 <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 800122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001230:	e013      	b.n	800125a <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001238:	3301      	adds	r3, #1
 800123a:	425a      	negs	r2, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	bf58      	it	pl
 8001242:	4253      	negpl	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	791b      	ldrb	r3, [r3, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001274:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01e      	beq.n	80012be <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001280:	e008      	b.n	8001294 <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	2b0d      	cmp	r3, #13
 8001286:	d00e      	beq.n	80012a6 <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	7afa      	ldrb	r2, [r7, #11]
 800128c:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ffbd 	bl	8001214 <NEO6_GetCharFromBuffer>
 800129a:	4603      	mov	r3, r0
 800129c:	72fb      	strb	r3, [r7, #11]
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ee      	bne.n	8001282 <NEO6_GetLineFromBuffer+0x1c>
 80012a4:	e000      	b.n	80012a8 <NEO6_GetLineFromBuffer+0x42>
				break;
 80012a6:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80012b4:	3b01      	subs	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 80012d0:	4967      	ldr	r1, [pc, #412]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff ff1a 	bl	800110c <strtoke>
 80012d8:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d033      	beq.n	800134a <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f004 fd03 	bl	8005cee <atoi>
 80012e8:	4603      	mov	r3, r0
 80012ea:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Second = Temp % 100;
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	4b61      	ldr	r3, [pc, #388]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 80012f0:	fba3 1302 	umull	r1, r3, r3, r2
 80012f4:	095b      	lsrs	r3, r3, #5
 80012f6:	2164      	movs	r1, #100	; 0x64
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	095a      	lsrs	r2, r3, #5
 8001310:	4b58      	ldr	r3, [pc, #352]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 8001312:	fba3 1302 	umull	r1, r3, r3, r2
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2164      	movs	r1, #100	; 0x64
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4a53      	ldr	r2, [pc, #332]	; (8001478 <NEO6_ParseGPRMC+0x1b0>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0b5a      	lsrs	r2, r3, #13
 8001332:	4b50      	ldr	r3, [pc, #320]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 8001334:	fba3 1302 	umull	r1, r3, r3, r2
 8001338:	095b      	lsrs	r3, r3, #5
 800133a:	2164      	movs	r1, #100	; 0x64
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 800134a:	4949      	ldr	r1, [pc, #292]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fedd 	bl	800110c <strtoke>
 8001352:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8001354:	4946      	ldr	r1, [pc, #280]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fed8 	bl	800110c <strtoke>
 800135c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <NEO6_ParseGPRMC+0xb2>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f004 fcbe 	bl	8005ce8 <atof>
 800136c:	eeb0 7a40 	vmov.f32	s14, s0
 8001370:	eef0 7a60 	vmov.f32	s15, s1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 800137a:	493d      	ldr	r1, [pc, #244]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fec5 	bl	800110c <strtoke>
 8001382:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <NEO6_ParseGPRMC+0xce>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781a      	ldrb	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8001396:	4936      	ldr	r1, [pc, #216]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff feb7 	bl	800110c <strtoke>
 800139e:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <NEO6_ParseGPRMC+0xf4>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f004 fc9d 	bl	8005ce8 <atof>
 80013ae:	eeb0 7a40 	vmov.f32	s14, s0
 80013b2:	eef0 7a60 	vmov.f32	s15, s1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80013bc:	492c      	ldr	r1, [pc, #176]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fea4 	bl	800110c <strtoke>
 80013c4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <NEO6_ParseGPRMC+0x110>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 80013d8:	4925      	ldr	r1, [pc, #148]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fe96 	bl	800110c <strtoke>
 80013e0:	60f8      	str	r0, [r7, #12]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 80013e2:	4923      	ldr	r1, [pc, #140]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fe91 	bl	800110c <strtoke>
 80013ea:	60f8      	str	r0, [r7, #12]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 80013ec:	4920      	ldr	r1, [pc, #128]	; (8001470 <NEO6_ParseGPRMC+0x1a8>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff fe8c 	bl	800110c <strtoke>
 80013f4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d033      	beq.n	8001466 <NEO6_ParseGPRMC+0x19e>
	{
		Temp = atoi(ParsePoiner);
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f004 fc75 	bl	8005cee <atoi>
 8001404:	4603      	mov	r3, r0
 8001406:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Year = Temp % 100;
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 800140c:	fba3 1302 	umull	r1, r3, r3, r2
 8001410:	095b      	lsrs	r3, r3, #5
 8001412:	2164      	movs	r1, #100	; 0x64
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b2da      	uxtb	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	095a      	lsrs	r2, r3, #5
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 800142e:	fba3 1302 	umull	r1, r3, r3, r2
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2164      	movs	r1, #100	; 0x64
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <NEO6_ParseGPRMC+0x1b0>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0b5a      	lsrs	r2, r3, #13
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <NEO6_ParseGPRMC+0x1ac>)
 8001450:	fba3 1302 	umull	r1, r3, r3, r2
 8001454:	095b      	lsrs	r3, r3, #5
 8001456:	2164      	movs	r1, #100	; 0x64
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800a1e0 	.word	0x0800a1e0
 8001474:	51eb851f 	.word	0x51eb851f
 8001478:	d1b71759 	.word	0xd1b71759

0800147c <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8001484:	4921      	ldr	r1, [pc, #132]	; (800150c <NEO6_ParseGPVTG+0x90>)
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fe40 	bl	800110c <strtoke>
 800148c:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800148e:	491f      	ldr	r1, [pc, #124]	; (800150c <NEO6_ParseGPVTG+0x90>)
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fe3b 	bl	800110c <strtoke>
 8001496:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 8001498:	491c      	ldr	r1, [pc, #112]	; (800150c <NEO6_ParseGPVTG+0x90>)
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fe36 	bl	800110c <strtoke>
 80014a0:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 80014a2:	491a      	ldr	r1, [pc, #104]	; (800150c <NEO6_ParseGPVTG+0x90>)
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fe31 	bl	800110c <strtoke>
 80014aa:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 80014ac:	4917      	ldr	r1, [pc, #92]	; (800150c <NEO6_ParseGPVTG+0x90>)
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fe2c 	bl	800110c <strtoke>
 80014b4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <NEO6_ParseGPVTG+0x56>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f004 fc12 	bl	8005ce8 <atof>
 80014c4:	eeb0 7a40 	vmov.f32	s14, s0
 80014c8:	eef0 7a60 	vmov.f32	s15, s1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
	}
	ParsePoiner = strtoke(NULL, ",");
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <NEO6_ParseGPVTG+0x90>)
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fe19 	bl	800110c <strtoke>
 80014da:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 80014dc:	490b      	ldr	r1, [pc, #44]	; (800150c <NEO6_ParseGPVTG+0x90>)
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fe14 	bl	800110c <strtoke>
 80014e4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <NEO6_ParseGPVTG+0x86>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f004 fbfa 	bl	8005ce8 <atof>
 80014f4:	eeb0 7a40 	vmov.f32	s14, s0
 80014f8:	eef0 7a60 	vmov.f32	s15, s1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
	}
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0800a1e0 	.word	0x0800a1e0

08001510 <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8001518:	492b      	ldr	r1, [pc, #172]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fdf6 	bl	800110c <strtoke>
 8001520:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8001522:	4929      	ldr	r1, [pc, #164]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fdf1 	bl	800110c <strtoke>
 800152a:	60f8      	str	r0, [r7, #12]
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 800152c:	4926      	ldr	r1, [pc, #152]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff fdec 	bl	800110c <strtoke>
 8001534:	60f8      	str	r0, [r7, #12]
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fde7 	bl	800110c <strtoke>
 800153e:	60f8      	str	r0, [r7, #12]
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8001540:	4921      	ldr	r1, [pc, #132]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fde2 	bl	800110c <strtoke>
 8001548:	60f8      	str	r0, [r7, #12]
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 800154a:	491f      	ldr	r1, [pc, #124]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff fddd 	bl	800110c <strtoke>
 8001552:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <NEO6_ParseGPGGA+0x5c>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f004 fbc6 	bl	8005cee <atoi>
 8001562:	4603      	mov	r3, r0
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 800156c:	4916      	ldr	r1, [pc, #88]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fdcc 	bl	800110c <strtoke>
 8001574:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <NEO6_ParseGPGGA+0x7e>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f004 fbb5 	bl	8005cee <atoi>
 8001584:	4603      	mov	r3, r0
 8001586:	b2da      	uxtb	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 800158e:	490e      	ldr	r1, [pc, #56]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fdbb 	bl	800110c <strtoke>
 8001596:	60f8      	str	r0, [r7, #12]
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <NEO6_ParseGPGGA+0xb8>)
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fdb6 	bl	800110c <strtoke>
 80015a0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <NEO6_ParseGPGGA+0xae>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f004 fb9c 	bl	8005ce8 <atof>
 80015b0:	eeb0 7a40 	vmov.f32	s14, s0
 80015b4:	eef0 7a60 	vmov.f32	s15, s1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
	}
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800a1e0 	.word	0x0800a1e0

080015cc <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 80015d4:	4930      	ldr	r1, [pc, #192]	; (8001698 <NEO6_ParseGPGSA+0xcc>)
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fd98 	bl	800110c <strtoke>
 80015dc:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 80015de:	492e      	ldr	r1, [pc, #184]	; (8001698 <NEO6_ParseGPGSA+0xcc>)
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fd93 	bl	800110c <strtoke>
 80015e6:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f004 fb7c 	bl	8005cee <atoi>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e007      	b.n	8001616 <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 8001606:	4924      	ldr	r1, [pc, #144]	; (8001698 <NEO6_ParseGPGSA+0xcc>)
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff fd7f 	bl	800110c <strtoke>
 800160e:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b0b      	cmp	r3, #11
 800161a:	d9f4      	bls.n	8001606 <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 800161c:	491e      	ldr	r1, [pc, #120]	; (8001698 <NEO6_ParseGPGSA+0xcc>)
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fd74 	bl	800110c <strtoke>
 8001624:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <NEO6_ParseGPGSA+0x76>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	f004 fb5a 	bl	8005ce8 <atof>
 8001634:	eeb0 7a40 	vmov.f32	s14, s0
 8001638:	eef0 7a60 	vmov.f32	s15, s1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8001642:	4915      	ldr	r1, [pc, #84]	; (8001698 <NEO6_ParseGPGSA+0xcc>)
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fd61 	bl	800110c <strtoke>
 800164a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <NEO6_ParseGPGSA+0x9c>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f004 fb47 	bl	8005ce8 <atof>
 800165a:	eeb0 7a40 	vmov.f32	s14, s0
 800165e:	eef0 7a60 	vmov.f32	s15, s1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8001668:	490b      	ldr	r1, [pc, #44]	; (8001698 <NEO6_ParseGPGSA+0xcc>)
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fd4e 	bl	800110c <strtoke>
 8001670:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <NEO6_ParseGPGSA+0xc2>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f004 fb34 	bl	8005ce8 <atof>
 8001680:	eeb0 7a40 	vmov.f32	s14, s0
 8001684:	eef0 7a60 	vmov.f32	s15, s1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
	}
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	0800a1e0 	.word	0x0800a1e0

0800169c <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f203 1307 	addw	r3, r3, #263	; 0x107
 80016aa:	491a      	ldr	r1, [pc, #104]	; (8001714 <NEO6_ParseLine+0x78>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fd2d 	bl	800110c <strtoke>
 80016b2:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 80016b4:	4918      	ldr	r1, [pc, #96]	; (8001718 <NEO6_ParseLine+0x7c>)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7fe fd92 	bl	80001e0 <strcmp>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <NEO6_ParseLine+0x2e>
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fe00 	bl	80012c8 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 80016c8:	e01f      	b.n	800170a <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 80016ca:	4914      	ldr	r1, [pc, #80]	; (800171c <NEO6_ParseLine+0x80>)
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f7fe fd87 	bl	80001e0 <strcmp>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <NEO6_ParseLine+0x44>
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fecf 	bl	800147c <NEO6_ParseGPVTG>
}
 80016de:	e014      	b.n	800170a <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80016e0:	490f      	ldr	r1, [pc, #60]	; (8001720 <NEO6_ParseLine+0x84>)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7fe fd7c 	bl	80001e0 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <NEO6_ParseLine+0x5a>
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff0e 	bl	8001510 <NEO6_ParseGPGGA>
}
 80016f4:	e009      	b.n	800170a <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 80016f6:	490b      	ldr	r1, [pc, #44]	; (8001724 <NEO6_ParseLine+0x88>)
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7fe fd71 	bl	80001e0 <strcmp>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <NEO6_ParseLine+0x6e>
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff61 	bl	80015cc <NEO6_ParseGPGSA>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800a1e0 	.word	0x0800a1e0
 8001718:	0800a1e4 	.word	0x0800a1e4
 800171c:	0800a1ec 	.word	0x0800a1ec
 8001720:	0800a1f4 	.word	0x0800a1f4
 8001724:	0800a1fc 	.word	0x0800a1fc

08001728 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <NEO6_Task+0x1e>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fd86 	bl	8001266 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff9e 	bl	800169c <NEO6_ParseLine>
	}
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2230      	movs	r2, #48	; 0x30
 80017d2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2230      	movs	r2, #48	; 0x30
 80017e8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <NEO6_Init+0xf0>)
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fcc3 	bl	80051d6 <HAL_UART_Receive_IT>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000218 	.word	0x20000218

0800185c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C1_Init+0x50>)
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <MX_I2C1_Init+0x54>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C1_Init+0x50>)
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_I2C1_Init+0x58>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_I2C1_Init+0x50>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C1_Init+0x50>)
 800189a:	f001 fd55 	bl	8003348 <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 fe7e 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000408 	.word	0x20000408
 80018b0:	40005400 	.word	0x40005400
 80018b4:	000186a0 	.word	0x000186a0

080018b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_I2C_MspInit+0x84>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12c      	bne.n	8001934 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_I2C_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_I2C_MspInit+0x88>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_I2C_MspInit+0x88>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fc:	2312      	movs	r3, #18
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001908:	2304      	movs	r3, #4
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <HAL_I2C_MspInit+0x8c>)
 8001914:	f001 fb62 	bl	8002fdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_I2C_MspInit+0x88>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_I2C_MspInit+0x88>)
 8001922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_I2C_MspInit+0x88>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40005400 	.word	0x40005400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400

08001948 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800195e:	2308      	movs	r3, #8
 8001960:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001962:	2028      	movs	r0, #40	; 0x28
 8001964:	f001 f972 	bl	8002c4c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	2130      	movs	r1, #48	; 0x30
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f829 	bl	80019c8 <lcd_write>
	HAL_Delay(5);
 8001976:	2005      	movs	r0, #5
 8001978:	f001 f968 	bl	8002c4c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	2130      	movs	r1, #48	; 0x30
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f81f 	bl	80019c8 <lcd_write>
	HAL_Delay(1);
 800198a:	2001      	movs	r0, #1
 800198c:	f001 f95e 	bl	8002c4c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	2130      	movs	r1, #48	; 0x30
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f815 	bl	80019c8 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	2102      	movs	r1, #2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f80e 	bl	80019c8 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	210c      	movs	r1, #12
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f807 	bl	80019c8 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f89f 	bl	8001afe <lcd_clear>

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	460b      	mov	r3, r1
 80019d4:	71bb      	strb	r3, [r7, #6]
 80019d6:	4613      	mov	r3, r2
 80019d8:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	f023 030f 	bic.w	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80019f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019f4:	f023 030f 	bic.w	r3, r3, #15
 80019f8:	b25a      	sxtb	r2, r3
 80019fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	b299      	uxth	r1, r3
 8001a30:	f107 020c 	add.w	r2, r7, #12
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2304      	movs	r3, #4
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <lcd_write+0x88>)
 8001a3c:	f001 fdc8 	bl	80035d0 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001a40:	2005      	movs	r0, #5
 8001a42:	f001 f903 	bl	8002c4c <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000408 	.word	0x20000408

08001a54 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	2300      	movs	r3, #0
 8001a62:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f843 	bl	8001afe <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ffa1 	bl	80019c8 <lcd_write>
	while(lcd->f_line[i])
 8001a86:	e00f      	b.n	8001aa8 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7818      	ldrb	r0, [r3, #0]
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	7859      	ldrb	r1, [r3, #1]
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f7ff ff93 	bl	80019c8 <lcd_write>
		i++;
 8001aa2:	7bbb      	ldrb	r3, [r7, #14]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e9      	bne.n	8001a88 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	21c0      	movs	r1, #192	; 0xc0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff81 	bl	80019c8 <lcd_write>
	while(lcd->s_line[i])
 8001ac6:	e00f      	b.n	8001ae8 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7818      	ldrb	r0, [r3, #0]
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	7c99      	ldrb	r1, [r3, #18]
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	f7ff ff73 	bl	80019c8 <lcd_write>
		i++;
 8001ae2:	7bbb      	ldrb	r3, [r7, #14]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	7c9b      	ldrb	r3, [r3, #18]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e9      	bne.n	8001ac8 <lcd_display+0x74>
	}
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001b14:	2308      	movs	r3, #8
 8001b16:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff51 	bl	80019c8 <lcd_write>
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <adxl_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adxl_write(uint8_t address, uint8_t value){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	460a      	mov	r2, r1
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address | 0x40;
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB, LIS_SPI_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <adxl_write+0x48>)
 8001b54:	f001 fbc6 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 2, 100);
 8001b58:	f107 010c 	add.w	r1, r7, #12
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4806      	ldr	r0, [pc, #24]	; (8001b7c <adxl_write+0x4c>)
 8001b62:	f002 fd3a 	bl	80045da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LIS_SPI_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2110      	movs	r1, #16
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <adxl_write+0x48>)
 8001b6c:	f001 fbba 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	200004d4 	.word	0x200004d4

08001b80 <adxl_read>:


void adxl_read(uint8_t address){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	71fb      	strb	r3, [r7, #7]
	address |= 0x40;
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, LIS_SPI_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <adxl_read+0x54>)
 8001ba4:	f001 fb9e 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8001ba8:	1df9      	adds	r1, r7, #7
 8001baa:	2364      	movs	r3, #100	; 0x64
 8001bac:	2201      	movs	r2, #1
 8001bae:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <adxl_read+0x58>)
 8001bb0:	f002 fd13 	bl	80045da <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_rec, 6, 100);
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	2206      	movs	r2, #6
 8001bb8:	4908      	ldr	r1, [pc, #32]	; (8001bdc <adxl_read+0x5c>)
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <adxl_read+0x58>)
 8001bbc:	f002 fe49 	bl	8004852 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, LIS_SPI_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <adxl_read+0x54>)
 8001bc6:	f001 fb8d 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	200004d4 	.word	0x200004d4
 8001bdc:	20000530 	.word	0x20000530

08001be0 <adxl_init>:

void adxl_init(void){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	adxl_write(0x31, 0x01); // data_format range 4g
 8001be4:	2101      	movs	r1, #1
 8001be6:	2031      	movs	r0, #49	; 0x31
 8001be8:	f7ff ffa2 	bl	8001b30 <adxl_write>
	adxl_write(0x2d, 0x08); // reset all bits
 8001bec:	2108      	movs	r1, #8
 8001bee:	202d      	movs	r0, #45	; 0x2d
 8001bf0:	f7ff ff9e 	bl	8001b30 <adxl_write>
	adxl_write(0x2d, 0x08); // power_cntl measure and wake up 8 hz
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	202d      	movs	r0, #45	; 0x2d
 8001bf8:	f7ff ff9a 	bl	8001b30 <adxl_write>


}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c08:	f000 ffae 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0c:	f000 fc0e 	bl	800242c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c10:	f7ff fa04 	bl	800101c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c14:	f000 fed0 	bl	80029b8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001c18:	f000 fcca 	bl	80025b0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001c1c:	f7ff fe1e 	bl	800185c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c20:	f000 fea0 	bl	8002964 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //docelowo inicjalizacja wyswietlacza
  disp.addr = (0x27 << 1);
 8001c24:	4ba6      	ldr	r3, [pc, #664]	; (8001ec0 <main+0x2c0>)
 8001c26:	224e      	movs	r2, #78	; 0x4e
 8001c28:	701a      	strb	r2, [r3, #0]
  disp.addr = (0x27 << 1);
 8001c2a:	4ba5      	ldr	r3, [pc, #660]	; (8001ec0 <main+0x2c0>)
 8001c2c:	224e      	movs	r2, #78	; 0x4e
 8001c2e:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001c30:	4ba3      	ldr	r3, [pc, #652]	; (8001ec0 <main+0x2c0>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001c38:	48a1      	ldr	r0, [pc, #644]	; (8001ec0 <main+0x2c0>)
 8001c3a:	f7ff fe85 	bl	8001948 <lcd_init>
  sprintf((char *) disp.f_line, "INICJALIZACJA");
 8001c3e:	49a1      	ldr	r1, [pc, #644]	; (8001ec4 <main+0x2c4>)
 8001c40:	48a1      	ldr	r0, [pc, #644]	; (8001ec8 <main+0x2c8>)
 8001c42:	f004 fcf5 	bl	8006630 <siprintf>
  sprintf((char *) disp.s_line, "AKCELEROMETR");
 8001c46:	49a1      	ldr	r1, [pc, #644]	; (8001ecc <main+0x2cc>)
 8001c48:	48a1      	ldr	r0, [pc, #644]	; (8001ed0 <main+0x2d0>)
 8001c4a:	f004 fcf1 	bl	8006630 <siprintf>
  lcd_display(&disp);
 8001c4e:	489c      	ldr	r0, [pc, #624]	; (8001ec0 <main+0x2c0>)
 8001c50:	f7ff ff00 	bl	8001a54 <lcd_display>
  HAL_Delay(1000);
 8001c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c58:	f000 fff8 	bl	8002c4c <HAL_Delay>
  adxl_init();
 8001c5c:	f7ff ffc0 	bl	8001be0 <adxl_init>
  dl_kom = sprintf(komunikat, "START\n");
 8001c60:	499c      	ldr	r1, [pc, #624]	; (8001ed4 <main+0x2d4>)
 8001c62:	489d      	ldr	r0, [pc, #628]	; (8001ed8 <main+0x2d8>)
 8001c64:	f004 fce4 	bl	8006630 <siprintf>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	; (8001edc <main+0x2dc>)
 8001c6e:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
 8001c70:	4b9a      	ldr	r3, [pc, #616]	; (8001edc <main+0x2dc>)
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	4997      	ldr	r1, [pc, #604]	; (8001ed8 <main+0x2d8>)
 8001c7a:	4899      	ldr	r0, [pc, #612]	; (8001ee0 <main+0x2e0>)
 8001c7c:	f003 fa19 	bl	80050b2 <HAL_UART_Transmit>

  NEO6_Init(&GpsState, &huart1);
 8001c80:	4998      	ldr	r1, [pc, #608]	; (8001ee4 <main+0x2e4>)
 8001c82:	4899      	ldr	r0, [pc, #612]	; (8001ee8 <main+0x2e8>)
 8001c84:	f7ff fd70 	bl	8001768 <NEO6_Init>
  uint32_t Timer = HAL_GetTick();
 8001c88:	f000 ffd4 	bl	8002c34 <HAL_GetTick>
 8001c8c:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


    NEO6_Task(&GpsState);
 8001c8e:	4896      	ldr	r0, [pc, #600]	; (8001ee8 <main+0x2e8>)
 8001c90:	f7ff fd57 	bl	8001742 <NEO6_Task>

    	  if((HAL_GetTick() - Timer) > 1000)
 8001c94:	f000 ffce 	bl	8002c34 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca2:	d9f4      	bls.n	8001c8e <main+0x8e>
    	  {
    	//	  MessageLength = sprintf((char*)Message, "\033[2J\033[;H"); // Clear terminal and home cursor
    		//  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);

    		  if(NEO6_IsFix(&GpsState))
 8001ca4:	4890      	ldr	r0, [pc, #576]	; (8001ee8 <main+0x2e8>)
 8001ca6:	f7ff fd3f 	bl	8001728 <NEO6_IsFix>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8247 	beq.w	8002140 <main+0x540>
    		  {

    			  MessageLength = sprintf((char*)Message, "UTC Time: %02d:%02d:%02d\n\r", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001cb2:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <main+0x2e8>)
 8001cb4:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <main+0x2e8>)
 8001cbc:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <main+0x2e8>)
 8001cc4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4987      	ldr	r1, [pc, #540]	; (8001eec <main+0x2ec>)
 8001cce:	4888      	ldr	r0, [pc, #544]	; (8001ef0 <main+0x2f0>)
 8001cd0:	f004 fcae 	bl	8006630 <siprintf>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <main+0x2f4>)
 8001cda:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001cdc:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <main+0x2f4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	4982      	ldr	r1, [pc, #520]	; (8001ef0 <main+0x2f0>)
 8001ce8:	487d      	ldr	r0, [pc, #500]	; (8001ee0 <main+0x2e0>)
 8001cea:	f003 f9e2 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Date: %02d.%02d.20%02d\n\r", GpsState.Day, GpsState.Month, GpsState.Year);
 8001cee:	4b7e      	ldr	r3, [pc, #504]	; (8001ee8 <main+0x2e8>)
 8001cf0:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b7c      	ldr	r3, [pc, #496]	; (8001ee8 <main+0x2e8>)
 8001cf8:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <main+0x2e8>)
 8001d00:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	460b      	mov	r3, r1
 8001d08:	497b      	ldr	r1, [pc, #492]	; (8001ef8 <main+0x2f8>)
 8001d0a:	4879      	ldr	r0, [pc, #484]	; (8001ef0 <main+0x2f0>)
 8001d0c:	f004 fc90 	bl	8006630 <siprintf>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <main+0x2f4>)
 8001d16:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001d18:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <main+0x2f4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	4973      	ldr	r1, [pc, #460]	; (8001ef0 <main+0x2f0>)
 8001d24:	486e      	ldr	r0, [pc, #440]	; (8001ee0 <main+0x2e0>)
 8001d26:	f003 f9c4 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Latitude: %.2f %c\n\r", GpsState.Latitude, GpsState.LatitudeDirection);
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <main+0x2e8>)
 8001d2c:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001d30:	496d      	ldr	r1, [pc, #436]	; (8001ee8 <main+0x2e8>)
 8001d32:	f891 1198 	ldrb.w	r1, [r1, #408]	; 0x198
 8001d36:	9100      	str	r1, [sp, #0]
 8001d38:	4970      	ldr	r1, [pc, #448]	; (8001efc <main+0x2fc>)
 8001d3a:	486d      	ldr	r0, [pc, #436]	; (8001ef0 <main+0x2f0>)
 8001d3c:	f004 fc78 	bl	8006630 <siprintf>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <main+0x2f4>)
 8001d46:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <main+0x2f4>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	4967      	ldr	r1, [pc, #412]	; (8001ef0 <main+0x2f0>)
 8001d54:	4862      	ldr	r0, [pc, #392]	; (8001ee0 <main+0x2e0>)
 8001d56:	f003 f9ac 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Longitude: %.2f %c\n\r", GpsState.Longitude, GpsState.LongitudeDirection);
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <main+0x2e8>)
 8001d5c:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001d60:	4961      	ldr	r1, [pc, #388]	; (8001ee8 <main+0x2e8>)
 8001d62:	f891 11a8 	ldrb.w	r1, [r1, #424]	; 0x1a8
 8001d66:	9100      	str	r1, [sp, #0]
 8001d68:	4965      	ldr	r1, [pc, #404]	; (8001f00 <main+0x300>)
 8001d6a:	4861      	ldr	r0, [pc, #388]	; (8001ef0 <main+0x2f0>)
 8001d6c:	f004 fc60 	bl	8006630 <siprintf>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <main+0x2f4>)
 8001d76:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <main+0x2f4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	495b      	ldr	r1, [pc, #364]	; (8001ef0 <main+0x2f0>)
 8001d84:	4856      	ldr	r0, [pc, #344]	; (8001ee0 <main+0x2e0>)
 8001d86:	f003 f994 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Altitude: %.2f m above sea level\n\r", GpsState.Altitude);
 8001d8a:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <main+0x2e8>)
 8001d8c:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8001d90:	495c      	ldr	r1, [pc, #368]	; (8001f04 <main+0x304>)
 8001d92:	4857      	ldr	r0, [pc, #348]	; (8001ef0 <main+0x2f0>)
 8001d94:	f004 fc4c 	bl	8006630 <siprintf>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <main+0x2f4>)
 8001d9e:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001da0:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <main+0x2f4>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	4951      	ldr	r1, [pc, #324]	; (8001ef0 <main+0x2f0>)
 8001dac:	484c      	ldr	r0, [pc, #304]	; (8001ee0 <main+0x2e0>)
 8001dae:	f003 f980 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Speed: %.2f knots, %f km/h\n\r", GpsState.SpeedKnots, GpsState.SpeedKilometers);
 8001db2:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <main+0x2e8>)
 8001db4:	e9d3 016e 	ldrd	r0, r1, [r3, #440]	; 0x1b8
 8001db8:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <main+0x2e8>)
 8001dba:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8001dbe:	e9cd 2300 	strd	r2, r3, [sp]
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4950      	ldr	r1, [pc, #320]	; (8001f08 <main+0x308>)
 8001dc8:	4849      	ldr	r0, [pc, #292]	; (8001ef0 <main+0x2f0>)
 8001dca:	f004 fc31 	bl	8006630 <siprintf>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <main+0x2f4>)
 8001dd4:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <main+0x2f4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de0:	4943      	ldr	r1, [pc, #268]	; (8001ef0 <main+0x2f0>)
 8001de2:	483f      	ldr	r0, [pc, #252]	; (8001ee0 <main+0x2e0>)
 8001de4:	f003 f965 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Satelites: %d\n\r", GpsState.SatelitesNumber);
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <main+0x2e8>)
 8001dea:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8001dee:	461a      	mov	r2, r3
 8001df0:	4946      	ldr	r1, [pc, #280]	; (8001f0c <main+0x30c>)
 8001df2:	483f      	ldr	r0, [pc, #252]	; (8001ef0 <main+0x2f0>)
 8001df4:	f004 fc1c 	bl	8006630 <siprintf>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <main+0x2f4>)
 8001dfe:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <main+0x2f4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	4939      	ldr	r1, [pc, #228]	; (8001ef0 <main+0x2f0>)
 8001e0c:	4834      	ldr	r0, [pc, #208]	; (8001ee0 <main+0x2e0>)
 8001e0e:	f003 f950 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Dilution of precision: %.2f\n\r", GpsState.Dop);
 8001e12:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <main+0x2e8>)
 8001e14:	e9d3 2374 	ldrd	r2, r3, [r3, #464]	; 0x1d0
 8001e18:	493d      	ldr	r1, [pc, #244]	; (8001f10 <main+0x310>)
 8001e1a:	4835      	ldr	r0, [pc, #212]	; (8001ef0 <main+0x2f0>)
 8001e1c:	f004 fc08 	bl	8006630 <siprintf>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <main+0x2f4>)
 8001e26:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <main+0x2f4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	492f      	ldr	r1, [pc, #188]	; (8001ef0 <main+0x2f0>)
 8001e34:	482a      	ldr	r0, [pc, #168]	; (8001ee0 <main+0x2e0>)
 8001e36:	f003 f93c 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Horizontal dilution of precision: %.2f\n\r", GpsState.Hdop);
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <main+0x2e8>)
 8001e3c:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	; 0x1d8
 8001e40:	4934      	ldr	r1, [pc, #208]	; (8001f14 <main+0x314>)
 8001e42:	482b      	ldr	r0, [pc, #172]	; (8001ef0 <main+0x2f0>)
 8001e44:	f004 fbf4 	bl	8006630 <siprintf>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <main+0x2f4>)
 8001e4e:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <main+0x2f4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	4925      	ldr	r1, [pc, #148]	; (8001ef0 <main+0x2f0>)
 8001e5c:	4820      	ldr	r0, [pc, #128]	; (8001ee0 <main+0x2e0>)
 8001e5e:	f003 f928 	bl	80050b2 <HAL_UART_Transmit>

    			  MessageLength = sprintf((char*)Message, "Vertical dilution of precision: %.2f\n\r", GpsState.Vdop);
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <main+0x2e8>)
 8001e64:	e9d3 2378 	ldrd	r2, r3, [r3, #480]	; 0x1e0
 8001e68:	492b      	ldr	r1, [pc, #172]	; (8001f18 <main+0x318>)
 8001e6a:	4821      	ldr	r0, [pc, #132]	; (8001ef0 <main+0x2f0>)
 8001e6c:	f004 fbe0 	bl	8006630 <siprintf>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <main+0x2f4>)
 8001e76:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <main+0x2f4>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	491b      	ldr	r1, [pc, #108]	; (8001ef0 <main+0x2f0>)
 8001e84:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <main+0x2e0>)
 8001e86:	f003 f914 	bl	80050b2 <HAL_UART_Transmit>


    			  if(counter == 2){
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <main+0x31c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d14d      	bne.n	8001f2e <main+0x32e>
						//HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
						sprintf((char *) disp.f_line, "Latitud:%.2f%c", GpsState.Latitude, GpsState.LatitudeDirection);
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <main+0x2e8>)
 8001e94:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001e98:	4913      	ldr	r1, [pc, #76]	; (8001ee8 <main+0x2e8>)
 8001e9a:	f891 1198 	ldrb.w	r1, [r1, #408]	; 0x198
 8001e9e:	9100      	str	r1, [sp, #0]
 8001ea0:	491f      	ldr	r1, [pc, #124]	; (8001f20 <main+0x320>)
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <main+0x2c8>)
 8001ea4:	f004 fbc4 	bl	8006630 <siprintf>
						sprintf((char *) disp.s_line, "Longitu:%.2f%c", GpsState.Longitude, GpsState.LongitudeDirection);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <main+0x2e8>)
 8001eaa:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <main+0x2e8>)
 8001eb0:	f891 11a8 	ldrb.w	r1, [r1, #424]	; 0x1a8
 8001eb4:	9100      	str	r1, [sp, #0]
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <main+0x324>)
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <main+0x2d0>)
 8001eba:	f004 fbb9 	bl	8006630 <siprintf>
 8001ebe:	e033      	b.n	8001f28 <main+0x328>
 8001ec0:	2000053c 	.word	0x2000053c
 8001ec4:	0800a204 	.word	0x0800a204
 8001ec8:	2000053d 	.word	0x2000053d
 8001ecc:	0800a214 	.word	0x0800a214
 8001ed0:	2000054e 	.word	0x2000054e
 8001ed4:	0800a224 	.word	0x0800a224
 8001ed8:	20000460 	.word	0x20000460
 8001edc:	20000488 	.word	0x20000488
 8001ee0:	200005a4 	.word	0x200005a4
 8001ee4:	20000560 	.word	0x20000560
 8001ee8:	20000220 	.word	0x20000220
 8001eec:	0800a22c 	.word	0x0800a22c
 8001ef0:	20000490 	.word	0x20000490
 8001ef4:	2000045c 	.word	0x2000045c
 8001ef8:	0800a248 	.word	0x0800a248
 8001efc:	0800a264 	.word	0x0800a264
 8001f00:	0800a278 	.word	0x0800a278
 8001f04:	0800a290 	.word	0x0800a290
 8001f08:	0800a2b4 	.word	0x0800a2b4
 8001f0c:	0800a2d4 	.word	0x0800a2d4
 8001f10:	0800a2e4 	.word	0x0800a2e4
 8001f14:	0800a304 	.word	0x0800a304
 8001f18:	0800a330 	.word	0x0800a330
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	0800a358 	.word	0x0800a358
 8001f24:	0800a368 	.word	0x0800a368
						lcd_display(&disp);
 8001f28:	4871      	ldr	r0, [pc, #452]	; (80020f0 <main+0x4f0>)
 8001f2a:	f7ff fd93 	bl	8001a54 <lcd_display>
    			  }

    			  if(counter == 3){
 8001f2e:	4b71      	ldr	r3, [pc, #452]	; (80020f4 <main+0x4f4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d11a      	bne.n	8001f6c <main+0x36c>
						//HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
						sprintf((char *) disp.f_line, "Speed: %.1f km/h", GpsState.SpeedKilometers);
 8001f36:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <main+0x4f8>)
 8001f38:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8001f3c:	496f      	ldr	r1, [pc, #444]	; (80020fc <main+0x4fc>)
 8001f3e:	4870      	ldr	r0, [pc, #448]	; (8002100 <main+0x500>)
 8001f40:	f004 fb76 	bl	8006630 <siprintf>
						sprintf((char *) disp.s_line, "TIME:%02d:%02d:%02d", GpsState.Hour, GpsState.Minute, GpsState.Second);
 8001f44:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <main+0x4f8>)
 8001f46:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <main+0x4f8>)
 8001f4e:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8001f52:	4619      	mov	r1, r3
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <main+0x4f8>)
 8001f56:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4969      	ldr	r1, [pc, #420]	; (8002104 <main+0x504>)
 8001f60:	4869      	ldr	r0, [pc, #420]	; (8002108 <main+0x508>)
 8001f62:	f004 fb65 	bl	8006630 <siprintf>
						lcd_display(&disp);
 8001f66:	4862      	ldr	r0, [pc, #392]	; (80020f0 <main+0x4f0>)
 8001f68:	f7ff fd74 	bl	8001a54 <lcd_display>
					}

    			  if(counter == 1){
 8001f6c:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <main+0x4f4>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	f040 8223 	bne.w	80023bc <main+0x7bc>
    			  adxl_read(0x32);
 8001f76:	2032      	movs	r0, #50	; 0x32
 8001f78:	f7ff fe02 	bl	8001b80 <adxl_read>
    			  	x = (( data_rec[1] << 8)  | data_rec[0]);
 8001f7c:	4b63      	ldr	r3, [pc, #396]	; (800210c <main+0x50c>)
 8001f7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	4b61      	ldr	r3, [pc, #388]	; (800210c <main+0x50c>)
 8001f88:	f993 3000 	ldrsb.w	r3, [r3]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <main+0x510>)
 8001f94:	801a      	strh	r2, [r3, #0]
    			  	y = (( data_rec[3] << 8 ) | data_rec[2]);
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <main+0x50c>)
 8001f98:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	4b5a      	ldr	r3, [pc, #360]	; (800210c <main+0x50c>)
 8001fa2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <main+0x514>)
 8001fae:	801a      	strh	r2, [r3, #0]
    			  	z = (( data_rec[5] << 8 ) | data_rec[4]);
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <main+0x50c>)
 8001fb2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <main+0x50c>)
 8001fbc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <main+0x518>)
 8001fc8:	801a      	strh	r2, [r3, #0]

    			  	//convert to 'g'
    			  	xg = x * .0078;
 8001fca:	4b51      	ldr	r3, [pc, #324]	; (8002110 <main+0x510>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fabf 	bl	8000554 <__aeabi_i2d>
 8001fd6:	a344      	add	r3, pc, #272	; (adr r3, 80020e8 <main+0x4e8>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fb24 	bl	8000628 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fe16 	bl	8000c18 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a4b      	ldr	r2, [pc, #300]	; (800211c <main+0x51c>)
 8001ff0:	6013      	str	r3, [r2, #0]
    			  	yg = y * .0078;
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <main+0x514>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe faab 	bl	8000554 <__aeabi_i2d>
 8001ffe:	a33a      	add	r3, pc, #232	; (adr r3, 80020e8 <main+0x4e8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fb10 	bl	8000628 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fe02 	bl	8000c18 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4a42      	ldr	r2, [pc, #264]	; (8002120 <main+0x520>)
 8002018:	6013      	str	r3, [r2, #0]
    			  	zg = z * .0078;
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <main+0x518>)
 800201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa97 	bl	8000554 <__aeabi_i2d>
 8002026:	a330      	add	r3, pc, #192	; (adr r3, 80020e8 <main+0x4e8>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe fafc 	bl	8000628 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f7fe fdee 	bl	8000c18 <__aeabi_d2f>
 800203c:	4603      	mov	r3, r0
 800203e:	4a39      	ldr	r2, [pc, #228]	; (8002124 <main+0x524>)
 8002040:	6013      	str	r3, [r2, #0]

    			  	//display
    			  	dl_kom = sprintf(komunikat, "xg: %.3f, yg: %.3f, zg: %.3f \n", xg, yg, zg);
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <main+0x51c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa96 	bl	8000578 <__aeabi_f2d>
 800204c:	4680      	mov	r8, r0
 800204e:	4689      	mov	r9, r1
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <main+0x520>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa8f 	bl	8000578 <__aeabi_f2d>
 800205a:	4604      	mov	r4, r0
 800205c:	460d      	mov	r5, r1
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <main+0x524>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa88 	bl	8000578 <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002070:	e9cd 4500 	strd	r4, r5, [sp]
 8002074:	4642      	mov	r2, r8
 8002076:	464b      	mov	r3, r9
 8002078:	492b      	ldr	r1, [pc, #172]	; (8002128 <main+0x528>)
 800207a:	482c      	ldr	r0, [pc, #176]	; (800212c <main+0x52c>)
 800207c:	f004 fad8 	bl	8006630 <siprintf>
 8002080:	4603      	mov	r3, r0
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <main+0x530>)
 8002086:	801a      	strh	r2, [r3, #0]
				    HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <main+0x530>)
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	4926      	ldr	r1, [pc, #152]	; (800212c <main+0x52c>)
 8002092:	4828      	ldr	r0, [pc, #160]	; (8002134 <main+0x534>)
 8002094:	f003 f80d 	bl	80050b2 <HAL_UART_Transmit>
				    sprintf((char *) disp.f_line, "x:%.2f", xg);
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <main+0x51c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa6b 	bl	8000578 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4924      	ldr	r1, [pc, #144]	; (8002138 <main+0x538>)
 80020a8:	4815      	ldr	r0, [pc, #84]	; (8002100 <main+0x500>)
 80020aa:	f004 fac1 	bl	8006630 <siprintf>
				    sprintf((char *) disp.s_line, "y:%.2f,z:%.2f", yg, zg);
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <main+0x520>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa60 	bl	8000578 <__aeabi_f2d>
 80020b8:	4604      	mov	r4, r0
 80020ba:	460d      	mov	r5, r1
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <main+0x524>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa59 	bl	8000578 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	e9cd 2300 	strd	r2, r3, [sp]
 80020ce:	4622      	mov	r2, r4
 80020d0:	462b      	mov	r3, r5
 80020d2:	491a      	ldr	r1, [pc, #104]	; (800213c <main+0x53c>)
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <main+0x508>)
 80020d6:	f004 faab 	bl	8006630 <siprintf>
				    lcd_display(&disp);
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <main+0x4f0>)
 80020dc:	f7ff fcba 	bl	8001a54 <lcd_display>
 80020e0:	e16c      	b.n	80023bc <main+0x7bc>
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	8e8a71de 	.word	0x8e8a71de
 80020ec:	3f7ff2e4 	.word	0x3f7ff2e4
 80020f0:	2000053c 	.word	0x2000053c
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000220 	.word	0x20000220
 80020fc:	0800a378 	.word	0x0800a378
 8002100:	2000053d 	.word	0x2000053d
 8002104:	0800a38c 	.word	0x0800a38c
 8002108:	2000054e 	.word	0x2000054e
 800210c:	20000530 	.word	0x20000530
 8002110:	2000045e 	.word	0x2000045e
 8002114:	200004d2 	.word	0x200004d2
 8002118:	200004d0 	.word	0x200004d0
 800211c:	20000538 	.word	0x20000538
 8002120:	2000052c 	.word	0x2000052c
 8002124:	2000048c 	.word	0x2000048c
 8002128:	0800a3a0 	.word	0x0800a3a0
 800212c:	20000460 	.word	0x20000460
 8002130:	20000488 	.word	0x20000488
 8002134:	200005a4 	.word	0x200005a4
 8002138:	0800a3c0 	.word	0x0800a3c0
 800213c:	0800a3c8 	.word	0x0800a3c8

    		  }
    		  else
    		  {

    			  MessageLength = sprintf((char*)Message, "No Fix\n\r");
 8002140:	49a3      	ldr	r1, [pc, #652]	; (80023d0 <main+0x7d0>)
 8002142:	48a4      	ldr	r0, [pc, #656]	; (80023d4 <main+0x7d4>)
 8002144:	f004 fa74 	bl	8006630 <siprintf>
 8002148:	4603      	mov	r3, r0
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4ba2      	ldr	r3, [pc, #648]	; (80023d8 <main+0x7d8>)
 800214e:	701a      	strb	r2, [r3, #0]
    			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002150:	4ba1      	ldr	r3, [pc, #644]	; (80023d8 <main+0x7d8>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b29a      	uxth	r2, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	499e      	ldr	r1, [pc, #632]	; (80023d4 <main+0x7d4>)
 800215c:	489f      	ldr	r0, [pc, #636]	; (80023dc <main+0x7dc>)
 800215e:	f002 ffa8 	bl	80050b2 <HAL_UART_Transmit>


    			  adxl_read(0x32);
 8002162:	2032      	movs	r0, #50	; 0x32
 8002164:	f7ff fd0c 	bl	8001b80 <adxl_read>
    			  	x = (( data_rec[1] << 8)  | data_rec[0]);
 8002168:	4b9d      	ldr	r3, [pc, #628]	; (80023e0 <main+0x7e0>)
 800216a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b21a      	sxth	r2, r3
 8002172:	4b9b      	ldr	r3, [pc, #620]	; (80023e0 <main+0x7e0>)
 8002174:	f993 3000 	ldrsb.w	r3, [r3]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21a      	sxth	r2, r3
 800217e:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <main+0x7e4>)
 8002180:	801a      	strh	r2, [r3, #0]
    			  	y = (( data_rec[3] << 8 ) | data_rec[2]);
 8002182:	4b97      	ldr	r3, [pc, #604]	; (80023e0 <main+0x7e0>)
 8002184:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	b21a      	sxth	r2, r3
 800218c:	4b94      	ldr	r3, [pc, #592]	; (80023e0 <main+0x7e0>)
 800218e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b21a      	sxth	r2, r3
 8002198:	4b93      	ldr	r3, [pc, #588]	; (80023e8 <main+0x7e8>)
 800219a:	801a      	strh	r2, [r3, #0]
    			  	z = (( data_rec[5] << 8 ) | data_rec[4]);
 800219c:	4b90      	ldr	r3, [pc, #576]	; (80023e0 <main+0x7e0>)
 800219e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	4b8e      	ldr	r3, [pc, #568]	; (80023e0 <main+0x7e0>)
 80021a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <main+0x7ec>)
 80021b4:	801a      	strh	r2, [r3, #0]

    			  	//convert to 'g'
    			  	xg = x * .0078;
 80021b6:	4b8b      	ldr	r3, [pc, #556]	; (80023e4 <main+0x7e4>)
 80021b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9c9 	bl	8000554 <__aeabi_i2d>
 80021c2:	a381      	add	r3, pc, #516	; (adr r3, 80023c8 <main+0x7c8>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe fa2e 	bl	8000628 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fd20 	bl	8000c18 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <main+0x7f0>)
 80021dc:	6013      	str	r3, [r2, #0]
    			  	yg = y * .0078;
 80021de:	4b82      	ldr	r3, [pc, #520]	; (80023e8 <main+0x7e8>)
 80021e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f9b5 	bl	8000554 <__aeabi_i2d>
 80021ea:	a377      	add	r3, pc, #476	; (adr r3, 80023c8 <main+0x7c8>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	f7fe fa1a 	bl	8000628 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fd0c 	bl	8000c18 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	4a7c      	ldr	r2, [pc, #496]	; (80023f4 <main+0x7f4>)
 8002204:	6013      	str	r3, [r2, #0]
    			  	zg = z * .0078;
 8002206:	4b79      	ldr	r3, [pc, #484]	; (80023ec <main+0x7ec>)
 8002208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9a1 	bl	8000554 <__aeabi_i2d>
 8002212:	a36d      	add	r3, pc, #436	; (adr r3, 80023c8 <main+0x7c8>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	f7fe fa06 	bl	8000628 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fcf8 	bl	8000c18 <__aeabi_d2f>
 8002228:	4603      	mov	r3, r0
 800222a:	4a73      	ldr	r2, [pc, #460]	; (80023f8 <main+0x7f8>)
 800222c:	6013      	str	r3, [r2, #0]

    			  	//display
    			  	if(counter == 1){
 800222e:	4b73      	ldr	r3, [pc, #460]	; (80023fc <main+0x7fc>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d14e      	bne.n	80022d4 <main+0x6d4>
    			  	dl_kom = sprintf(komunikat, "xg: %.3f, yg: %.3f, zg: %.3f \n", xg, yg, zg);
 8002236:	4b6e      	ldr	r3, [pc, #440]	; (80023f0 <main+0x7f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f99c 	bl	8000578 <__aeabi_f2d>
 8002240:	4680      	mov	r8, r0
 8002242:	4689      	mov	r9, r1
 8002244:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <main+0x7f4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f995 	bl	8000578 <__aeabi_f2d>
 800224e:	4604      	mov	r4, r0
 8002250:	460d      	mov	r5, r1
 8002252:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <main+0x7f8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f98e 	bl	8000578 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002264:	e9cd 4500 	strd	r4, r5, [sp]
 8002268:	4642      	mov	r2, r8
 800226a:	464b      	mov	r3, r9
 800226c:	4964      	ldr	r1, [pc, #400]	; (8002400 <main+0x800>)
 800226e:	4865      	ldr	r0, [pc, #404]	; (8002404 <main+0x804>)
 8002270:	f004 f9de 	bl	8006630 <siprintf>
 8002274:	4603      	mov	r3, r0
 8002276:	b29a      	uxth	r2, r3
 8002278:	4b63      	ldr	r3, [pc, #396]	; (8002408 <main+0x808>)
 800227a:	801a      	strh	r2, [r3, #0]
    			      HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <main+0x808>)
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002284:	495f      	ldr	r1, [pc, #380]	; (8002404 <main+0x804>)
 8002286:	4855      	ldr	r0, [pc, #340]	; (80023dc <main+0x7dc>)
 8002288:	f002 ff13 	bl	80050b2 <HAL_UART_Transmit>
    			      sprintf((char *) disp.f_line, "x:%.2f", xg);
 800228c:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <main+0x7f0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f971 	bl	8000578 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	495c      	ldr	r1, [pc, #368]	; (800240c <main+0x80c>)
 800229c:	485c      	ldr	r0, [pc, #368]	; (8002410 <main+0x810>)
 800229e:	f004 f9c7 	bl	8006630 <siprintf>
    			      sprintf((char *) disp.s_line, "y:%.2f,z:%.2f", yg, zg);
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <main+0x7f4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f966 	bl	8000578 <__aeabi_f2d>
 80022ac:	4604      	mov	r4, r0
 80022ae:	460d      	mov	r5, r1
 80022b0:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <main+0x7f8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f95f 	bl	8000578 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	e9cd 2300 	strd	r2, r3, [sp]
 80022c2:	4622      	mov	r2, r4
 80022c4:	462b      	mov	r3, r5
 80022c6:	4953      	ldr	r1, [pc, #332]	; (8002414 <main+0x814>)
 80022c8:	4853      	ldr	r0, [pc, #332]	; (8002418 <main+0x818>)
 80022ca:	f004 f9b1 	bl	8006630 <siprintf>
    			      lcd_display(&disp);
 80022ce:	4853      	ldr	r0, [pc, #332]	; (800241c <main+0x81c>)
 80022d0:	f7ff fbc0 	bl	8001a54 <lcd_display>
    			  }
    			  	if(counter == 2){
 80022d4:	4b49      	ldr	r3, [pc, #292]	; (80023fc <main+0x7fc>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d135      	bne.n	8002348 <main+0x748>
    			  	    			  	dl_kom = sprintf(komunikat, "xg: %.3f, yg: %.3f, zg: %.3f \n", xg, yg, zg);
 80022dc:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <main+0x7f0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f949 	bl	8000578 <__aeabi_f2d>
 80022e6:	4680      	mov	r8, r0
 80022e8:	4689      	mov	r9, r1
 80022ea:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <main+0x7f4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f942 	bl	8000578 <__aeabi_f2d>
 80022f4:	4604      	mov	r4, r0
 80022f6:	460d      	mov	r5, r1
 80022f8:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <main+0x7f8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f93b 	bl	8000578 <__aeabi_f2d>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800230a:	e9cd 4500 	strd	r4, r5, [sp]
 800230e:	4642      	mov	r2, r8
 8002310:	464b      	mov	r3, r9
 8002312:	493b      	ldr	r1, [pc, #236]	; (8002400 <main+0x800>)
 8002314:	483b      	ldr	r0, [pc, #236]	; (8002404 <main+0x804>)
 8002316:	f004 f98b 	bl	8006630 <siprintf>
 800231a:	4603      	mov	r3, r0
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <main+0x808>)
 8002320:	801a      	strh	r2, [r3, #0]
    			  	    			      HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <main+0x808>)
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	4936      	ldr	r1, [pc, #216]	; (8002404 <main+0x804>)
 800232c:	482b      	ldr	r0, [pc, #172]	; (80023dc <main+0x7dc>)
 800232e:	f002 fec0 	bl	80050b2 <HAL_UART_Transmit>
    			  	    			      sprintf((char *) disp.f_line, "NO FIX");
 8002332:	493b      	ldr	r1, [pc, #236]	; (8002420 <main+0x820>)
 8002334:	4836      	ldr	r0, [pc, #216]	; (8002410 <main+0x810>)
 8002336:	f004 f97b 	bl	8006630 <siprintf>
    			  	    			      sprintf((char *) disp.s_line, "NO LOCATION ");
 800233a:	493a      	ldr	r1, [pc, #232]	; (8002424 <main+0x824>)
 800233c:	4836      	ldr	r0, [pc, #216]	; (8002418 <main+0x818>)
 800233e:	f004 f977 	bl	8006630 <siprintf>
    			  	    			      lcd_display(&disp);
 8002342:	4836      	ldr	r0, [pc, #216]	; (800241c <main+0x81c>)
 8002344:	f7ff fb86 	bl	8001a54 <lcd_display>
    			  	    			  }
    			  	if(counter == 3){
 8002348:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <main+0x7fc>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d135      	bne.n	80023bc <main+0x7bc>
    			  	    			  	dl_kom = sprintf(komunikat, "xg: %.3f, yg: %.3f, zg: %.3f \n", xg, yg, zg);
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <main+0x7f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f90f 	bl	8000578 <__aeabi_f2d>
 800235a:	4680      	mov	r8, r0
 800235c:	4689      	mov	r9, r1
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <main+0x7f4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f908 	bl	8000578 <__aeabi_f2d>
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <main+0x7f8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f901 	bl	8000578 <__aeabi_f2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800237e:	e9cd 4500 	strd	r4, r5, [sp]
 8002382:	4642      	mov	r2, r8
 8002384:	464b      	mov	r3, r9
 8002386:	491e      	ldr	r1, [pc, #120]	; (8002400 <main+0x800>)
 8002388:	481e      	ldr	r0, [pc, #120]	; (8002404 <main+0x804>)
 800238a:	f004 f951 	bl	8006630 <siprintf>
 800238e:	4603      	mov	r3, r0
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <main+0x808>)
 8002394:	801a      	strh	r2, [r3, #0]
    			  	    			      HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <main+0x808>)
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	4919      	ldr	r1, [pc, #100]	; (8002404 <main+0x804>)
 80023a0:	480e      	ldr	r0, [pc, #56]	; (80023dc <main+0x7dc>)
 80023a2:	f002 fe86 	bl	80050b2 <HAL_UART_Transmit>
    			  	    			      sprintf((char *) disp.f_line, "NO FIX");
 80023a6:	491e      	ldr	r1, [pc, #120]	; (8002420 <main+0x820>)
 80023a8:	4819      	ldr	r0, [pc, #100]	; (8002410 <main+0x810>)
 80023aa:	f004 f941 	bl	8006630 <siprintf>
    			  	    			      sprintf((char *) disp.s_line, "NO SPEED/TIME");
 80023ae:	491e      	ldr	r1, [pc, #120]	; (8002428 <main+0x828>)
 80023b0:	4819      	ldr	r0, [pc, #100]	; (8002418 <main+0x818>)
 80023b2:	f004 f93d 	bl	8006630 <siprintf>
    			  	    			      lcd_display(&disp);
 80023b6:	4819      	ldr	r0, [pc, #100]	; (800241c <main+0x81c>)
 80023b8:	f7ff fb4c 	bl	8001a54 <lcd_display>
    			  	    			  }

    		  }

    		  Timer = HAL_GetTick();
 80023bc:	f000 fc3a 	bl	8002c34 <HAL_GetTick>
 80023c0:	6078      	str	r0, [r7, #4]
    NEO6_Task(&GpsState);
 80023c2:	e464      	b.n	8001c8e <main+0x8e>
 80023c4:	f3af 8000 	nop.w
 80023c8:	8e8a71de 	.word	0x8e8a71de
 80023cc:	3f7ff2e4 	.word	0x3f7ff2e4
 80023d0:	0800a3d8 	.word	0x0800a3d8
 80023d4:	20000490 	.word	0x20000490
 80023d8:	2000045c 	.word	0x2000045c
 80023dc:	200005a4 	.word	0x200005a4
 80023e0:	20000530 	.word	0x20000530
 80023e4:	2000045e 	.word	0x2000045e
 80023e8:	200004d2 	.word	0x200004d2
 80023ec:	200004d0 	.word	0x200004d0
 80023f0:	20000538 	.word	0x20000538
 80023f4:	2000052c 	.word	0x2000052c
 80023f8:	2000048c 	.word	0x2000048c
 80023fc:	20000000 	.word	0x20000000
 8002400:	0800a3a0 	.word	0x0800a3a0
 8002404:	20000460 	.word	0x20000460
 8002408:	20000488 	.word	0x20000488
 800240c:	0800a3c0 	.word	0x0800a3c0
 8002410:	2000053d 	.word	0x2000053d
 8002414:	0800a3c8 	.word	0x0800a3c8
 8002418:	2000054e 	.word	0x2000054e
 800241c:	2000053c 	.word	0x2000053c
 8002420:	0800a3e4 	.word	0x0800a3e4
 8002424:	0800a3ec 	.word	0x0800a3ec
 8002428:	0800a3fc 	.word	0x0800a3fc

0800242c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	; 0x50
 8002430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	f107 0320 	add.w	r3, r7, #32
 8002436:	2230      	movs	r2, #48	; 0x30
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fc86 	bl	8005d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <SystemClock_Config+0xcc>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <SystemClock_Config+0xcc>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	; 0x40
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <SystemClock_Config+0xcc>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <SystemClock_Config+0xd0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <SystemClock_Config+0xd0>)
 800247a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <SystemClock_Config+0xd0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800249a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024a0:	2304      	movs	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80024a4:	2354      	movs	r3, #84	; 0x54
 80024a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024ac:	2304      	movs	r3, #4
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fb93 	bl	8003be0 <HAL_RCC_OscConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80024c0:	f000 f870 	bl	80025a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c4:	230f      	movs	r3, #15
 80024c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c8:	2302      	movs	r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f001 fdf5 	bl	80040d0 <HAL_RCC_ClockConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024ec:	f000 f85a 	bl	80025a4 <Error_Handler>
  }
}
 80024f0:	bf00      	nop
 80024f2:	3750      	adds	r7, #80	; 0x50
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000

08002500 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_UART_RxCpltCallback+0x20>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d102      	bne.n	8002518 <HAL_UART_RxCpltCallback+0x18>
	{
		NEO6_ReceiveUartChar(&GpsState);
 8002512:	4803      	ldr	r0, [pc, #12]	; (8002520 <HAL_UART_RxCpltCallback+0x20>)
 8002514:	f7fe fe2c 	bl	8001170 <NEO6_ReceiveUartChar>
	}
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000220 	.word	0x20000220

08002524 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d125      	bne.n	8002582 <HAL_GPIO_EXTI_Callback+0x5e>
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		counter++;
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_GPIO_EXTI_Callback+0x68>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_GPIO_EXTI_Callback+0x68>)
 8002540:	701a      	strb	r2, [r3, #0]
		if(counter > 3)
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_GPIO_EXTI_Callback+0x68>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d908      	bls.n	800255c <HAL_GPIO_EXTI_Callback+0x38>
				counter = counter / 3;
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_GPIO_EXTI_Callback+0x68>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_GPIO_EXTI_Callback+0x68>)
 800255a:	701a      	strb	r2, [r3, #0]
		dl_kom = sprintf(komunikat, "%d", counter);
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_GPIO_EXTI_Callback+0x68>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	490c      	ldr	r1, [pc, #48]	; (8002594 <HAL_GPIO_EXTI_Callback+0x70>)
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <HAL_GPIO_EXTI_Callback+0x74>)
 8002566:	f004 f863 	bl	8006630 <siprintf>
 800256a:	4603      	mov	r3, r0
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_GPIO_EXTI_Callback+0x78>)
 8002570:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, komunikat, dl_kom, 1000);
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_GPIO_EXTI_Callback+0x78>)
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	4907      	ldr	r1, [pc, #28]	; (8002598 <HAL_GPIO_EXTI_Callback+0x74>)
 800257c:	4808      	ldr	r0, [pc, #32]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x7c>)
 800257e:	f002 fd98 	bl	80050b2 <HAL_UART_Transmit>
	}
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000000 	.word	0x20000000
 8002590:	aaaaaaab 	.word	0xaaaaaaab
 8002594:	0800a40c 	.word	0x0800a40c
 8002598:	20000460 	.word	0x20000460
 800259c:	20000488 	.word	0x20000488
 80025a0:	200005a4 	.word	0x200005a4

080025a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a8:	b672      	cpsid	i
}
 80025aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ac:	e7fe      	b.n	80025ac <Error_Handler+0x8>
	...

080025b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_SPI1_Init+0x64>)
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <MX_SPI1_Init+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_SPI1_Init+0x64>)
 80025bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_SPI1_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_SPI1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_SPI1_Init+0x64>)
 80025d0:	2202      	movs	r2, #2
 80025d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_SPI1_Init+0x64>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_SPI1_Init+0x64>)
 80025dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_SPI1_Init+0x64>)
 80025e4:	2228      	movs	r2, #40	; 0x28
 80025e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_SPI1_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_SPI1_Init+0x64>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_SPI1_Init+0x64>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_SPI1_Init+0x64>)
 80025fc:	220a      	movs	r2, #10
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_SPI1_Init+0x64>)
 8002602:	f001 ff61 	bl	80044c8 <HAL_SPI_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800260c:	f7ff ffca 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200004d4 	.word	0x200004d4
 8002618:	40013000 	.word	0x40013000

0800261c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <HAL_SPI_MspInit+0xc0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d149      	bne.n	80026d2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_SPI_MspInit+0xc4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002692:	23c0      	movs	r3, #192	; 0xc0
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a2:	2305      	movs	r3, #5
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <HAL_SPI_MspInit+0xc8>)
 80026ae:	f000 fc95 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026b2:	2308      	movs	r3, #8
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026c2:	2305      	movs	r3, #5
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4619      	mov	r1, r3
 80026cc:	4806      	ldr	r0, [pc, #24]	; (80026e8 <HAL_SPI_MspInit+0xcc>)
 80026ce:	f000 fc85 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40013000 	.word	0x40013000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020400 	.word	0x40020400

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_MspInit+0x4c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_MspInit+0x4c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002788:	f000 fa40 	bl	8002c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <USART1_IRQHandler+0x10>)
 8002796:	f002 fd4f 	bl	8005238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000560 	.word	0x20000560

080027a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027ac:	f000 fdb4 	bl	8003318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_kill>:

int _kill(int pid, int sig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ce:	f003 fa93 	bl	8005cf8 <__errno>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2216      	movs	r2, #22
 80027d6:	601a      	str	r2, [r3, #0]
	return -1;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_exit>:

void _exit (int status)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ffe7 	bl	80027c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027f6:	e7fe      	b.n	80027f6 <_exit+0x12>

080027f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e00a      	b.n	8002820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800280a:	f3af 8000 	nop.w
 800280e:	4601      	mov	r1, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	60ba      	str	r2, [r7, #8]
 8002816:	b2ca      	uxtb	r2, r1
 8002818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	dbf0      	blt.n	800280a <_read+0x12>
	}

return len;
 8002828:	687b      	ldr	r3, [r7, #4]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e009      	b.n	8002858 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	60ba      	str	r2, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf1      	blt.n	8002844 <_write+0x12>
	}
	return len;
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_close>:

int _close(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	return -1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002892:	605a      	str	r2, [r3, #4]
	return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <_isatty>:

int _isatty(int file)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	return 1;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
	return 0;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <_sbrk+0x5c>)
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <_sbrk+0x60>)
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_sbrk+0x64>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <_sbrk+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002904:	f003 f9f8 	bl	8005cf8 <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002912:	e009      	b.n	8002928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <_sbrk+0x64>)
 8002924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20018000 	.word	0x20018000
 8002934:	00000400 	.word	0x00000400
 8002938:	20000208 	.word	0x20000208
 800293c:	20000600 	.word	0x20000600

08002940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <SystemInit+0x20>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	4a05      	ldr	r2, [pc, #20]	; (8002960 <SystemInit+0x20>)
 800294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <MX_USART1_UART_Init+0x50>)
 800296c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 8002970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 800298a:	220c      	movs	r2, #12
 800298c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_USART1_UART_Init+0x4c>)
 800299c:	f002 fb3c 	bl	8005018 <HAL_UART_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029a6:	f7ff fdfd 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000560 	.word	0x20000560
 80029b4:	40011000 	.word	0x40011000

080029b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_USART2_UART_Init+0x50>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART2_UART_Init+0x4c>)
 80029f0:	f002 fb12 	bl	8005018 <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029fa:	f7ff fdd3 	bl	80025a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200005a4 	.word	0x200005a4
 8002a08:	40004400 	.word	0x40004400

08002a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a36      	ldr	r2, [pc, #216]	; (8002b04 <HAL_UART_MspInit+0xf8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d135      	bne.n	8002a9a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a34      	ldr	r2, [pc, #208]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002a38:	f043 0310 	orr.w	r3, r3, #16
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4822      	ldr	r0, [pc, #136]	; (8002b0c <HAL_UART_MspInit+0x100>)
 8002a84:	f000 faaa 	bl	8002fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2025      	movs	r0, #37	; 0x25
 8002a8e:	f000 f9dc 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a92:	2025      	movs	r0, #37	; 0x25
 8002a94:	f000 f9f5 	bl	8002e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a98:	e030      	b.n	8002afc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <HAL_UART_MspInit+0x104>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d12b      	bne.n	8002afc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_UART_MspInit+0xfc>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002adc:	230c      	movs	r3, #12
 8002ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aec:	2307      	movs	r3, #7
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_UART_MspInit+0x100>)
 8002af8:	f000 fa70 	bl	8002fdc <HAL_GPIO_Init>
}
 8002afc:	bf00      	nop
 8002afe:	3730      	adds	r7, #48	; 0x30
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40011000 	.word	0x40011000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40004400 	.word	0x40004400

08002b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b18:	480d      	ldr	r0, [pc, #52]	; (8002b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b1a:	490e      	ldr	r1, [pc, #56]	; (8002b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b30:	4c0b      	ldr	r4, [pc, #44]	; (8002b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b3e:	f7ff feff 	bl	8002940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b42:	f003 f8df 	bl	8005d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b46:	f7ff f85b 	bl	8001c00 <main>
  bx  lr    
 8002b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b54:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002b58:	0800a8e4 	.word	0x0800a8e4
  ldr r2, =_sbss
 8002b5c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002b60:	200005fc 	.word	0x200005fc

08002b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_Init+0x40>)
 8002b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_Init+0x40>)
 8002b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a07      	ldr	r2, [pc, #28]	; (8002ba8 <HAL_Init+0x40>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b90:	2003      	movs	r0, #3
 8002b92:	f000 f94f 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f000 f808 	bl	8002bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b9c:	f7ff fda6 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00

08002bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x54>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_InitTick+0x58>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f967 	bl	8002e9e <HAL_SYSTICK_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00e      	b.n	8002bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d80a      	bhi.n	8002bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be0:	2200      	movs	r2, #0
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be8:	f000 f92f 	bl	8002e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bec:	4a06      	ldr	r2, [pc, #24]	; (8002c08 <HAL_InitTick+0x5c>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000004 	.word	0x20000004
 8002c04:	2000000c 	.word	0x2000000c
 8002c08:	20000008 	.word	0x20000008

08002c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x20>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_IncTick+0x24>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <HAL_IncTick+0x24>)
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000000c 	.word	0x2000000c
 8002c30:	200005e8 	.word	0x200005e8

08002c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_GetTick+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	200005e8 	.word	0x200005e8

08002c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7ff ffee 	bl	8002c34 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d005      	beq.n	8002c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_Delay+0x44>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c72:	bf00      	nop
 8002c74:	f7ff ffde 	bl	8002c34 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8f7      	bhi.n	8002c74 <HAL_Delay+0x28>
  {
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000000c 	.word	0x2000000c

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db0b      	blt.n	8002d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <__NVIC_EnableIRQ+0x38>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	; (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff29 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff3e 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff31 	bl	8002cf8 <__NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffa2 	bl	8002df0 <SysTick_Config>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff feb6 	bl	8002c34 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d008      	beq.n	8002ee8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e052      	b.n	8002f8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0216 	bic.w	r2, r2, #22
 8002ef6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <HAL_DMA_Abort+0x62>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0208 	bic.w	r2, r2, #8
 8002f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f38:	e013      	b.n	8002f62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f3a:	f7ff fe7b 	bl	8002c34 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d90c      	bls.n	8002f62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e015      	b.n	8002f8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e4      	bne.n	8002f3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e00c      	b.n	8002fce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e159      	b.n	80032ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	f040 8148 	bne.w	80032a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d005      	beq.n	800302e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	2b02      	cmp	r3, #2
 800302c:	d130      	bne.n	8003090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 0201 	and.w	r2, r3, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b03      	cmp	r3, #3
 800309a:	d017      	beq.n	80030cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d123      	bne.n	8003120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	08da      	lsrs	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3208      	adds	r2, #8
 80030e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	08da      	lsrs	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3208      	adds	r2, #8
 800311a:	69b9      	ldr	r1, [r7, #24]
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0203 	and.w	r2, r3, #3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a2 	beq.w	80032a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_GPIO_Init+0x2e8>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_GPIO_Init+0x2e8>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_GPIO_Init+0x2e8>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317e:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <HAL_GPIO_Init+0x2ec>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a49      	ldr	r2, [pc, #292]	; (80032cc <HAL_GPIO_Init+0x2f0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x202>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a48      	ldr	r2, [pc, #288]	; (80032d0 <HAL_GPIO_Init+0x2f4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x1fe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a47      	ldr	r2, [pc, #284]	; (80032d4 <HAL_GPIO_Init+0x2f8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x1fa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a46      	ldr	r2, [pc, #280]	; (80032d8 <HAL_GPIO_Init+0x2fc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x1f6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a45      	ldr	r2, [pc, #276]	; (80032dc <HAL_GPIO_Init+0x300>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x1f2>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031ce:	2307      	movs	r3, #7
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031de:	2300      	movs	r3, #0
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f0:	4935      	ldr	r1, [pc, #212]	; (80032c8 <HAL_GPIO_Init+0x2ec>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003222:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_GPIO_Init+0x304>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800324c:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <HAL_GPIO_Init+0x304>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_GPIO_Init+0x304>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_GPIO_Init+0x304>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	f67f aea2 	bls.w	8002ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff f8f4 	bl	8002524 <HAL_GPIO_EXTI_Callback>
  }
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e12b      	b.n	80035b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe faa2 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ac:	f001 f864 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a81      	ldr	r2, [pc, #516]	; (80035bc <HAL_I2C_Init+0x274>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d807      	bhi.n	80033cc <HAL_I2C_Init+0x84>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_I2C_Init+0x278>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e006      	b.n	80033da <HAL_I2C_Init+0x92>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <HAL_I2C_Init+0x27c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bf94      	ite	ls
 80033d4:	2301      	movls	r3, #1
 80033d6:	2300      	movhi	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0e7      	b.n	80035b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a78      	ldr	r2, [pc, #480]	; (80035c8 <HAL_I2C_Init+0x280>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9b      	lsrs	r3, r3, #18
 80033ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_I2C_Init+0x274>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d802      	bhi.n	800341c <HAL_I2C_Init+0xd4>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	e009      	b.n	8003430 <HAL_I2C_Init+0xe8>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_I2C_Init+0x284>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	3301      	adds	r3, #1
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	495c      	ldr	r1, [pc, #368]	; (80035bc <HAL_I2C_Init+0x274>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d819      	bhi.n	8003484 <HAL_I2C_Init+0x13c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e59      	subs	r1, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb1 f3f3 	udiv	r3, r1, r3
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003464:	400b      	ands	r3, r1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_I2C_Init+0x138>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e59      	subs	r1, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fbb1 f3f3 	udiv	r3, r1, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347e:	e051      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003480:	2304      	movs	r3, #4
 8003482:	e04f      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d111      	bne.n	80034b0 <HAL_I2C_Init+0x168>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e012      	b.n	80034d6 <HAL_I2C_Init+0x18e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e58      	subs	r0, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	0099      	lsls	r1, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Init+0x196>
 80034da:	2301      	movs	r3, #1
 80034dc:	e022      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <HAL_I2C_Init+0x1bc>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1e58      	subs	r0, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	440b      	add	r3, r1
 80034f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003502:	e00f      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	0099      	lsls	r1, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	fbb0 f3f3 	udiv	r3, r0, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	6809      	ldr	r1, [r1, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6911      	ldr	r1, [r2, #16]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68d2      	ldr	r2, [r2, #12]
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	430b      	orrs	r3, r1
 8003566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	000186a0 	.word	0x000186a0
 80035c0:	001e847f 	.word	0x001e847f
 80035c4:	003d08ff 	.word	0x003d08ff
 80035c8:	431bde83 	.word	0x431bde83
 80035cc:	10624dd3 	.word	0x10624dd3

080035d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	461a      	mov	r2, r3
 80035dc:	460b      	mov	r3, r1
 80035de:	817b      	strh	r3, [r7, #10]
 80035e0:	4613      	mov	r3, r2
 80035e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7ff fb26 	bl	8002c34 <HAL_GetTick>
 80035e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	f040 80e0 	bne.w	80037b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2319      	movs	r3, #25
 80035fe:	2201      	movs	r2, #1
 8003600:	4970      	ldr	r1, [pc, #448]	; (80037c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f964 	bl	80038d0 <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
 8003610:	e0d3      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_I2C_Master_Transmit+0x50>
 800361c:	2302      	movs	r3, #2
 800361e:	e0cc      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d007      	beq.n	8003646 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2221      	movs	r2, #33	; 0x21
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2210      	movs	r2, #16
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	893a      	ldrh	r2, [r7, #8]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a50      	ldr	r2, [pc, #320]	; (80037c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	6a3a      	ldr	r2, [r7, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f89c 	bl	80037cc <I2C_MasterRequestWrite>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e08d      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036b4:	e066      	b.n	8003784 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f9de 	bl	8003a7c <I2C_WaitOnTXEFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06b      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d11b      	bne.n	8003758 <HAL_I2C_Master_Transmit+0x188>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d017      	beq.n	8003758 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	6a39      	ldr	r1, [r7, #32]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f9ce 	bl	8003afe <I2C_WaitOnBTFFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	2b04      	cmp	r3, #4
 800376e:	d107      	bne.n	8003780 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e01a      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d194      	bne.n	80036b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	00100002 	.word	0x00100002
 80037c8:	ffff0000 	.word	0xffff0000

080037cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d006      	beq.n	80037f6 <I2C_MasterRequestWrite+0x2a>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d003      	beq.n	80037f6 <I2C_MasterRequestWrite+0x2a>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f4:	d108      	bne.n	8003808 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e00b      	b.n	8003820 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	2b12      	cmp	r3, #18
 800380e:	d107      	bne.n	8003820 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f84f 	bl	80038d0 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003846:	d103      	bne.n	8003850 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e035      	b.n	80038c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385c:	d108      	bne.n	8003870 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800386c:	611a      	str	r2, [r3, #16]
 800386e:	e01b      	b.n	80038a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003870:	897b      	ldrh	r3, [r7, #10]
 8003872:	11db      	asrs	r3, r3, #7
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0306 	and.w	r3, r3, #6
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f063 030f 	orn	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	490e      	ldr	r1, [pc, #56]	; (80038c8 <I2C_MasterRequestWrite+0xfc>)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f875 	bl	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e010      	b.n	80038c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4907      	ldr	r1, [pc, #28]	; (80038cc <I2C_MasterRequestWrite+0x100>)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f865 	bl	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	00010008 	.word	0x00010008
 80038cc:	00010002 	.word	0x00010002

080038d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e0:	e025      	b.n	800392e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e8:	d021      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7ff f9a3 	bl	8002c34 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d116      	bne.n	800392e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e023      	b.n	8003976 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10d      	bne.n	8003954 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	43da      	mvns	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4013      	ands	r3, r2
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	e00c      	b.n	800396e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	43da      	mvns	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	429a      	cmp	r2, r3
 8003972:	d0b6      	beq.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800398c:	e051      	b.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399c:	d123      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e046      	b.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ec:	d021      	beq.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7ff f921 	bl	8002c34 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d116      	bne.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e020      	b.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10c      	bne.n	8003a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	e00b      	b.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4013      	ands	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d18d      	bne.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a88:	e02d      	b.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f878 	bl	8003b80 <I2C_IsAcknowledgeFailed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e02d      	b.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa0:	d021      	beq.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7ff f8c7 	bl	8002c34 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d116      	bne.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e007      	b.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d1ca      	bne.n	8003a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b0a:	e02d      	b.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f837 	bl	8003b80 <I2C_IsAcknowledgeFailed>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e02d      	b.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b22:	d021      	beq.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7ff f886 	bl	8002c34 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d116      	bne.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e007      	b.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d1ca      	bne.n	8003b0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d11b      	bne.n	8003bd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ba0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e264      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d075      	beq.n	8003cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfe:	4ba3      	ldr	r3, [pc, #652]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0a:	4ba0      	ldr	r3, [pc, #640]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d112      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c16:	4b9d      	ldr	r3, [pc, #628]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	4b99      	ldr	r3, [pc, #612]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05b      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x108>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d157      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e23f      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d106      	bne.n	8003c54 <HAL_RCC_OscConfig+0x74>
 8003c46:	4b91      	ldr	r3, [pc, #580]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a90      	ldr	r2, [pc, #576]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e01d      	b.n	8003c90 <HAL_RCC_OscConfig+0xb0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x98>
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a8a      	ldr	r2, [pc, #552]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b88      	ldr	r3, [pc, #544]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a87      	ldr	r2, [pc, #540]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0xb0>
 8003c78:	4b84      	ldr	r3, [pc, #528]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a83      	ldr	r2, [pc, #524]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b81      	ldr	r3, [pc, #516]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a80      	ldr	r2, [pc, #512]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe ffcc 	bl	8002c34 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fe ffc8 	bl	8002c34 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e204      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe ffb8 	bl	8002c34 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe ffb4 	bl	8002c34 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1f0      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	4b6c      	ldr	r3, [pc, #432]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xe8>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d063      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b62      	ldr	r3, [pc, #392]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d11c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0e:	4b5f      	ldr	r3, [pc, #380]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d116      	bne.n	8003d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	4b5c      	ldr	r3, [pc, #368]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x152>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1c4      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b56      	ldr	r3, [pc, #344]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4952      	ldr	r1, [pc, #328]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	e03a      	b.n	8003dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d020      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fe ff6d 	bl	8002c34 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fe ff69 	bl	8002c34 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e1a5      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4940      	ldr	r1, [pc, #256]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
 8003d90:	e015      	b.n	8003dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d92:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <HAL_RCC_OscConfig+0x2b0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe ff4c 	bl	8002c34 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da0:	f7fe ff48 	bl	8002c34 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e184      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d030      	beq.n	8003e2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_RCC_OscConfig+0x2b4>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fe ff2c 	bl	8002c34 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de0:	f7fe ff28 	bl	8002c34 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e164      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x200>
 8003dfe:	e015      	b.n	8003e2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e00:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x2b4>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e06:	f7fe ff15 	bl	8002c34 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe ff11 	bl	8002c34 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e14d      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80a0 	beq.w	8003f7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_OscConfig+0x2b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d121      	bne.n	8003eba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_RCC_OscConfig+0x2b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <HAL_RCC_OscConfig+0x2b8>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7fe fed7 	bl	8002c34 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	e011      	b.n	8003eae <HAL_RCC_OscConfig+0x2ce>
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470000 	.word	0x42470000
 8003e94:	42470e80 	.word	0x42470e80
 8003e98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fe feca 	bl	8002c34 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e106      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b85      	ldr	r3, [pc, #532]	; (80040c4 <HAL_RCC_OscConfig+0x4e4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2f0>
 8003ec2:	4b81      	ldr	r3, [pc, #516]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a80      	ldr	r2, [pc, #512]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	e01c      	b.n	8003f0a <HAL_RCC_OscConfig+0x32a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x312>
 8003ed8:	4b7b      	ldr	r3, [pc, #492]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a7a      	ldr	r2, [pc, #488]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	4b78      	ldr	r3, [pc, #480]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a77      	ldr	r2, [pc, #476]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCC_OscConfig+0x32a>
 8003ef2:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a74      	ldr	r2, [pc, #464]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	4b72      	ldr	r3, [pc, #456]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a71      	ldr	r2, [pc, #452]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d015      	beq.n	8003f3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fe fe8f 	bl	8002c34 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe fe8b 	bl	8002c34 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0c5      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f30:	4b65      	ldr	r3, [pc, #404]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ee      	beq.n	8003f1a <HAL_RCC_OscConfig+0x33a>
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe fe79 	bl	8002c34 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe fe75 	bl	8002c34 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0af      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5c:	4b5a      	ldr	r3, [pc, #360]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ee      	bne.n	8003f46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b56      	ldr	r3, [pc, #344]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a55      	ldr	r2, [pc, #340]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 809b 	beq.w	80040ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f84:	4b50      	ldr	r3, [pc, #320]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d05c      	beq.n	800404a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d141      	bne.n	800401c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b4c      	ldr	r3, [pc, #304]	; (80040cc <HAL_RCC_OscConfig+0x4ec>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fe fe49 	bl	8002c34 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fe fe45 	bl	8002c34 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e081      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	019b      	lsls	r3, r3, #6
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	4937      	ldr	r1, [pc, #220]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCC_OscConfig+0x4ec>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fe1e 	bl	8002c34 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fe1a 	bl	8002c34 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e056      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x41c>
 800401a:	e04e      	b.n	80040ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCC_OscConfig+0x4ec>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe fe07 	bl	8002c34 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe fe03 	bl	8002c34 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e03f      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403c:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x44a>
 8004048:	e037      	b.n	80040ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e032      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004056:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <HAL_RCC_OscConfig+0x4e8>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d028      	beq.n	80040b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d121      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d11a      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004086:	4013      	ands	r3, r2
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408e:	4293      	cmp	r3, r2
 8004090:	d111      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	3b01      	subs	r3, #1
 80040a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40007000 	.word	0x40007000
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470060 	.word	0x42470060

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0cc      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b8      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	494d      	ldr	r1, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d044      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e067      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fe fd38 	bl	8002c34 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fe fd34 	bl	8002c34 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20c      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e032      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004256:	f000 f821 	bl	800429c <HAL_RCC_GetSysClockFreq>
 800425a:	4602      	mov	r2, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	490a      	ldr	r1, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	5ccb      	ldrb	r3, [r1, r3]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fc98 	bl	8002bac <HAL_InitTick>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00
 800428c:	40023800 	.word	0x40023800
 8004290:	0800a410 	.word	0x0800a410
 8004294:	20000004 	.word	0x20000004
 8004298:	20000008 	.word	0x20000008

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	2300      	movs	r3, #0
 80042ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b4:	4b67      	ldr	r3, [pc, #412]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d00d      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x40>
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	f200 80bd 	bhi.w	8004440 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ce:	e0b7      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042d2:	60bb      	str	r3, [r7, #8]
       break;
 80042d4:	e0b7      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d6:	4b61      	ldr	r3, [pc, #388]	; (800445c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042d8:	60bb      	str	r3, [r7, #8]
      break;
 80042da:	e0b4      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042dc:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e6:	4b5b      	ldr	r3, [pc, #364]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d04d      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f2:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	099b      	lsrs	r3, r3, #6
 80042f8:	461a      	mov	r2, r3
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	ea02 0800 	and.w	r8, r2, r0
 800430a:	ea03 0901 	and.w	r9, r3, r1
 800430e:	4640      	mov	r0, r8
 8004310:	4649      	mov	r1, r9
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	014b      	lsls	r3, r1, #5
 800431c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004320:	0142      	lsls	r2, r0, #5
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	ebb0 0008 	subs.w	r0, r0, r8
 800432a:	eb61 0109 	sbc.w	r1, r1, r9
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800433c:	0182      	lsls	r2, r0, #6
 800433e:	1a12      	subs	r2, r2, r0
 8004340:	eb63 0301 	sbc.w	r3, r3, r1
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	00d9      	lsls	r1, r3, #3
 800434e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004352:	00d0      	lsls	r0, r2, #3
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	eb12 0208 	adds.w	r2, r2, r8
 800435c:	eb43 0309 	adc.w	r3, r3, r9
 8004360:	f04f 0000 	mov.w	r0, #0
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	0259      	lsls	r1, r3, #9
 800436a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800436e:	0250      	lsls	r0, r2, #9
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f7fc fc9a 	bl	8000cb8 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	e04a      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	461a      	mov	r2, r3
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	ea02 0400 	and.w	r4, r2, r0
 80043a6:	ea03 0501 	and.w	r5, r3, r1
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	014b      	lsls	r3, r1, #5
 80043b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043bc:	0142      	lsls	r2, r0, #5
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	1b00      	subs	r0, r0, r4
 80043c4:	eb61 0105 	sbc.w	r1, r1, r5
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	018b      	lsls	r3, r1, #6
 80043d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043d6:	0182      	lsls	r2, r0, #6
 80043d8:	1a12      	subs	r2, r2, r0
 80043da:	eb63 0301 	sbc.w	r3, r3, r1
 80043de:	f04f 0000 	mov.w	r0, #0
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	00d9      	lsls	r1, r3, #3
 80043e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ec:	00d0      	lsls	r0, r2, #3
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	1912      	adds	r2, r2, r4
 80043f4:	eb45 0303 	adc.w	r3, r5, r3
 80043f8:	f04f 0000 	mov.w	r0, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	0299      	lsls	r1, r3, #10
 8004402:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004406:	0290      	lsls	r0, r2, #10
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	461a      	mov	r2, r3
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	f7fc fc4e 	bl	8000cb8 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	60bb      	str	r3, [r7, #8]
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004442:	60bb      	str	r3, [r7, #8]
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	68bb      	ldr	r3, [r7, #8]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	00f42400 	.word	0x00f42400
 800445c:	007a1200 	.word	0x007a1200

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_RCC_GetHCLKFreq+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000004 	.word	0x20000004

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff0 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	0800a420 	.word	0x0800a420

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffdc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0b5b      	lsrs	r3, r3, #13
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	0800a420 	.word	0x0800a420

080044c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07b      	b.n	80045d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d009      	beq.n	8004500 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	61da      	str	r2, [r3, #28]
 80044f2:	e005      	b.n	8004500 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe f87e 	bl	800261c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004536:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	ea42 0103 	orr.w	r1, r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0104 	and.w	r1, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0210 	and.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_Transmit+0x22>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e126      	b.n	800484a <HAL_SPI_Transmit+0x270>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fe fb16 	bl	8002c34 <HAL_GetTick>
 8004608:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800461a:	2302      	movs	r3, #2
 800461c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800461e:	e10b      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Transmit+0x52>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004630:	e102      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2203      	movs	r2, #3
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	d10f      	bne.n	800469a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d14b      	bne.n	800475a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_Transmit+0xf6>
 80046ca:	8afb      	ldrh	r3, [r7, #22]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d13e      	bne.n	800474e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046f4:	e02b      	b.n	800474e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d112      	bne.n	800472a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	; 0x36
 8004728:	e011      	b.n	800474e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fe fa83 	bl	8002c34 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Transmit+0x168>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Transmit+0x16e>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800474c:	e074      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ce      	bne.n	80046f6 <HAL_SPI_Transmit+0x11c>
 8004758:	e04c      	b.n	80047f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0x18e>
 8004762:	8afb      	ldrh	r3, [r7, #22]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d140      	bne.n	80047ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	7812      	ldrb	r2, [r2, #0]
 8004774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800478e:	e02c      	b.n	80047ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d113      	bne.n	80047c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80047c4:	e011      	b.n	80047ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c6:	f7fe fa35 	bl	8002c34 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d803      	bhi.n	80047de <HAL_SPI_Transmit+0x204>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047dc:	d102      	bne.n	80047e4 <HAL_SPI_Transmit+0x20a>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047e8:	e026      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1cd      	bne.n	8004790 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fbcb 	bl	8004f94 <SPI_EndRxTxTransaction>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e000      	b.n	8004838 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004848:	7ffb      	ldrb	r3, [r7, #31]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b088      	sub	sp, #32
 8004856:	af02      	add	r7, sp, #8
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486e:	d112      	bne.n	8004896 <HAL_SPI_Receive+0x44>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10e      	bne.n	8004896 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2204      	movs	r2, #4
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f8f1 	bl	8004a74 <HAL_SPI_TransmitReceive>
 8004892:	4603      	mov	r3, r0
 8004894:	e0ea      	b.n	8004a6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_SPI_Receive+0x52>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0e3      	b.n	8004a6c <HAL_SPI_Receive+0x21a>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ac:	f7fe f9c2 	bl	8002c34 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048c2:	e0ca      	b.n	8004a5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Receive+0x7e>
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048d4:	e0c1      	b.n	8004a5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2204      	movs	r2, #4
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491c:	d10f      	bne.n	800493e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d007      	beq.n	800495c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d162      	bne.n	8004a2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004964:	e02e      	b.n	80049c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d115      	bne.n	80049a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f103 020c 	add.w	r2, r3, #12
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	7812      	ldrb	r2, [r2, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800499e:	e011      	b.n	80049c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049a0:	f7fe f948 	bl	8002c34 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d803      	bhi.n	80049b8 <HAL_SPI_Receive+0x166>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b6:	d102      	bne.n	80049be <HAL_SPI_Receive+0x16c>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049c2:	e04a      	b.n	8004a5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cb      	bne.n	8004966 <HAL_SPI_Receive+0x114>
 80049ce:	e031      	b.n	8004a34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d113      	bne.n	8004a06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	b292      	uxth	r2, r2
 80049ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a04:	e011      	b.n	8004a2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a06:	f7fe f915 	bl	8002c34 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d803      	bhi.n	8004a1e <HAL_SPI_Receive+0x1cc>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1c:	d102      	bne.n	8004a24 <HAL_SPI_Receive+0x1d2>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a28:	e017      	b.n	8004a5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1cd      	bne.n	80049d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fa45 	bl	8004ec8 <SPI_EndRxTransaction>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
 8004a56:	e000      	b.n	8004a5a <HAL_SPI_Receive+0x208>
  }

error :
 8004a58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08c      	sub	sp, #48	; 0x30
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a82:	2301      	movs	r3, #1
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_SPI_TransmitReceive+0x26>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e18a      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x33c>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa2:	f7fe f8c7 	bl	8002c34 <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ab8:	887b      	ldrh	r3, [r7, #2]
 8004aba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d00f      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x70>
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d107      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d103      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x68>
 8004ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d003      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ae2:	e15b      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x82>
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004afc:	e14e      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d003      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2205      	movs	r2, #5
 8004b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	887a      	ldrh	r2, [r7, #2]
 8004b22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	887a      	ldrh	r2, [r7, #2]
 8004b3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d007      	beq.n	8004b66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	d178      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x10a>
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d166      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	881a      	ldrh	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	1c9a      	adds	r2, r3, #2
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba2:	e053      	b.n	8004c4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d11b      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x176>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d016      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x176>
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d113      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d119      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x1b8>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c2c:	f7fe f802 	bl	8002c34 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d807      	bhi.n	8004c4c <HAL_SPI_TransmitReceive+0x1d8>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c42:	d003      	beq.n	8004c4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c4a:	e0a7      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1a6      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x130>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1a1      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x130>
 8004c60:	e07c      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x1fc>
 8004c6a:	8b7b      	ldrh	r3, [r7, #26]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d16b      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c96:	e057      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d11c      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x26c>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d017      	beq.n	8004ce0 <HAL_SPI_TransmitReceive+0x26c>
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d114      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d119      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x2ae>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d014      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d22:	f7fd ff87 	bl	8002c34 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d803      	bhi.n	8004d3a <HAL_SPI_TransmitReceive+0x2c6>
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d38:	d102      	bne.n	8004d40 <HAL_SPI_TransmitReceive+0x2cc>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d46:	e029      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1a2      	bne.n	8004c98 <HAL_SPI_TransmitReceive+0x224>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d19d      	bne.n	8004c98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f917 	bl	8004f94 <SPI_EndRxTxTransaction>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d006      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d78:	e010      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	e000      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3730      	adds	r7, #48	; 0x30
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dc8:	f7fd ff34 	bl	8002c34 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dd8:	f7fd ff2c 	bl	8002c34 <HAL_GetTick>
 8004ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	015b      	lsls	r3, r3, #5
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	fb02 f303 	mul.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dee:	e054      	b.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d050      	beq.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004df8:	f7fd ff1c 	bl	8002c34 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d902      	bls.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13d      	bne.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e26:	d111      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e30:	d004      	beq.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3a:	d107      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e54:	d10f      	bne.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e017      	b.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d19b      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000004 	.word	0x20000004

08004ec8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004edc:	d111      	bne.n	8004f02 <SPI_EndRxTransaction+0x3a>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee6:	d004      	beq.n	8004ef2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef0:	d107      	bne.n	8004f02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0a:	d12a      	bne.n	8004f62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f14:	d012      	beq.n	8004f3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2180      	movs	r1, #128	; 0x80
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff ff49 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02d      	beq.n	8004f88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e026      	b.n	8004f8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	2101      	movs	r1, #1
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff ff36 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01a      	beq.n	8004f88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e013      	b.n	8004f8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff ff23 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e000      	b.n	8004f8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <SPI_EndRxTxTransaction+0x7c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <SPI_EndRxTxTransaction+0x80>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0d5b      	lsrs	r3, r3, #21
 8004fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fbe:	d112      	bne.n	8004fe6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff fef4 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e00f      	b.n	8005006 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d0f2      	beq.n	8004fe6 <SPI_EndRxTxTransaction+0x52>
 8005000:	e000      	b.n	8005004 <SPI_EndRxTxTransaction+0x70>
        break;
 8005002:	bf00      	nop
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000004 	.word	0x20000004
 8005014:	165e9f81 	.word	0x165e9f81

08005018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e03f      	b.n	80050aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fd fce4 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2224      	movs	r2, #36	; 0x24
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800505a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fc7b 	bl	8005958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b08a      	sub	sp, #40	; 0x28
 80050b6:	af02      	add	r7, sp, #8
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d17c      	bne.n	80051cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_Transmit+0x2c>
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e075      	b.n	80051ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_UART_Transmit+0x3e>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e06e      	b.n	80051ce <HAL_UART_Transmit+0x11c>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2221      	movs	r2, #33	; 0x21
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005106:	f7fd fd95 	bl	8002c34 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005120:	d108      	bne.n	8005134 <HAL_UART_Transmit+0x82>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005144:	e02a      	b.n	800519c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fa3d 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e036      	b.n	80051ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	3302      	adds	r3, #2
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e007      	b.n	800518e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	3301      	adds	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1cf      	bne.n	8005146 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2140      	movs	r1, #64	; 0x40
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fa0d 	bl	80055d0 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e000      	b.n	80051ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	4613      	mov	r3, r2
 80051e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d11d      	bne.n	800522c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Receive_IT+0x26>
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e016      	b.n	800522e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_UART_Receive_IT+0x38>
 800520a:	2302      	movs	r3, #2
 800520c:	e00f      	b.n	800522e <HAL_UART_Receive_IT+0x58>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	461a      	mov	r2, r3
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fa1e 	bl	8005664 <UART_Start_Receive_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	e000      	b.n	800522e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_UART_IRQHandler+0x52>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fad1 	bl	800582a <UART_Receive_IT>
      return;
 8005288:	e17c      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80b1 	beq.w	80053f4 <HAL_UART_IRQHandler+0x1bc>
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <HAL_UART_IRQHandler+0x70>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80a6 	beq.w	80053f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_UART_IRQHandler+0x90>
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_UART_IRQHandler+0xb0>
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	f043 0202 	orr.w	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_UART_IRQHandler+0xd0>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	f043 0204 	orr.w	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00f      	beq.n	8005332 <HAL_UART_IRQHandler+0xfa>
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_UART_IRQHandler+0xee>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 811f 	beq.w	800557a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_UART_IRQHandler+0x11e>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fa6a 	bl	800582a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <HAL_UART_IRQHandler+0x146>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d031      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9aa 	bl	80056d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d123      	bne.n	80053da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d013      	beq.n	80053d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4a77      	ldr	r2, [pc, #476]	; (800558c <HAL_UART_IRQHandler+0x354>)
 80053b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fd fded 	bl	8002f96 <HAL_DMA_Abort_IT>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	e00e      	b.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8e6 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e00a      	b.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8e2 	bl	80055a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	e006      	b.n	80053f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8de 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053ee:	e0c4      	b.n	800557a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	bf00      	nop
    return;
 80053f2:	e0c2      	b.n	800557a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 80a2 	bne.w	8005542 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 809c 	beq.w	8005542 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8096 	beq.w	8005542 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d14f      	bne.n	80054da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005444:	8a3b      	ldrh	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8099 	beq.w	800557e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005450:	8a3a      	ldrh	r2, [r7, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	f080 8093 	bcs.w	800557e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8a3a      	ldrh	r2, [r7, #16]
 800545c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005468:	d02b      	beq.n	80054c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005478:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0210 	bic.w	r2, r2, #16
 80054b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fd fcfa 	bl	8002eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f870 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054d8:	e051      	b.n	800557e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d047      	beq.n	8005582 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80054f2:	8a7b      	ldrh	r3, [r7, #18]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d044      	beq.n	8005582 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005506:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0210 	bic.w	r2, r2, #16
 8005534:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005536:	8a7b      	ldrh	r3, [r7, #18]
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f83c 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005540:	e01f      	b.n	8005582 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_UART_IRQHandler+0x326>
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8ff 	bl	800575a <UART_Transmit_IT>
    return;
 800555c:	e012      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <HAL_UART_IRQHandler+0x34c>
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f941 	bl	80057fa <UART_EndTransmit_IT>
    return;
 8005578:	e004      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
    return;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
      return;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_UART_IRQHandler+0x34c>
      return;
 8005582:	bf00      	nop
  }
}
 8005584:	3728      	adds	r7, #40	; 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	08005733 	.word	0x08005733

08005590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e0:	e02c      	b.n	800563c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e8:	d028      	beq.n	800563c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f0:	f7fd fb20 	bl	8002c34 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d21d      	bcs.n	800563c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800560e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e00f      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	429a      	cmp	r2, r3
 8005658:	d0c3      	beq.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2222      	movs	r2, #34	; 0x22
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0220 	orr.w	r2, r2, #32
 80056c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	2b01      	cmp	r3, #1
 8005706:	d107      	bne.n	8005718 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0210 	bic.w	r2, r2, #16
 8005716:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ff29 	bl	80055a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b21      	cmp	r3, #33	; 0x21
 800576c:	d13e      	bne.n	80057ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005776:	d114      	bne.n	80057a2 <UART_Transmit_IT+0x48>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d110      	bne.n	80057a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	1c9a      	adds	r2, r3, #2
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]
 80057a0:	e008      	b.n	80057b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6211      	str	r1, [r2, #32]
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4619      	mov	r1, r3
 80057c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10f      	bne.n	80057e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005810:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff feb8 	bl	8005590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b22      	cmp	r3, #34	; 0x22
 800583c:	f040 8087 	bne.w	800594e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005848:	d117      	bne.n	800587a <UART_Receive_IT+0x50>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d113      	bne.n	800587a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005868:	b29a      	uxth	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	1c9a      	adds	r2, r3, #2
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	; 0x28
 8005878:	e026      	b.n	80058c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588c:	d007      	beq.n	800589e <UART_Receive_IT+0x74>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <UART_Receive_IT+0x82>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e008      	b.n	80058be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4619      	mov	r1, r3
 80058d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d136      	bne.n	800594a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0220 	bic.w	r2, r2, #32
 80058ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10e      	bne.n	800593a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0210 	bic.w	r2, r2, #16
 800592a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fe40 	bl	80055b8 <HAL_UARTEx_RxEventCallback>
 8005938:	e002      	b.n	8005940 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc fde0 	bl	8002500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e002      	b.n	8005950 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e000      	b.n	8005950 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800594e:	2302      	movs	r3, #2
  }
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b09f      	sub	sp, #124	; 0x7c
 800595e:	af00      	add	r7, sp, #0
 8005960:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	68d9      	ldr	r1, [r3, #12]
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	ea40 0301 	orr.w	r3, r0, r1
 8005978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800597a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	431a      	orrs	r2, r3
 8005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	431a      	orrs	r2, r3
 800598a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	4313      	orrs	r3, r2
 8005990:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800599c:	f021 010c 	bic.w	r1, r1, #12
 80059a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a6:	430b      	orrs	r3, r1
 80059a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b6:	6999      	ldr	r1, [r3, #24]
 80059b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	ea40 0301 	orr.w	r3, r0, r1
 80059c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4bc5      	ldr	r3, [pc, #788]	; (8005cdc <UART_SetConfig+0x384>)
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d004      	beq.n	80059d6 <UART_SetConfig+0x7e>
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4bc3      	ldr	r3, [pc, #780]	; (8005ce0 <UART_SetConfig+0x388>)
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d103      	bne.n	80059de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059d6:	f7fe fd63 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 80059da:	6778      	str	r0, [r7, #116]	; 0x74
 80059dc:	e002      	b.n	80059e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059de:	f7fe fd4b 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 80059e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ec:	f040 80b6 	bne.w	8005b5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f2:	461c      	mov	r4, r3
 80059f4:	f04f 0500 	mov.w	r5, #0
 80059f8:	4622      	mov	r2, r4
 80059fa:	462b      	mov	r3, r5
 80059fc:	1891      	adds	r1, r2, r2
 80059fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005a00:	415b      	adcs	r3, r3
 8005a02:	647b      	str	r3, [r7, #68]	; 0x44
 8005a04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a08:	1912      	adds	r2, r2, r4
 8005a0a:	eb45 0303 	adc.w	r3, r5, r3
 8005a0e:	f04f 0000 	mov.w	r0, #0
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	00d9      	lsls	r1, r3, #3
 8005a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a1c:	00d0      	lsls	r0, r2, #3
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	1911      	adds	r1, r2, r4
 8005a24:	6639      	str	r1, [r7, #96]	; 0x60
 8005a26:	416b      	adcs	r3, r5
 8005a28:	667b      	str	r3, [r7, #100]	; 0x64
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a44:	f7fb f938 	bl	8000cb8 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4ba5      	ldr	r3, [pc, #660]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	011e      	lsls	r6, r3, #4
 8005a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a58:	461c      	mov	r4, r3
 8005a5a:	f04f 0500 	mov.w	r5, #0
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	1891      	adds	r1, r2, r2
 8005a64:	6339      	str	r1, [r7, #48]	; 0x30
 8005a66:	415b      	adcs	r3, r3
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a6e:	1912      	adds	r2, r2, r4
 8005a70:	eb45 0303 	adc.w	r3, r5, r3
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	f04f 0100 	mov.w	r1, #0
 8005a7c:	00d9      	lsls	r1, r3, #3
 8005a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a82:	00d0      	lsls	r0, r2, #3
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	1911      	adds	r1, r2, r4
 8005a8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a8c:	416b      	adcs	r3, r5
 8005a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	461a      	mov	r2, r3
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	1891      	adds	r1, r2, r2
 8005a9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a9e:	415b      	adcs	r3, r3
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aa6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005aaa:	f7fb f905 	bl	8000cb8 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b8c      	ldr	r3, [pc, #560]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	; 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a87      	ldr	r2, [pc, #540]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad4:	441e      	add	r6, r3
 8005ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	1894      	adds	r4, r2, r2
 8005ae4:	623c      	str	r4, [r7, #32]
 8005ae6:	415b      	adcs	r3, r3
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aee:	1812      	adds	r2, r2, r0
 8005af0:	eb41 0303 	adc.w	r3, r1, r3
 8005af4:	f04f 0400 	mov.w	r4, #0
 8005af8:	f04f 0500 	mov.w	r5, #0
 8005afc:	00dd      	lsls	r5, r3, #3
 8005afe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b02:	00d4      	lsls	r4, r2, #3
 8005b04:	4622      	mov	r2, r4
 8005b06:	462b      	mov	r3, r5
 8005b08:	1814      	adds	r4, r2, r0
 8005b0a:	653c      	str	r4, [r7, #80]	; 0x50
 8005b0c:	414b      	adcs	r3, r1
 8005b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	1891      	adds	r1, r2, r2
 8005b1c:	61b9      	str	r1, [r7, #24]
 8005b1e:	415b      	adcs	r3, r3
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b2a:	f7fb f8c5 	bl	8000cb8 <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005b34:	fba3 1302 	umull	r1, r3, r3, r2
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	2164      	movs	r1, #100	; 0x64
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	3332      	adds	r3, #50	; 0x32
 8005b46:	4a67      	ldr	r2, [pc, #412]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f003 0207 	and.w	r2, r3, #7
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4432      	add	r2, r6
 8005b58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b5a:	e0b9      	b.n	8005cd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b5e:	461c      	mov	r4, r3
 8005b60:	f04f 0500 	mov.w	r5, #0
 8005b64:	4622      	mov	r2, r4
 8005b66:	462b      	mov	r3, r5
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	6139      	str	r1, [r7, #16]
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b74:	1912      	adds	r2, r2, r4
 8005b76:	eb45 0303 	adc.w	r3, r5, r3
 8005b7a:	f04f 0000 	mov.w	r0, #0
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	00d9      	lsls	r1, r3, #3
 8005b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b88:	00d0      	lsls	r0, r2, #3
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	eb12 0804 	adds.w	r8, r2, r4
 8005b92:	eb43 0905 	adc.w	r9, r3, r5
 8005b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f04f 0100 	mov.w	r1, #0
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	008b      	lsls	r3, r1, #2
 8005baa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bae:	0082      	lsls	r2, r0, #2
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	f7fb f880 	bl	8000cb8 <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	011e      	lsls	r6, r3, #4
 8005bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f04f 0100 	mov.w	r1, #0
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	1894      	adds	r4, r2, r2
 8005bd4:	60bc      	str	r4, [r7, #8]
 8005bd6:	415b      	adcs	r3, r3
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bde:	1812      	adds	r2, r2, r0
 8005be0:	eb41 0303 	adc.w	r3, r1, r3
 8005be4:	f04f 0400 	mov.w	r4, #0
 8005be8:	f04f 0500 	mov.w	r5, #0
 8005bec:	00dd      	lsls	r5, r3, #3
 8005bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bf2:	00d4      	lsls	r4, r2, #3
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	462b      	mov	r3, r5
 8005bf8:	1814      	adds	r4, r2, r0
 8005bfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005bfc:	414b      	adcs	r3, r1
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	008b      	lsls	r3, r1, #2
 8005c14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c18:	0082      	lsls	r2, r0, #2
 8005c1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c1e:	f7fb f84b 	bl	8000cb8 <__aeabi_uldivmod>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4b2f      	ldr	r3, [pc, #188]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005c28:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	2164      	movs	r1, #100	; 0x64
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	3332      	adds	r3, #50	; 0x32
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c46:	441e      	add	r6, r3
 8005c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	1894      	adds	r4, r2, r2
 8005c56:	603c      	str	r4, [r7, #0]
 8005c58:	415b      	adcs	r3, r3
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c60:	1812      	adds	r2, r2, r0
 8005c62:	eb41 0303 	adc.w	r3, r1, r3
 8005c66:	f04f 0400 	mov.w	r4, #0
 8005c6a:	f04f 0500 	mov.w	r5, #0
 8005c6e:	00dd      	lsls	r5, r3, #3
 8005c70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c74:	00d4      	lsls	r4, r2, #3
 8005c76:	4622      	mov	r2, r4
 8005c78:	462b      	mov	r3, r5
 8005c7a:	eb12 0a00 	adds.w	sl, r2, r0
 8005c7e:	eb43 0b01 	adc.w	fp, r3, r1
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	008b      	lsls	r3, r1, #2
 8005c96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c9a:	0082      	lsls	r2, r0, #2
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	f7fb f80a 	bl	8000cb8 <__aeabi_uldivmod>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005caa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	2164      	movs	r1, #100	; 0x64
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	3332      	adds	r3, #50	; 0x32
 8005cbc:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <UART_SetConfig+0x38c>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4432      	add	r2, r6
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	bf00      	nop
 8005cd2:	377c      	adds	r7, #124	; 0x7c
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	bf00      	nop
 8005cdc:	40011000 	.word	0x40011000
 8005ce0:	40011400 	.word	0x40011400
 8005ce4:	51eb851f 	.word	0x51eb851f

08005ce8 <atof>:
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f001 bb03 	b.w	80072f4 <strtod>

08005cee <atoi>:
 8005cee:	220a      	movs	r2, #10
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	f001 bb8f 	b.w	8007414 <strtol>
	...

08005cf8 <__errno>:
 8005cf8:	4b01      	ldr	r3, [pc, #4]	; (8005d00 <__errno+0x8>)
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000010 	.word	0x20000010

08005d04 <__libc_init_array>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4d0d      	ldr	r5, [pc, #52]	; (8005d3c <__libc_init_array+0x38>)
 8005d08:	4c0d      	ldr	r4, [pc, #52]	; (8005d40 <__libc_init_array+0x3c>)
 8005d0a:	1b64      	subs	r4, r4, r5
 8005d0c:	10a4      	asrs	r4, r4, #2
 8005d0e:	2600      	movs	r6, #0
 8005d10:	42a6      	cmp	r6, r4
 8005d12:	d109      	bne.n	8005d28 <__libc_init_array+0x24>
 8005d14:	4d0b      	ldr	r5, [pc, #44]	; (8005d44 <__libc_init_array+0x40>)
 8005d16:	4c0c      	ldr	r4, [pc, #48]	; (8005d48 <__libc_init_array+0x44>)
 8005d18:	f004 fa56 	bl	800a1c8 <_init>
 8005d1c:	1b64      	subs	r4, r4, r5
 8005d1e:	10a4      	asrs	r4, r4, #2
 8005d20:	2600      	movs	r6, #0
 8005d22:	42a6      	cmp	r6, r4
 8005d24:	d105      	bne.n	8005d32 <__libc_init_array+0x2e>
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2c:	4798      	blx	r3
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7ee      	b.n	8005d10 <__libc_init_array+0xc>
 8005d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d36:	4798      	blx	r3
 8005d38:	3601      	adds	r6, #1
 8005d3a:	e7f2      	b.n	8005d22 <__libc_init_array+0x1e>
 8005d3c:	0800a8dc 	.word	0x0800a8dc
 8005d40:	0800a8dc 	.word	0x0800a8dc
 8005d44:	0800a8dc 	.word	0x0800a8dc
 8005d48:	0800a8e0 	.word	0x0800a8e0

08005d4c <memset>:
 8005d4c:	4402      	add	r2, r0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d100      	bne.n	8005d56 <memset+0xa>
 8005d54:	4770      	bx	lr
 8005d56:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5a:	e7f9      	b.n	8005d50 <memset+0x4>

08005d5c <__cvt>:
 8005d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	ec55 4b10 	vmov	r4, r5, d0
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	460e      	mov	r6, r1
 8005d68:	4619      	mov	r1, r3
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	bfbb      	ittet	lt
 8005d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d72:	461d      	movlt	r5, r3
 8005d74:	2300      	movge	r3, #0
 8005d76:	232d      	movlt	r3, #45	; 0x2d
 8005d78:	700b      	strb	r3, [r1, #0]
 8005d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d80:	4691      	mov	r9, r2
 8005d82:	f023 0820 	bic.w	r8, r3, #32
 8005d86:	bfbc      	itt	lt
 8005d88:	4622      	movlt	r2, r4
 8005d8a:	4614      	movlt	r4, r2
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d90:	d005      	beq.n	8005d9e <__cvt+0x42>
 8005d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d96:	d100      	bne.n	8005d9a <__cvt+0x3e>
 8005d98:	3601      	adds	r6, #1
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	e000      	b.n	8005da0 <__cvt+0x44>
 8005d9e:	2103      	movs	r1, #3
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	ab02      	add	r3, sp, #8
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	ec45 4b10 	vmov	d0, r4, r5
 8005dac:	4653      	mov	r3, sl
 8005dae:	4632      	mov	r2, r6
 8005db0:	f001 fbc6 	bl	8007540 <_dtoa_r>
 8005db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005db8:	4607      	mov	r7, r0
 8005dba:	d102      	bne.n	8005dc2 <__cvt+0x66>
 8005dbc:	f019 0f01 	tst.w	r9, #1
 8005dc0:	d022      	beq.n	8005e08 <__cvt+0xac>
 8005dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dc6:	eb07 0906 	add.w	r9, r7, r6
 8005dca:	d110      	bne.n	8005dee <__cvt+0x92>
 8005dcc:	783b      	ldrb	r3, [r7, #0]
 8005dce:	2b30      	cmp	r3, #48	; 0x30
 8005dd0:	d10a      	bne.n	8005de8 <__cvt+0x8c>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa fe8d 	bl	8000af8 <__aeabi_dcmpeq>
 8005dde:	b918      	cbnz	r0, 8005de8 <__cvt+0x8c>
 8005de0:	f1c6 0601 	rsb	r6, r6, #1
 8005de4:	f8ca 6000 	str.w	r6, [sl]
 8005de8:	f8da 3000 	ldr.w	r3, [sl]
 8005dec:	4499      	add	r9, r3
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	4620      	mov	r0, r4
 8005df4:	4629      	mov	r1, r5
 8005df6:	f7fa fe7f 	bl	8000af8 <__aeabi_dcmpeq>
 8005dfa:	b108      	cbz	r0, 8005e00 <__cvt+0xa4>
 8005dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e00:	2230      	movs	r2, #48	; 0x30
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	454b      	cmp	r3, r9
 8005e06:	d307      	bcc.n	8005e18 <__cvt+0xbc>
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e0c:	1bdb      	subs	r3, r3, r7
 8005e0e:	4638      	mov	r0, r7
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	b004      	add	sp, #16
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	9103      	str	r1, [sp, #12]
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	e7f0      	b.n	8005e02 <__cvt+0xa6>

08005e20 <__exponent>:
 8005e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e22:	4603      	mov	r3, r0
 8005e24:	2900      	cmp	r1, #0
 8005e26:	bfb8      	it	lt
 8005e28:	4249      	neglt	r1, r1
 8005e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8005e2e:	bfb4      	ite	lt
 8005e30:	222d      	movlt	r2, #45	; 0x2d
 8005e32:	222b      	movge	r2, #43	; 0x2b
 8005e34:	2909      	cmp	r1, #9
 8005e36:	7042      	strb	r2, [r0, #1]
 8005e38:	dd2a      	ble.n	8005e90 <__exponent+0x70>
 8005e3a:	f10d 0407 	add.w	r4, sp, #7
 8005e3e:	46a4      	mov	ip, r4
 8005e40:	270a      	movs	r7, #10
 8005e42:	46a6      	mov	lr, r4
 8005e44:	460a      	mov	r2, r1
 8005e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8005e4e:	3530      	adds	r5, #48	; 0x30
 8005e50:	2a63      	cmp	r2, #99	; 0x63
 8005e52:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	dcf1      	bgt.n	8005e42 <__exponent+0x22>
 8005e5e:	3130      	adds	r1, #48	; 0x30
 8005e60:	f1ae 0502 	sub.w	r5, lr, #2
 8005e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e68:	1c44      	adds	r4, r0, #1
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4561      	cmp	r1, ip
 8005e6e:	d30a      	bcc.n	8005e86 <__exponent+0x66>
 8005e70:	f10d 0209 	add.w	r2, sp, #9
 8005e74:	eba2 020e 	sub.w	r2, r2, lr
 8005e78:	4565      	cmp	r5, ip
 8005e7a:	bf88      	it	hi
 8005e7c:	2200      	movhi	r2, #0
 8005e7e:	4413      	add	r3, r2
 8005e80:	1a18      	subs	r0, r3, r0
 8005e82:	b003      	add	sp, #12
 8005e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e8e:	e7ed      	b.n	8005e6c <__exponent+0x4c>
 8005e90:	2330      	movs	r3, #48	; 0x30
 8005e92:	3130      	adds	r1, #48	; 0x30
 8005e94:	7083      	strb	r3, [r0, #2]
 8005e96:	70c1      	strb	r1, [r0, #3]
 8005e98:	1d03      	adds	r3, r0, #4
 8005e9a:	e7f1      	b.n	8005e80 <__exponent+0x60>

08005e9c <_printf_float>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	ed2d 8b02 	vpush	{d8}
 8005ea4:	b08d      	sub	sp, #52	; 0x34
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005eac:	4616      	mov	r6, r2
 8005eae:	461f      	mov	r7, r3
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	f002 fca1 	bl	80087f8 <_localeconv_r>
 8005eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8005eba:	4650      	mov	r0, sl
 8005ebc:	f7fa f99a 	bl	80001f4 <strlen>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	9305      	str	r3, [sp, #20]
 8005ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	f103 0208 	add.w	r2, r3, #8
 8005eda:	f8c8 2000 	str.w	r2, [r8]
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ef4:	ee08 0a10 	vmov	s16, r0
 8005ef8:	4b9f      	ldr	r3, [pc, #636]	; (8006178 <_printf_float+0x2dc>)
 8005efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f02:	f7fa fe2b 	bl	8000b5c <__aeabi_dcmpun>
 8005f06:	bb88      	cbnz	r0, 8005f6c <_printf_float+0xd0>
 8005f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	; (8006178 <_printf_float+0x2dc>)
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f12:	f7fa fe05 	bl	8000b20 <__aeabi_dcmple>
 8005f16:	bb48      	cbnz	r0, 8005f6c <_printf_float+0xd0>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fdf4 	bl	8000b0c <__aeabi_dcmplt>
 8005f24:	b110      	cbz	r0, 8005f2c <_printf_float+0x90>
 8005f26:	232d      	movs	r3, #45	; 0x2d
 8005f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2c:	4b93      	ldr	r3, [pc, #588]	; (800617c <_printf_float+0x2e0>)
 8005f2e:	4894      	ldr	r0, [pc, #592]	; (8006180 <_printf_float+0x2e4>)
 8005f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f34:	bf94      	ite	ls
 8005f36:	4698      	movls	r8, r3
 8005f38:	4680      	movhi	r8, r0
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	9b05      	ldr	r3, [sp, #20]
 8005f40:	f023 0204 	bic.w	r2, r3, #4
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	f04f 0900 	mov.w	r9, #0
 8005f4a:	9700      	str	r7, [sp, #0]
 8005f4c:	4633      	mov	r3, r6
 8005f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f50:	4621      	mov	r1, r4
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f9d8 	bl	8006308 <_printf_common>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f040 8090 	bne.w	800607e <_printf_float+0x1e2>
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f62:	b00d      	add	sp, #52	; 0x34
 8005f64:	ecbd 8b02 	vpop	{d8}
 8005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa fdf2 	bl	8000b5c <__aeabi_dcmpun>
 8005f78:	b140      	cbz	r0, 8005f8c <_printf_float+0xf0>
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfbc      	itt	lt
 8005f80:	232d      	movlt	r3, #45	; 0x2d
 8005f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f86:	487f      	ldr	r0, [pc, #508]	; (8006184 <_printf_float+0x2e8>)
 8005f88:	4b7f      	ldr	r3, [pc, #508]	; (8006188 <_printf_float+0x2ec>)
 8005f8a:	e7d1      	b.n	8005f30 <_printf_float+0x94>
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f92:	9206      	str	r2, [sp, #24]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	d13f      	bne.n	8006018 <_printf_float+0x17c>
 8005f98:	2306      	movs	r3, #6
 8005f9a:	6063      	str	r3, [r4, #4]
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	6861      	ldr	r1, [r4, #4]
 8005fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8005faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005fae:	ab09      	add	r3, sp, #36	; 0x24
 8005fb0:	ec49 8b10 	vmov	d0, r8, r9
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6022      	str	r2, [r4, #0]
 8005fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f7ff fecd 	bl	8005d5c <__cvt>
 8005fc2:	9b06      	ldr	r3, [sp, #24]
 8005fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc6:	2b47      	cmp	r3, #71	; 0x47
 8005fc8:	4680      	mov	r8, r0
 8005fca:	d108      	bne.n	8005fde <_printf_float+0x142>
 8005fcc:	1cc8      	adds	r0, r1, #3
 8005fce:	db02      	blt.n	8005fd6 <_printf_float+0x13a>
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	4299      	cmp	r1, r3
 8005fd4:	dd41      	ble.n	800605a <_printf_float+0x1be>
 8005fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fda:	fa5f fb8b 	uxtb.w	fp, fp
 8005fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fe2:	d820      	bhi.n	8006026 <_printf_float+0x18a>
 8005fe4:	3901      	subs	r1, #1
 8005fe6:	465a      	mov	r2, fp
 8005fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fec:	9109      	str	r1, [sp, #36]	; 0x24
 8005fee:	f7ff ff17 	bl	8005e20 <__exponent>
 8005ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff4:	1813      	adds	r3, r2, r0
 8005ff6:	2a01      	cmp	r2, #1
 8005ff8:	4681      	mov	r9, r0
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	dc02      	bgt.n	8006004 <_printf_float+0x168>
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	07d2      	lsls	r2, r2, #31
 8006002:	d501      	bpl.n	8006008 <_printf_float+0x16c>
 8006004:	3301      	adds	r3, #1
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800600c:	2b00      	cmp	r3, #0
 800600e:	d09c      	beq.n	8005f4a <_printf_float+0xae>
 8006010:	232d      	movs	r3, #45	; 0x2d
 8006012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006016:	e798      	b.n	8005f4a <_printf_float+0xae>
 8006018:	9a06      	ldr	r2, [sp, #24]
 800601a:	2a47      	cmp	r2, #71	; 0x47
 800601c:	d1be      	bne.n	8005f9c <_printf_float+0x100>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1bc      	bne.n	8005f9c <_printf_float+0x100>
 8006022:	2301      	movs	r3, #1
 8006024:	e7b9      	b.n	8005f9a <_printf_float+0xfe>
 8006026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800602a:	d118      	bne.n	800605e <_printf_float+0x1c2>
 800602c:	2900      	cmp	r1, #0
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	dd0b      	ble.n	800604a <_printf_float+0x1ae>
 8006032:	6121      	str	r1, [r4, #16]
 8006034:	b913      	cbnz	r3, 800603c <_printf_float+0x1a0>
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	07d0      	lsls	r0, r2, #31
 800603a:	d502      	bpl.n	8006042 <_printf_float+0x1a6>
 800603c:	3301      	adds	r3, #1
 800603e:	440b      	add	r3, r1
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	65a1      	str	r1, [r4, #88]	; 0x58
 8006044:	f04f 0900 	mov.w	r9, #0
 8006048:	e7de      	b.n	8006008 <_printf_float+0x16c>
 800604a:	b913      	cbnz	r3, 8006052 <_printf_float+0x1b6>
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	07d2      	lsls	r2, r2, #31
 8006050:	d501      	bpl.n	8006056 <_printf_float+0x1ba>
 8006052:	3302      	adds	r3, #2
 8006054:	e7f4      	b.n	8006040 <_printf_float+0x1a4>
 8006056:	2301      	movs	r3, #1
 8006058:	e7f2      	b.n	8006040 <_printf_float+0x1a4>
 800605a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800605e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006060:	4299      	cmp	r1, r3
 8006062:	db05      	blt.n	8006070 <_printf_float+0x1d4>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	6121      	str	r1, [r4, #16]
 8006068:	07d8      	lsls	r0, r3, #31
 800606a:	d5ea      	bpl.n	8006042 <_printf_float+0x1a6>
 800606c:	1c4b      	adds	r3, r1, #1
 800606e:	e7e7      	b.n	8006040 <_printf_float+0x1a4>
 8006070:	2900      	cmp	r1, #0
 8006072:	bfd4      	ite	le
 8006074:	f1c1 0202 	rsble	r2, r1, #2
 8006078:	2201      	movgt	r2, #1
 800607a:	4413      	add	r3, r2
 800607c:	e7e0      	b.n	8006040 <_printf_float+0x1a4>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	055a      	lsls	r2, r3, #21
 8006082:	d407      	bmi.n	8006094 <_printf_float+0x1f8>
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	4642      	mov	r2, r8
 8006088:	4631      	mov	r1, r6
 800608a:	4628      	mov	r0, r5
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	d12c      	bne.n	80060ec <_printf_float+0x250>
 8006092:	e764      	b.n	8005f5e <_printf_float+0xc2>
 8006094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006098:	f240 80e0 	bls.w	800625c <_printf_float+0x3c0>
 800609c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	f7fa fd28 	bl	8000af8 <__aeabi_dcmpeq>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d034      	beq.n	8006116 <_printf_float+0x27a>
 80060ac:	4a37      	ldr	r2, [pc, #220]	; (800618c <_printf_float+0x2f0>)
 80060ae:	2301      	movs	r3, #1
 80060b0:	4631      	mov	r1, r6
 80060b2:	4628      	mov	r0, r5
 80060b4:	47b8      	blx	r7
 80060b6:	3001      	adds	r0, #1
 80060b8:	f43f af51 	beq.w	8005f5e <_printf_float+0xc2>
 80060bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060c0:	429a      	cmp	r2, r3
 80060c2:	db02      	blt.n	80060ca <_printf_float+0x22e>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	07d8      	lsls	r0, r3, #31
 80060c8:	d510      	bpl.n	80060ec <_printf_float+0x250>
 80060ca:	ee18 3a10 	vmov	r3, s16
 80060ce:	4652      	mov	r2, sl
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f af41 	beq.w	8005f5e <_printf_float+0xc2>
 80060dc:	f04f 0800 	mov.w	r8, #0
 80060e0:	f104 091a 	add.w	r9, r4, #26
 80060e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	4543      	cmp	r3, r8
 80060ea:	dc09      	bgt.n	8006100 <_printf_float+0x264>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	079b      	lsls	r3, r3, #30
 80060f0:	f100 8105 	bmi.w	80062fe <_printf_float+0x462>
 80060f4:	68e0      	ldr	r0, [r4, #12]
 80060f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f8:	4298      	cmp	r0, r3
 80060fa:	bfb8      	it	lt
 80060fc:	4618      	movlt	r0, r3
 80060fe:	e730      	b.n	8005f62 <_printf_float+0xc6>
 8006100:	2301      	movs	r3, #1
 8006102:	464a      	mov	r2, r9
 8006104:	4631      	mov	r1, r6
 8006106:	4628      	mov	r0, r5
 8006108:	47b8      	blx	r7
 800610a:	3001      	adds	r0, #1
 800610c:	f43f af27 	beq.w	8005f5e <_printf_float+0xc2>
 8006110:	f108 0801 	add.w	r8, r8, #1
 8006114:	e7e6      	b.n	80060e4 <_printf_float+0x248>
 8006116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	dc39      	bgt.n	8006190 <_printf_float+0x2f4>
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <_printf_float+0x2f0>)
 800611e:	2301      	movs	r3, #1
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f af19 	beq.w	8005f5e <_printf_float+0xc2>
 800612c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006130:	4313      	orrs	r3, r2
 8006132:	d102      	bne.n	800613a <_printf_float+0x29e>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	07d9      	lsls	r1, r3, #31
 8006138:	d5d8      	bpl.n	80060ec <_printf_float+0x250>
 800613a:	ee18 3a10 	vmov	r3, s16
 800613e:	4652      	mov	r2, sl
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f af09 	beq.w	8005f5e <_printf_float+0xc2>
 800614c:	f04f 0900 	mov.w	r9, #0
 8006150:	f104 0a1a 	add.w	sl, r4, #26
 8006154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006156:	425b      	negs	r3, r3
 8006158:	454b      	cmp	r3, r9
 800615a:	dc01      	bgt.n	8006160 <_printf_float+0x2c4>
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	e792      	b.n	8006086 <_printf_float+0x1ea>
 8006160:	2301      	movs	r3, #1
 8006162:	4652      	mov	r2, sl
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f aef7 	beq.w	8005f5e <_printf_float+0xc2>
 8006170:	f109 0901 	add.w	r9, r9, #1
 8006174:	e7ee      	b.n	8006154 <_printf_float+0x2b8>
 8006176:	bf00      	nop
 8006178:	7fefffff 	.word	0x7fefffff
 800617c:	0800a42c 	.word	0x0800a42c
 8006180:	0800a430 	.word	0x0800a430
 8006184:	0800a438 	.word	0x0800a438
 8006188:	0800a434 	.word	0x0800a434
 800618c:	0800a43c 	.word	0x0800a43c
 8006190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006194:	429a      	cmp	r2, r3
 8006196:	bfa8      	it	ge
 8006198:	461a      	movge	r2, r3
 800619a:	2a00      	cmp	r2, #0
 800619c:	4691      	mov	r9, r2
 800619e:	dc37      	bgt.n	8006210 <_printf_float+0x374>
 80061a0:	f04f 0b00 	mov.w	fp, #0
 80061a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061a8:	f104 021a 	add.w	r2, r4, #26
 80061ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061ae:	9305      	str	r3, [sp, #20]
 80061b0:	eba3 0309 	sub.w	r3, r3, r9
 80061b4:	455b      	cmp	r3, fp
 80061b6:	dc33      	bgt.n	8006220 <_printf_float+0x384>
 80061b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061bc:	429a      	cmp	r2, r3
 80061be:	db3b      	blt.n	8006238 <_printf_float+0x39c>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07da      	lsls	r2, r3, #31
 80061c4:	d438      	bmi.n	8006238 <_printf_float+0x39c>
 80061c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061c8:	9b05      	ldr	r3, [sp, #20]
 80061ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	eba2 0901 	sub.w	r9, r2, r1
 80061d2:	4599      	cmp	r9, r3
 80061d4:	bfa8      	it	ge
 80061d6:	4699      	movge	r9, r3
 80061d8:	f1b9 0f00 	cmp.w	r9, #0
 80061dc:	dc35      	bgt.n	800624a <_printf_float+0x3ae>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061e6:	f104 0a1a 	add.w	sl, r4, #26
 80061ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	eba3 0309 	sub.w	r3, r3, r9
 80061f4:	4543      	cmp	r3, r8
 80061f6:	f77f af79 	ble.w	80060ec <_printf_float+0x250>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f aeaa 	beq.w	8005f5e <_printf_float+0xc2>
 800620a:	f108 0801 	add.w	r8, r8, #1
 800620e:	e7ec      	b.n	80061ea <_printf_float+0x34e>
 8006210:	4613      	mov	r3, r2
 8006212:	4631      	mov	r1, r6
 8006214:	4642      	mov	r2, r8
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	d1c0      	bne.n	80061a0 <_printf_float+0x304>
 800621e:	e69e      	b.n	8005f5e <_printf_float+0xc2>
 8006220:	2301      	movs	r3, #1
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	9205      	str	r2, [sp, #20]
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f ae97 	beq.w	8005f5e <_printf_float+0xc2>
 8006230:	9a05      	ldr	r2, [sp, #20]
 8006232:	f10b 0b01 	add.w	fp, fp, #1
 8006236:	e7b9      	b.n	80061ac <_printf_float+0x310>
 8006238:	ee18 3a10 	vmov	r3, s16
 800623c:	4652      	mov	r2, sl
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	d1be      	bne.n	80061c6 <_printf_float+0x32a>
 8006248:	e689      	b.n	8005f5e <_printf_float+0xc2>
 800624a:	9a05      	ldr	r2, [sp, #20]
 800624c:	464b      	mov	r3, r9
 800624e:	4442      	add	r2, r8
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	d1c1      	bne.n	80061de <_printf_float+0x342>
 800625a:	e680      	b.n	8005f5e <_printf_float+0xc2>
 800625c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800625e:	2a01      	cmp	r2, #1
 8006260:	dc01      	bgt.n	8006266 <_printf_float+0x3ca>
 8006262:	07db      	lsls	r3, r3, #31
 8006264:	d538      	bpl.n	80062d8 <_printf_float+0x43c>
 8006266:	2301      	movs	r3, #1
 8006268:	4642      	mov	r2, r8
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	f43f ae74 	beq.w	8005f5e <_printf_float+0xc2>
 8006276:	ee18 3a10 	vmov	r3, s16
 800627a:	4652      	mov	r2, sl
 800627c:	4631      	mov	r1, r6
 800627e:	4628      	mov	r0, r5
 8006280:	47b8      	blx	r7
 8006282:	3001      	adds	r0, #1
 8006284:	f43f ae6b 	beq.w	8005f5e <_printf_float+0xc2>
 8006288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800628c:	2200      	movs	r2, #0
 800628e:	2300      	movs	r3, #0
 8006290:	f7fa fc32 	bl	8000af8 <__aeabi_dcmpeq>
 8006294:	b9d8      	cbnz	r0, 80062ce <_printf_float+0x432>
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	f108 0201 	add.w	r2, r8, #1
 800629c:	3b01      	subs	r3, #1
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	d10e      	bne.n	80062c6 <_printf_float+0x42a>
 80062a8:	e659      	b.n	8005f5e <_printf_float+0xc2>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4652      	mov	r2, sl
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae52 	beq.w	8005f5e <_printf_float+0xc2>
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	4543      	cmp	r3, r8
 80062c4:	dcf1      	bgt.n	80062aa <_printf_float+0x40e>
 80062c6:	464b      	mov	r3, r9
 80062c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062cc:	e6dc      	b.n	8006088 <_printf_float+0x1ec>
 80062ce:	f04f 0800 	mov.w	r8, #0
 80062d2:	f104 0a1a 	add.w	sl, r4, #26
 80062d6:	e7f2      	b.n	80062be <_printf_float+0x422>
 80062d8:	2301      	movs	r3, #1
 80062da:	4642      	mov	r2, r8
 80062dc:	e7df      	b.n	800629e <_printf_float+0x402>
 80062de:	2301      	movs	r3, #1
 80062e0:	464a      	mov	r2, r9
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f ae38 	beq.w	8005f5e <_printf_float+0xc2>
 80062ee:	f108 0801 	add.w	r8, r8, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062f6:	1a5b      	subs	r3, r3, r1
 80062f8:	4543      	cmp	r3, r8
 80062fa:	dcf0      	bgt.n	80062de <_printf_float+0x442>
 80062fc:	e6fa      	b.n	80060f4 <_printf_float+0x258>
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	f104 0919 	add.w	r9, r4, #25
 8006306:	e7f4      	b.n	80062f2 <_printf_float+0x456>

08006308 <_printf_common>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	4616      	mov	r6, r2
 800630e:	4699      	mov	r9, r3
 8006310:	688a      	ldr	r2, [r1, #8]
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006318:	4293      	cmp	r3, r2
 800631a:	bfb8      	it	lt
 800631c:	4613      	movlt	r3, r2
 800631e:	6033      	str	r3, [r6, #0]
 8006320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006324:	4607      	mov	r7, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b10a      	cbz	r2, 800632e <_printf_common+0x26>
 800632a:	3301      	adds	r3, #1
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	0699      	lsls	r1, r3, #26
 8006332:	bf42      	ittt	mi
 8006334:	6833      	ldrmi	r3, [r6, #0]
 8006336:	3302      	addmi	r3, #2
 8006338:	6033      	strmi	r3, [r6, #0]
 800633a:	6825      	ldr	r5, [r4, #0]
 800633c:	f015 0506 	ands.w	r5, r5, #6
 8006340:	d106      	bne.n	8006350 <_printf_common+0x48>
 8006342:	f104 0a19 	add.w	sl, r4, #25
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	6832      	ldr	r2, [r6, #0]
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	42ab      	cmp	r3, r5
 800634e:	dc26      	bgt.n	800639e <_printf_common+0x96>
 8006350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006354:	1e13      	subs	r3, r2, #0
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	2301      	movne	r3, #1
 800635c:	0692      	lsls	r2, r2, #26
 800635e:	d42b      	bmi.n	80063b8 <_printf_common+0xb0>
 8006360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006364:	4649      	mov	r1, r9
 8006366:	4638      	mov	r0, r7
 8006368:	47c0      	blx	r8
 800636a:	3001      	adds	r0, #1
 800636c:	d01e      	beq.n	80063ac <_printf_common+0xa4>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	68e5      	ldr	r5, [r4, #12]
 8006372:	6832      	ldr	r2, [r6, #0]
 8006374:	f003 0306 	and.w	r3, r3, #6
 8006378:	2b04      	cmp	r3, #4
 800637a:	bf08      	it	eq
 800637c:	1aad      	subeq	r5, r5, r2
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	6922      	ldr	r2, [r4, #16]
 8006382:	bf0c      	ite	eq
 8006384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006388:	2500      	movne	r5, #0
 800638a:	4293      	cmp	r3, r2
 800638c:	bfc4      	itt	gt
 800638e:	1a9b      	subgt	r3, r3, r2
 8006390:	18ed      	addgt	r5, r5, r3
 8006392:	2600      	movs	r6, #0
 8006394:	341a      	adds	r4, #26
 8006396:	42b5      	cmp	r5, r6
 8006398:	d11a      	bne.n	80063d0 <_printf_common+0xc8>
 800639a:	2000      	movs	r0, #0
 800639c:	e008      	b.n	80063b0 <_printf_common+0xa8>
 800639e:	2301      	movs	r3, #1
 80063a0:	4652      	mov	r2, sl
 80063a2:	4649      	mov	r1, r9
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c0      	blx	r8
 80063a8:	3001      	adds	r0, #1
 80063aa:	d103      	bne.n	80063b4 <_printf_common+0xac>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c6      	b.n	8006346 <_printf_common+0x3e>
 80063b8:	18e1      	adds	r1, r4, r3
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	2030      	movs	r0, #48	; 0x30
 80063be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063c2:	4422      	add	r2, r4
 80063c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063cc:	3302      	adds	r3, #2
 80063ce:	e7c7      	b.n	8006360 <_printf_common+0x58>
 80063d0:	2301      	movs	r3, #1
 80063d2:	4622      	mov	r2, r4
 80063d4:	4649      	mov	r1, r9
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d0e6      	beq.n	80063ac <_printf_common+0xa4>
 80063de:	3601      	adds	r6, #1
 80063e0:	e7d9      	b.n	8006396 <_printf_common+0x8e>
	...

080063e4 <_printf_i>:
 80063e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	4691      	mov	r9, r2
 80063ec:	7e27      	ldrb	r7, [r4, #24]
 80063ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063f0:	2f78      	cmp	r7, #120	; 0x78
 80063f2:	4680      	mov	r8, r0
 80063f4:	469a      	mov	sl, r3
 80063f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063fa:	d807      	bhi.n	800640c <_printf_i+0x28>
 80063fc:	2f62      	cmp	r7, #98	; 0x62
 80063fe:	d80a      	bhi.n	8006416 <_printf_i+0x32>
 8006400:	2f00      	cmp	r7, #0
 8006402:	f000 80d8 	beq.w	80065b6 <_printf_i+0x1d2>
 8006406:	2f58      	cmp	r7, #88	; 0x58
 8006408:	f000 80a3 	beq.w	8006552 <_printf_i+0x16e>
 800640c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006414:	e03a      	b.n	800648c <_printf_i+0xa8>
 8006416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800641a:	2b15      	cmp	r3, #21
 800641c:	d8f6      	bhi.n	800640c <_printf_i+0x28>
 800641e:	a001      	add	r0, pc, #4	; (adr r0, 8006424 <_printf_i+0x40>)
 8006420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006424:	0800647d 	.word	0x0800647d
 8006428:	08006491 	.word	0x08006491
 800642c:	0800640d 	.word	0x0800640d
 8006430:	0800640d 	.word	0x0800640d
 8006434:	0800640d 	.word	0x0800640d
 8006438:	0800640d 	.word	0x0800640d
 800643c:	08006491 	.word	0x08006491
 8006440:	0800640d 	.word	0x0800640d
 8006444:	0800640d 	.word	0x0800640d
 8006448:	0800640d 	.word	0x0800640d
 800644c:	0800640d 	.word	0x0800640d
 8006450:	0800659d 	.word	0x0800659d
 8006454:	080064c1 	.word	0x080064c1
 8006458:	0800657f 	.word	0x0800657f
 800645c:	0800640d 	.word	0x0800640d
 8006460:	0800640d 	.word	0x0800640d
 8006464:	080065bf 	.word	0x080065bf
 8006468:	0800640d 	.word	0x0800640d
 800646c:	080064c1 	.word	0x080064c1
 8006470:	0800640d 	.word	0x0800640d
 8006474:	0800640d 	.word	0x0800640d
 8006478:	08006587 	.word	0x08006587
 800647c:	680b      	ldr	r3, [r1, #0]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	600a      	str	r2, [r1, #0]
 8006484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800648c:	2301      	movs	r3, #1
 800648e:	e0a3      	b.n	80065d8 <_printf_i+0x1f4>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	6808      	ldr	r0, [r1, #0]
 8006494:	062e      	lsls	r6, r5, #24
 8006496:	f100 0304 	add.w	r3, r0, #4
 800649a:	d50a      	bpl.n	80064b2 <_printf_i+0xce>
 800649c:	6805      	ldr	r5, [r0, #0]
 800649e:	600b      	str	r3, [r1, #0]
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	da03      	bge.n	80064ac <_printf_i+0xc8>
 80064a4:	232d      	movs	r3, #45	; 0x2d
 80064a6:	426d      	negs	r5, r5
 80064a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ac:	485e      	ldr	r0, [pc, #376]	; (8006628 <_printf_i+0x244>)
 80064ae:	230a      	movs	r3, #10
 80064b0:	e019      	b.n	80064e6 <_printf_i+0x102>
 80064b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064b6:	6805      	ldr	r5, [r0, #0]
 80064b8:	600b      	str	r3, [r1, #0]
 80064ba:	bf18      	it	ne
 80064bc:	b22d      	sxthne	r5, r5
 80064be:	e7ef      	b.n	80064a0 <_printf_i+0xbc>
 80064c0:	680b      	ldr	r3, [r1, #0]
 80064c2:	6825      	ldr	r5, [r4, #0]
 80064c4:	1d18      	adds	r0, r3, #4
 80064c6:	6008      	str	r0, [r1, #0]
 80064c8:	0628      	lsls	r0, r5, #24
 80064ca:	d501      	bpl.n	80064d0 <_printf_i+0xec>
 80064cc:	681d      	ldr	r5, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <_printf_i+0xf2>
 80064d0:	0669      	lsls	r1, r5, #25
 80064d2:	d5fb      	bpl.n	80064cc <_printf_i+0xe8>
 80064d4:	881d      	ldrh	r5, [r3, #0]
 80064d6:	4854      	ldr	r0, [pc, #336]	; (8006628 <_printf_i+0x244>)
 80064d8:	2f6f      	cmp	r7, #111	; 0x6f
 80064da:	bf0c      	ite	eq
 80064dc:	2308      	moveq	r3, #8
 80064de:	230a      	movne	r3, #10
 80064e0:	2100      	movs	r1, #0
 80064e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e6:	6866      	ldr	r6, [r4, #4]
 80064e8:	60a6      	str	r6, [r4, #8]
 80064ea:	2e00      	cmp	r6, #0
 80064ec:	bfa2      	ittt	ge
 80064ee:	6821      	ldrge	r1, [r4, #0]
 80064f0:	f021 0104 	bicge.w	r1, r1, #4
 80064f4:	6021      	strge	r1, [r4, #0]
 80064f6:	b90d      	cbnz	r5, 80064fc <_printf_i+0x118>
 80064f8:	2e00      	cmp	r6, #0
 80064fa:	d04d      	beq.n	8006598 <_printf_i+0x1b4>
 80064fc:	4616      	mov	r6, r2
 80064fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006502:	fb03 5711 	mls	r7, r3, r1, r5
 8006506:	5dc7      	ldrb	r7, [r0, r7]
 8006508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800650c:	462f      	mov	r7, r5
 800650e:	42bb      	cmp	r3, r7
 8006510:	460d      	mov	r5, r1
 8006512:	d9f4      	bls.n	80064fe <_printf_i+0x11a>
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10b      	bne.n	8006530 <_printf_i+0x14c>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	07df      	lsls	r7, r3, #31
 800651c:	d508      	bpl.n	8006530 <_printf_i+0x14c>
 800651e:	6923      	ldr	r3, [r4, #16]
 8006520:	6861      	ldr	r1, [r4, #4]
 8006522:	4299      	cmp	r1, r3
 8006524:	bfde      	ittt	le
 8006526:	2330      	movle	r3, #48	; 0x30
 8006528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800652c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006530:	1b92      	subs	r2, r2, r6
 8006532:	6122      	str	r2, [r4, #16]
 8006534:	f8cd a000 	str.w	sl, [sp]
 8006538:	464b      	mov	r3, r9
 800653a:	aa03      	add	r2, sp, #12
 800653c:	4621      	mov	r1, r4
 800653e:	4640      	mov	r0, r8
 8006540:	f7ff fee2 	bl	8006308 <_printf_common>
 8006544:	3001      	adds	r0, #1
 8006546:	d14c      	bne.n	80065e2 <_printf_i+0x1fe>
 8006548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800654c:	b004      	add	sp, #16
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006552:	4835      	ldr	r0, [pc, #212]	; (8006628 <_printf_i+0x244>)
 8006554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	680e      	ldr	r6, [r1, #0]
 800655c:	061f      	lsls	r7, r3, #24
 800655e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006562:	600e      	str	r6, [r1, #0]
 8006564:	d514      	bpl.n	8006590 <_printf_i+0x1ac>
 8006566:	07d9      	lsls	r1, r3, #31
 8006568:	bf44      	itt	mi
 800656a:	f043 0320 	orrmi.w	r3, r3, #32
 800656e:	6023      	strmi	r3, [r4, #0]
 8006570:	b91d      	cbnz	r5, 800657a <_printf_i+0x196>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f023 0320 	bic.w	r3, r3, #32
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	2310      	movs	r3, #16
 800657c:	e7b0      	b.n	80064e0 <_printf_i+0xfc>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	f043 0320 	orr.w	r3, r3, #32
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	2378      	movs	r3, #120	; 0x78
 8006588:	4828      	ldr	r0, [pc, #160]	; (800662c <_printf_i+0x248>)
 800658a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800658e:	e7e3      	b.n	8006558 <_printf_i+0x174>
 8006590:	065e      	lsls	r6, r3, #25
 8006592:	bf48      	it	mi
 8006594:	b2ad      	uxthmi	r5, r5
 8006596:	e7e6      	b.n	8006566 <_printf_i+0x182>
 8006598:	4616      	mov	r6, r2
 800659a:	e7bb      	b.n	8006514 <_printf_i+0x130>
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	6826      	ldr	r6, [r4, #0]
 80065a0:	6960      	ldr	r0, [r4, #20]
 80065a2:	1d1d      	adds	r5, r3, #4
 80065a4:	600d      	str	r5, [r1, #0]
 80065a6:	0635      	lsls	r5, r6, #24
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0x1cc>
 80065ac:	6018      	str	r0, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0x1d2>
 80065b0:	0671      	lsls	r1, r6, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0x1c8>
 80065b4:	8018      	strh	r0, [r3, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	4616      	mov	r6, r2
 80065bc:	e7ba      	b.n	8006534 <_printf_i+0x150>
 80065be:	680b      	ldr	r3, [r1, #0]
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	600a      	str	r2, [r1, #0]
 80065c4:	681e      	ldr	r6, [r3, #0]
 80065c6:	6862      	ldr	r2, [r4, #4]
 80065c8:	2100      	movs	r1, #0
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7f9 fe20 	bl	8000210 <memchr>
 80065d0:	b108      	cbz	r0, 80065d6 <_printf_i+0x1f2>
 80065d2:	1b80      	subs	r0, r0, r6
 80065d4:	6060      	str	r0, [r4, #4]
 80065d6:	6863      	ldr	r3, [r4, #4]
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	2300      	movs	r3, #0
 80065dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e0:	e7a8      	b.n	8006534 <_printf_i+0x150>
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	4632      	mov	r2, r6
 80065e6:	4649      	mov	r1, r9
 80065e8:	4640      	mov	r0, r8
 80065ea:	47d0      	blx	sl
 80065ec:	3001      	adds	r0, #1
 80065ee:	d0ab      	beq.n	8006548 <_printf_i+0x164>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	079b      	lsls	r3, r3, #30
 80065f4:	d413      	bmi.n	800661e <_printf_i+0x23a>
 80065f6:	68e0      	ldr	r0, [r4, #12]
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	4298      	cmp	r0, r3
 80065fc:	bfb8      	it	lt
 80065fe:	4618      	movlt	r0, r3
 8006600:	e7a4      	b.n	800654c <_printf_i+0x168>
 8006602:	2301      	movs	r3, #1
 8006604:	4632      	mov	r2, r6
 8006606:	4649      	mov	r1, r9
 8006608:	4640      	mov	r0, r8
 800660a:	47d0      	blx	sl
 800660c:	3001      	adds	r0, #1
 800660e:	d09b      	beq.n	8006548 <_printf_i+0x164>
 8006610:	3501      	adds	r5, #1
 8006612:	68e3      	ldr	r3, [r4, #12]
 8006614:	9903      	ldr	r1, [sp, #12]
 8006616:	1a5b      	subs	r3, r3, r1
 8006618:	42ab      	cmp	r3, r5
 800661a:	dcf2      	bgt.n	8006602 <_printf_i+0x21e>
 800661c:	e7eb      	b.n	80065f6 <_printf_i+0x212>
 800661e:	2500      	movs	r5, #0
 8006620:	f104 0619 	add.w	r6, r4, #25
 8006624:	e7f5      	b.n	8006612 <_printf_i+0x22e>
 8006626:	bf00      	nop
 8006628:	0800a43e 	.word	0x0800a43e
 800662c:	0800a44f 	.word	0x0800a44f

08006630 <siprintf>:
 8006630:	b40e      	push	{r1, r2, r3}
 8006632:	b500      	push	{lr}
 8006634:	b09c      	sub	sp, #112	; 0x70
 8006636:	ab1d      	add	r3, sp, #116	; 0x74
 8006638:	9002      	str	r0, [sp, #8]
 800663a:	9006      	str	r0, [sp, #24]
 800663c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006640:	4809      	ldr	r0, [pc, #36]	; (8006668 <siprintf+0x38>)
 8006642:	9107      	str	r1, [sp, #28]
 8006644:	9104      	str	r1, [sp, #16]
 8006646:	4909      	ldr	r1, [pc, #36]	; (800666c <siprintf+0x3c>)
 8006648:	f853 2b04 	ldr.w	r2, [r3], #4
 800664c:	9105      	str	r1, [sp, #20]
 800664e:	6800      	ldr	r0, [r0, #0]
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	a902      	add	r1, sp, #8
 8006654:	f002 fecc 	bl	80093f0 <_svfiprintf_r>
 8006658:	9b02      	ldr	r3, [sp, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	b01c      	add	sp, #112	; 0x70
 8006660:	f85d eb04 	ldr.w	lr, [sp], #4
 8006664:	b003      	add	sp, #12
 8006666:	4770      	bx	lr
 8006668:	20000010 	.word	0x20000010
 800666c:	ffff0208 	.word	0xffff0208

08006670 <strpbrk>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	7803      	ldrb	r3, [r0, #0]
 8006674:	b1a3      	cbz	r3, 80066a0 <strpbrk+0x30>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	4618      	mov	r0, r3
 800667c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006680:	b14d      	cbz	r5, 8006696 <strpbrk+0x26>
 8006682:	460a      	mov	r2, r1
 8006684:	e001      	b.n	800668a <strpbrk+0x1a>
 8006686:	42ae      	cmp	r6, r5
 8006688:	d009      	beq.n	800669e <strpbrk+0x2e>
 800668a:	4614      	mov	r4, r2
 800668c:	f812 6b01 	ldrb.w	r6, [r2], #1
 8006690:	2e00      	cmp	r6, #0
 8006692:	d1f8      	bne.n	8006686 <strpbrk+0x16>
 8006694:	e7f1      	b.n	800667a <strpbrk+0xa>
 8006696:	7823      	ldrb	r3, [r4, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf08      	it	eq
 800669c:	2000      	moveq	r0, #0
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	4618      	mov	r0, r3
 80066a2:	e7fc      	b.n	800669e <strpbrk+0x2e>

080066a4 <sulp>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	ec45 4b10 	vmov	d0, r4, r5
 80066ae:	4616      	mov	r6, r2
 80066b0:	f002 fc3a 	bl	8008f28 <__ulp>
 80066b4:	ec51 0b10 	vmov	r0, r1, d0
 80066b8:	b17e      	cbz	r6, 80066da <sulp+0x36>
 80066ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80066be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd09      	ble.n	80066da <sulp+0x36>
 80066c6:	051b      	lsls	r3, r3, #20
 80066c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80066cc:	2400      	movs	r4, #0
 80066ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80066d2:	4622      	mov	r2, r4
 80066d4:	462b      	mov	r3, r5
 80066d6:	f7f9 ffa7 	bl	8000628 <__aeabi_dmul>
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	0000      	movs	r0, r0
	...

080066e0 <_strtod_l>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	b0a3      	sub	sp, #140	; 0x8c
 80066e6:	461f      	mov	r7, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	931e      	str	r3, [sp, #120]	; 0x78
 80066ec:	4ba4      	ldr	r3, [pc, #656]	; (8006980 <_strtod_l+0x2a0>)
 80066ee:	9219      	str	r2, [sp, #100]	; 0x64
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	4604      	mov	r4, r0
 80066f6:	4618      	mov	r0, r3
 80066f8:	4688      	mov	r8, r1
 80066fa:	f7f9 fd7b 	bl	80001f4 <strlen>
 80066fe:	f04f 0a00 	mov.w	sl, #0
 8006702:	4605      	mov	r5, r0
 8006704:	f04f 0b00 	mov.w	fp, #0
 8006708:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800670c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	2a2b      	cmp	r2, #43	; 0x2b
 8006712:	d04c      	beq.n	80067ae <_strtod_l+0xce>
 8006714:	d839      	bhi.n	800678a <_strtod_l+0xaa>
 8006716:	2a0d      	cmp	r2, #13
 8006718:	d832      	bhi.n	8006780 <_strtod_l+0xa0>
 800671a:	2a08      	cmp	r2, #8
 800671c:	d832      	bhi.n	8006784 <_strtod_l+0xa4>
 800671e:	2a00      	cmp	r2, #0
 8006720:	d03c      	beq.n	800679c <_strtod_l+0xbc>
 8006722:	2300      	movs	r3, #0
 8006724:	930e      	str	r3, [sp, #56]	; 0x38
 8006726:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006728:	7833      	ldrb	r3, [r6, #0]
 800672a:	2b30      	cmp	r3, #48	; 0x30
 800672c:	f040 80b4 	bne.w	8006898 <_strtod_l+0x1b8>
 8006730:	7873      	ldrb	r3, [r6, #1]
 8006732:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006736:	2b58      	cmp	r3, #88	; 0x58
 8006738:	d16c      	bne.n	8006814 <_strtod_l+0x134>
 800673a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	ab1e      	add	r3, sp, #120	; 0x78
 8006740:	9702      	str	r7, [sp, #8]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	4a8f      	ldr	r2, [pc, #572]	; (8006984 <_strtod_l+0x2a4>)
 8006746:	ab1f      	add	r3, sp, #124	; 0x7c
 8006748:	a91d      	add	r1, sp, #116	; 0x74
 800674a:	4620      	mov	r0, r4
 800674c:	f001 fd4c 	bl	80081e8 <__gethex>
 8006750:	f010 0707 	ands.w	r7, r0, #7
 8006754:	4605      	mov	r5, r0
 8006756:	d005      	beq.n	8006764 <_strtod_l+0x84>
 8006758:	2f06      	cmp	r7, #6
 800675a:	d12a      	bne.n	80067b2 <_strtod_l+0xd2>
 800675c:	3601      	adds	r6, #1
 800675e:	2300      	movs	r3, #0
 8006760:	961d      	str	r6, [sp, #116]	; 0x74
 8006762:	930e      	str	r3, [sp, #56]	; 0x38
 8006764:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 8596 	bne.w	8007298 <_strtod_l+0xbb8>
 800676c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676e:	b1db      	cbz	r3, 80067a8 <_strtod_l+0xc8>
 8006770:	4652      	mov	r2, sl
 8006772:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006776:	ec43 2b10 	vmov	d0, r2, r3
 800677a:	b023      	add	sp, #140	; 0x8c
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	2a20      	cmp	r2, #32
 8006782:	d1ce      	bne.n	8006722 <_strtod_l+0x42>
 8006784:	3301      	adds	r3, #1
 8006786:	931d      	str	r3, [sp, #116]	; 0x74
 8006788:	e7c0      	b.n	800670c <_strtod_l+0x2c>
 800678a:	2a2d      	cmp	r2, #45	; 0x2d
 800678c:	d1c9      	bne.n	8006722 <_strtod_l+0x42>
 800678e:	2201      	movs	r2, #1
 8006790:	920e      	str	r2, [sp, #56]	; 0x38
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	921d      	str	r2, [sp, #116]	; 0x74
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1c4      	bne.n	8006726 <_strtod_l+0x46>
 800679c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800679e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 8576 	bne.w	8007294 <_strtod_l+0xbb4>
 80067a8:	4652      	mov	r2, sl
 80067aa:	465b      	mov	r3, fp
 80067ac:	e7e3      	b.n	8006776 <_strtod_l+0x96>
 80067ae:	2200      	movs	r2, #0
 80067b0:	e7ee      	b.n	8006790 <_strtod_l+0xb0>
 80067b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80067b4:	b13a      	cbz	r2, 80067c6 <_strtod_l+0xe6>
 80067b6:	2135      	movs	r1, #53	; 0x35
 80067b8:	a820      	add	r0, sp, #128	; 0x80
 80067ba:	f002 fcc0 	bl	800913e <__copybits>
 80067be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80067c0:	4620      	mov	r0, r4
 80067c2:	f002 f885 	bl	80088d0 <_Bfree>
 80067c6:	3f01      	subs	r7, #1
 80067c8:	2f05      	cmp	r7, #5
 80067ca:	d807      	bhi.n	80067dc <_strtod_l+0xfc>
 80067cc:	e8df f007 	tbb	[pc, r7]
 80067d0:	1d180b0e 	.word	0x1d180b0e
 80067d4:	030e      	.short	0x030e
 80067d6:	f04f 0b00 	mov.w	fp, #0
 80067da:	46da      	mov	sl, fp
 80067dc:	0728      	lsls	r0, r5, #28
 80067de:	d5c1      	bpl.n	8006764 <_strtod_l+0x84>
 80067e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80067e4:	e7be      	b.n	8006764 <_strtod_l+0x84>
 80067e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80067ea:	e7f7      	b.n	80067dc <_strtod_l+0xfc>
 80067ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80067f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80067f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80067f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80067fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067fe:	e7ed      	b.n	80067dc <_strtod_l+0xfc>
 8006800:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006988 <_strtod_l+0x2a8>
 8006804:	f04f 0a00 	mov.w	sl, #0
 8006808:	e7e8      	b.n	80067dc <_strtod_l+0xfc>
 800680a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800680e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006812:	e7e3      	b.n	80067dc <_strtod_l+0xfc>
 8006814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	921d      	str	r2, [sp, #116]	; 0x74
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	2b30      	cmp	r3, #48	; 0x30
 800681e:	d0f9      	beq.n	8006814 <_strtod_l+0x134>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d09f      	beq.n	8006764 <_strtod_l+0x84>
 8006824:	2301      	movs	r3, #1
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800682e:	930a      	str	r3, [sp, #40]	; 0x28
 8006830:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006834:	464f      	mov	r7, r9
 8006836:	220a      	movs	r2, #10
 8006838:	981d      	ldr	r0, [sp, #116]	; 0x74
 800683a:	7806      	ldrb	r6, [r0, #0]
 800683c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006840:	b2d9      	uxtb	r1, r3
 8006842:	2909      	cmp	r1, #9
 8006844:	d92a      	bls.n	800689c <_strtod_l+0x1bc>
 8006846:	9907      	ldr	r1, [sp, #28]
 8006848:	462a      	mov	r2, r5
 800684a:	f002 fee9 	bl	8009620 <strncmp>
 800684e:	b398      	cbz	r0, 80068b8 <_strtod_l+0x1d8>
 8006850:	2000      	movs	r0, #0
 8006852:	4633      	mov	r3, r6
 8006854:	463d      	mov	r5, r7
 8006856:	9007      	str	r0, [sp, #28]
 8006858:	4602      	mov	r2, r0
 800685a:	2b65      	cmp	r3, #101	; 0x65
 800685c:	d001      	beq.n	8006862 <_strtod_l+0x182>
 800685e:	2b45      	cmp	r3, #69	; 0x45
 8006860:	d118      	bne.n	8006894 <_strtod_l+0x1b4>
 8006862:	b91d      	cbnz	r5, 800686c <_strtod_l+0x18c>
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	4303      	orrs	r3, r0
 8006868:	d098      	beq.n	800679c <_strtod_l+0xbc>
 800686a:	2500      	movs	r5, #0
 800686c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006870:	f108 0301 	add.w	r3, r8, #1
 8006874:	931d      	str	r3, [sp, #116]	; 0x74
 8006876:	f898 3001 	ldrb.w	r3, [r8, #1]
 800687a:	2b2b      	cmp	r3, #43	; 0x2b
 800687c:	d075      	beq.n	800696a <_strtod_l+0x28a>
 800687e:	2b2d      	cmp	r3, #45	; 0x2d
 8006880:	d07b      	beq.n	800697a <_strtod_l+0x29a>
 8006882:	f04f 0c00 	mov.w	ip, #0
 8006886:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800688a:	2909      	cmp	r1, #9
 800688c:	f240 8082 	bls.w	8006994 <_strtod_l+0x2b4>
 8006890:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006894:	2600      	movs	r6, #0
 8006896:	e09d      	b.n	80069d4 <_strtod_l+0x2f4>
 8006898:	2300      	movs	r3, #0
 800689a:	e7c4      	b.n	8006826 <_strtod_l+0x146>
 800689c:	2f08      	cmp	r7, #8
 800689e:	bfd8      	it	le
 80068a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80068a2:	f100 0001 	add.w	r0, r0, #1
 80068a6:	bfda      	itte	le
 80068a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80068ac:	9309      	strle	r3, [sp, #36]	; 0x24
 80068ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 80068b2:	3701      	adds	r7, #1
 80068b4:	901d      	str	r0, [sp, #116]	; 0x74
 80068b6:	e7bf      	b.n	8006838 <_strtod_l+0x158>
 80068b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068ba:	195a      	adds	r2, r3, r5
 80068bc:	921d      	str	r2, [sp, #116]	; 0x74
 80068be:	5d5b      	ldrb	r3, [r3, r5]
 80068c0:	2f00      	cmp	r7, #0
 80068c2:	d037      	beq.n	8006934 <_strtod_l+0x254>
 80068c4:	9007      	str	r0, [sp, #28]
 80068c6:	463d      	mov	r5, r7
 80068c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80068cc:	2a09      	cmp	r2, #9
 80068ce:	d912      	bls.n	80068f6 <_strtod_l+0x216>
 80068d0:	2201      	movs	r2, #1
 80068d2:	e7c2      	b.n	800685a <_strtod_l+0x17a>
 80068d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	921d      	str	r2, [sp, #116]	; 0x74
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	3001      	adds	r0, #1
 80068de:	2b30      	cmp	r3, #48	; 0x30
 80068e0:	d0f8      	beq.n	80068d4 <_strtod_l+0x1f4>
 80068e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80068e6:	2a08      	cmp	r2, #8
 80068e8:	f200 84db 	bhi.w	80072a2 <_strtod_l+0xbc2>
 80068ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068ee:	9007      	str	r0, [sp, #28]
 80068f0:	2000      	movs	r0, #0
 80068f2:	920a      	str	r2, [sp, #40]	; 0x28
 80068f4:	4605      	mov	r5, r0
 80068f6:	3b30      	subs	r3, #48	; 0x30
 80068f8:	f100 0201 	add.w	r2, r0, #1
 80068fc:	d014      	beq.n	8006928 <_strtod_l+0x248>
 80068fe:	9907      	ldr	r1, [sp, #28]
 8006900:	4411      	add	r1, r2
 8006902:	9107      	str	r1, [sp, #28]
 8006904:	462a      	mov	r2, r5
 8006906:	eb00 0e05 	add.w	lr, r0, r5
 800690a:	210a      	movs	r1, #10
 800690c:	4572      	cmp	r2, lr
 800690e:	d113      	bne.n	8006938 <_strtod_l+0x258>
 8006910:	182a      	adds	r2, r5, r0
 8006912:	2a08      	cmp	r2, #8
 8006914:	f105 0501 	add.w	r5, r5, #1
 8006918:	4405      	add	r5, r0
 800691a:	dc1c      	bgt.n	8006956 <_strtod_l+0x276>
 800691c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691e:	220a      	movs	r2, #10
 8006920:	fb02 3301 	mla	r3, r2, r1, r3
 8006924:	9309      	str	r3, [sp, #36]	; 0x24
 8006926:	2200      	movs	r2, #0
 8006928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800692a:	1c59      	adds	r1, r3, #1
 800692c:	911d      	str	r1, [sp, #116]	; 0x74
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	4610      	mov	r0, r2
 8006932:	e7c9      	b.n	80068c8 <_strtod_l+0x1e8>
 8006934:	4638      	mov	r0, r7
 8006936:	e7d2      	b.n	80068de <_strtod_l+0x1fe>
 8006938:	2a08      	cmp	r2, #8
 800693a:	dc04      	bgt.n	8006946 <_strtod_l+0x266>
 800693c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800693e:	434e      	muls	r6, r1
 8006940:	9609      	str	r6, [sp, #36]	; 0x24
 8006942:	3201      	adds	r2, #1
 8006944:	e7e2      	b.n	800690c <_strtod_l+0x22c>
 8006946:	f102 0c01 	add.w	ip, r2, #1
 800694a:	f1bc 0f10 	cmp.w	ip, #16
 800694e:	bfd8      	it	le
 8006950:	fb01 f909 	mulle.w	r9, r1, r9
 8006954:	e7f5      	b.n	8006942 <_strtod_l+0x262>
 8006956:	2d10      	cmp	r5, #16
 8006958:	bfdc      	itt	le
 800695a:	220a      	movle	r2, #10
 800695c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006960:	e7e1      	b.n	8006926 <_strtod_l+0x246>
 8006962:	2300      	movs	r3, #0
 8006964:	9307      	str	r3, [sp, #28]
 8006966:	2201      	movs	r2, #1
 8006968:	e77c      	b.n	8006864 <_strtod_l+0x184>
 800696a:	f04f 0c00 	mov.w	ip, #0
 800696e:	f108 0302 	add.w	r3, r8, #2
 8006972:	931d      	str	r3, [sp, #116]	; 0x74
 8006974:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006978:	e785      	b.n	8006886 <_strtod_l+0x1a6>
 800697a:	f04f 0c01 	mov.w	ip, #1
 800697e:	e7f6      	b.n	800696e <_strtod_l+0x28e>
 8006980:	0800a6b0 	.word	0x0800a6b0
 8006984:	0800a460 	.word	0x0800a460
 8006988:	7ff00000 	.word	0x7ff00000
 800698c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	911d      	str	r1, [sp, #116]	; 0x74
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b30      	cmp	r3, #48	; 0x30
 8006996:	d0f9      	beq.n	800698c <_strtod_l+0x2ac>
 8006998:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800699c:	2908      	cmp	r1, #8
 800699e:	f63f af79 	bhi.w	8006894 <_strtod_l+0x1b4>
 80069a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80069a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069a8:	9308      	str	r3, [sp, #32]
 80069aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	911d      	str	r1, [sp, #116]	; 0x74
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80069b6:	2e09      	cmp	r6, #9
 80069b8:	d937      	bls.n	8006a2a <_strtod_l+0x34a>
 80069ba:	9e08      	ldr	r6, [sp, #32]
 80069bc:	1b89      	subs	r1, r1, r6
 80069be:	2908      	cmp	r1, #8
 80069c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80069c4:	dc02      	bgt.n	80069cc <_strtod_l+0x2ec>
 80069c6:	4576      	cmp	r6, lr
 80069c8:	bfa8      	it	ge
 80069ca:	4676      	movge	r6, lr
 80069cc:	f1bc 0f00 	cmp.w	ip, #0
 80069d0:	d000      	beq.n	80069d4 <_strtod_l+0x2f4>
 80069d2:	4276      	negs	r6, r6
 80069d4:	2d00      	cmp	r5, #0
 80069d6:	d14f      	bne.n	8006a78 <_strtod_l+0x398>
 80069d8:	9904      	ldr	r1, [sp, #16]
 80069da:	4301      	orrs	r1, r0
 80069dc:	f47f aec2 	bne.w	8006764 <_strtod_l+0x84>
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	f47f aedb 	bne.w	800679c <_strtod_l+0xbc>
 80069e6:	2b69      	cmp	r3, #105	; 0x69
 80069e8:	d027      	beq.n	8006a3a <_strtod_l+0x35a>
 80069ea:	dc24      	bgt.n	8006a36 <_strtod_l+0x356>
 80069ec:	2b49      	cmp	r3, #73	; 0x49
 80069ee:	d024      	beq.n	8006a3a <_strtod_l+0x35a>
 80069f0:	2b4e      	cmp	r3, #78	; 0x4e
 80069f2:	f47f aed3 	bne.w	800679c <_strtod_l+0xbc>
 80069f6:	499e      	ldr	r1, [pc, #632]	; (8006c70 <_strtod_l+0x590>)
 80069f8:	a81d      	add	r0, sp, #116	; 0x74
 80069fa:	f001 fe4d 	bl	8008698 <__match>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f43f aecc 	beq.w	800679c <_strtod_l+0xbc>
 8006a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b28      	cmp	r3, #40	; 0x28
 8006a0a:	d12d      	bne.n	8006a68 <_strtod_l+0x388>
 8006a0c:	4999      	ldr	r1, [pc, #612]	; (8006c74 <_strtod_l+0x594>)
 8006a0e:	aa20      	add	r2, sp, #128	; 0x80
 8006a10:	a81d      	add	r0, sp, #116	; 0x74
 8006a12:	f001 fe55 	bl	80086c0 <__hexnan>
 8006a16:	2805      	cmp	r0, #5
 8006a18:	d126      	bne.n	8006a68 <_strtod_l+0x388>
 8006a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a1c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006a20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006a24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006a28:	e69c      	b.n	8006764 <_strtod_l+0x84>
 8006a2a:	210a      	movs	r1, #10
 8006a2c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006a30:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006a34:	e7b9      	b.n	80069aa <_strtod_l+0x2ca>
 8006a36:	2b6e      	cmp	r3, #110	; 0x6e
 8006a38:	e7db      	b.n	80069f2 <_strtod_l+0x312>
 8006a3a:	498f      	ldr	r1, [pc, #572]	; (8006c78 <_strtod_l+0x598>)
 8006a3c:	a81d      	add	r0, sp, #116	; 0x74
 8006a3e:	f001 fe2b 	bl	8008698 <__match>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f43f aeaa 	beq.w	800679c <_strtod_l+0xbc>
 8006a48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a4a:	498c      	ldr	r1, [pc, #560]	; (8006c7c <_strtod_l+0x59c>)
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	a81d      	add	r0, sp, #116	; 0x74
 8006a50:	931d      	str	r3, [sp, #116]	; 0x74
 8006a52:	f001 fe21 	bl	8008698 <__match>
 8006a56:	b910      	cbnz	r0, 8006a5e <_strtod_l+0x37e>
 8006a58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	931d      	str	r3, [sp, #116]	; 0x74
 8006a5e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006c8c <_strtod_l+0x5ac>
 8006a62:	f04f 0a00 	mov.w	sl, #0
 8006a66:	e67d      	b.n	8006764 <_strtod_l+0x84>
 8006a68:	4885      	ldr	r0, [pc, #532]	; (8006c80 <_strtod_l+0x5a0>)
 8006a6a:	f002 fdc1 	bl	80095f0 <nan>
 8006a6e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006a76:	e675      	b.n	8006764 <_strtod_l+0x84>
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a7c:	1af3      	subs	r3, r6, r3
 8006a7e:	2f00      	cmp	r7, #0
 8006a80:	bf08      	it	eq
 8006a82:	462f      	moveq	r7, r5
 8006a84:	2d10      	cmp	r5, #16
 8006a86:	9308      	str	r3, [sp, #32]
 8006a88:	46a8      	mov	r8, r5
 8006a8a:	bfa8      	it	ge
 8006a8c:	f04f 0810 	movge.w	r8, #16
 8006a90:	f7f9 fd50 	bl	8000534 <__aeabi_ui2d>
 8006a94:	2d09      	cmp	r5, #9
 8006a96:	4682      	mov	sl, r0
 8006a98:	468b      	mov	fp, r1
 8006a9a:	dd13      	ble.n	8006ac4 <_strtod_l+0x3e4>
 8006a9c:	4b79      	ldr	r3, [pc, #484]	; (8006c84 <_strtod_l+0x5a4>)
 8006a9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006aa2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006aa6:	f7f9 fdbf 	bl	8000628 <__aeabi_dmul>
 8006aaa:	4682      	mov	sl, r0
 8006aac:	4648      	mov	r0, r9
 8006aae:	468b      	mov	fp, r1
 8006ab0:	f7f9 fd40 	bl	8000534 <__aeabi_ui2d>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4650      	mov	r0, sl
 8006aba:	4659      	mov	r1, fp
 8006abc:	f7f9 fbfe 	bl	80002bc <__adddf3>
 8006ac0:	4682      	mov	sl, r0
 8006ac2:	468b      	mov	fp, r1
 8006ac4:	2d0f      	cmp	r5, #15
 8006ac6:	dc38      	bgt.n	8006b3a <_strtod_l+0x45a>
 8006ac8:	9b08      	ldr	r3, [sp, #32]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f43f ae4a 	beq.w	8006764 <_strtod_l+0x84>
 8006ad0:	dd24      	ble.n	8006b1c <_strtod_l+0x43c>
 8006ad2:	2b16      	cmp	r3, #22
 8006ad4:	dc0b      	bgt.n	8006aee <_strtod_l+0x40e>
 8006ad6:	4d6b      	ldr	r5, [pc, #428]	; (8006c84 <_strtod_l+0x5a4>)
 8006ad8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006adc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	465b      	mov	r3, fp
 8006ae4:	f7f9 fda0 	bl	8000628 <__aeabi_dmul>
 8006ae8:	4682      	mov	sl, r0
 8006aea:	468b      	mov	fp, r1
 8006aec:	e63a      	b.n	8006764 <_strtod_l+0x84>
 8006aee:	9a08      	ldr	r2, [sp, #32]
 8006af0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006af4:	4293      	cmp	r3, r2
 8006af6:	db20      	blt.n	8006b3a <_strtod_l+0x45a>
 8006af8:	4c62      	ldr	r4, [pc, #392]	; (8006c84 <_strtod_l+0x5a4>)
 8006afa:	f1c5 050f 	rsb	r5, r5, #15
 8006afe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b02:	4652      	mov	r2, sl
 8006b04:	465b      	mov	r3, fp
 8006b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b0a:	f7f9 fd8d 	bl	8000628 <__aeabi_dmul>
 8006b0e:	9b08      	ldr	r3, [sp, #32]
 8006b10:	1b5d      	subs	r5, r3, r5
 8006b12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b1a:	e7e3      	b.n	8006ae4 <_strtod_l+0x404>
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	3316      	adds	r3, #22
 8006b20:	db0b      	blt.n	8006b3a <_strtod_l+0x45a>
 8006b22:	9b07      	ldr	r3, [sp, #28]
 8006b24:	4a57      	ldr	r2, [pc, #348]	; (8006c84 <_strtod_l+0x5a4>)
 8006b26:	1b9e      	subs	r6, r3, r6
 8006b28:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006b2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b30:	4650      	mov	r0, sl
 8006b32:	4659      	mov	r1, fp
 8006b34:	f7f9 fea2 	bl	800087c <__aeabi_ddiv>
 8006b38:	e7d6      	b.n	8006ae8 <_strtod_l+0x408>
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	eba5 0808 	sub.w	r8, r5, r8
 8006b40:	4498      	add	r8, r3
 8006b42:	f1b8 0f00 	cmp.w	r8, #0
 8006b46:	dd71      	ble.n	8006c2c <_strtod_l+0x54c>
 8006b48:	f018 030f 	ands.w	r3, r8, #15
 8006b4c:	d00a      	beq.n	8006b64 <_strtod_l+0x484>
 8006b4e:	494d      	ldr	r1, [pc, #308]	; (8006c84 <_strtod_l+0x5a4>)
 8006b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b54:	4652      	mov	r2, sl
 8006b56:	465b      	mov	r3, fp
 8006b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b5c:	f7f9 fd64 	bl	8000628 <__aeabi_dmul>
 8006b60:	4682      	mov	sl, r0
 8006b62:	468b      	mov	fp, r1
 8006b64:	f038 080f 	bics.w	r8, r8, #15
 8006b68:	d04d      	beq.n	8006c06 <_strtod_l+0x526>
 8006b6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006b6e:	dd22      	ble.n	8006bb6 <_strtod_l+0x4d6>
 8006b70:	2500      	movs	r5, #0
 8006b72:	462e      	mov	r6, r5
 8006b74:	9509      	str	r5, [sp, #36]	; 0x24
 8006b76:	9507      	str	r5, [sp, #28]
 8006b78:	2322      	movs	r3, #34	; 0x22
 8006b7a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006c8c <_strtod_l+0x5ac>
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	f04f 0a00 	mov.w	sl, #0
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f43f adec 	beq.w	8006764 <_strtod_l+0x84>
 8006b8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f001 fe9e 	bl	80088d0 <_Bfree>
 8006b94:	9907      	ldr	r1, [sp, #28]
 8006b96:	4620      	mov	r0, r4
 8006b98:	f001 fe9a 	bl	80088d0 <_Bfree>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f001 fe96 	bl	80088d0 <_Bfree>
 8006ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f001 fe92 	bl	80088d0 <_Bfree>
 8006bac:	4629      	mov	r1, r5
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f001 fe8e 	bl	80088d0 <_Bfree>
 8006bb4:	e5d6      	b.n	8006764 <_strtod_l+0x84>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	4699      	mov	r9, r3
 8006bc2:	f1b8 0f01 	cmp.w	r8, #1
 8006bc6:	dc21      	bgt.n	8006c0c <_strtod_l+0x52c>
 8006bc8:	b10b      	cbz	r3, 8006bce <_strtod_l+0x4ee>
 8006bca:	4682      	mov	sl, r0
 8006bcc:	468b      	mov	fp, r1
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <_strtod_l+0x5a8>)
 8006bd0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006bd4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006bd8:	4652      	mov	r2, sl
 8006bda:	465b      	mov	r3, fp
 8006bdc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006be0:	f7f9 fd22 	bl	8000628 <__aeabi_dmul>
 8006be4:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <_strtod_l+0x5ac>)
 8006be6:	460a      	mov	r2, r1
 8006be8:	400b      	ands	r3, r1
 8006bea:	4929      	ldr	r1, [pc, #164]	; (8006c90 <_strtod_l+0x5b0>)
 8006bec:	428b      	cmp	r3, r1
 8006bee:	4682      	mov	sl, r0
 8006bf0:	d8be      	bhi.n	8006b70 <_strtod_l+0x490>
 8006bf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006bf6:	428b      	cmp	r3, r1
 8006bf8:	bf86      	itte	hi
 8006bfa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006c94 <_strtod_l+0x5b4>
 8006bfe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006c02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006c06:	2300      	movs	r3, #0
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	e081      	b.n	8006d10 <_strtod_l+0x630>
 8006c0c:	f018 0f01 	tst.w	r8, #1
 8006c10:	d007      	beq.n	8006c22 <_strtod_l+0x542>
 8006c12:	4b1d      	ldr	r3, [pc, #116]	; (8006c88 <_strtod_l+0x5a8>)
 8006c14:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 fd04 	bl	8000628 <__aeabi_dmul>
 8006c20:	2301      	movs	r3, #1
 8006c22:	f109 0901 	add.w	r9, r9, #1
 8006c26:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c2a:	e7ca      	b.n	8006bc2 <_strtod_l+0x4e2>
 8006c2c:	d0eb      	beq.n	8006c06 <_strtod_l+0x526>
 8006c2e:	f1c8 0800 	rsb	r8, r8, #0
 8006c32:	f018 020f 	ands.w	r2, r8, #15
 8006c36:	d00a      	beq.n	8006c4e <_strtod_l+0x56e>
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <_strtod_l+0x5a4>)
 8006c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c3e:	4650      	mov	r0, sl
 8006c40:	4659      	mov	r1, fp
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 fe19 	bl	800087c <__aeabi_ddiv>
 8006c4a:	4682      	mov	sl, r0
 8006c4c:	468b      	mov	fp, r1
 8006c4e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006c52:	d0d8      	beq.n	8006c06 <_strtod_l+0x526>
 8006c54:	f1b8 0f1f 	cmp.w	r8, #31
 8006c58:	dd1e      	ble.n	8006c98 <_strtod_l+0x5b8>
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	462e      	mov	r6, r5
 8006c5e:	9509      	str	r5, [sp, #36]	; 0x24
 8006c60:	9507      	str	r5, [sp, #28]
 8006c62:	2322      	movs	r3, #34	; 0x22
 8006c64:	f04f 0a00 	mov.w	sl, #0
 8006c68:	f04f 0b00 	mov.w	fp, #0
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	e789      	b.n	8006b84 <_strtod_l+0x4a4>
 8006c70:	0800a439 	.word	0x0800a439
 8006c74:	0800a474 	.word	0x0800a474
 8006c78:	0800a431 	.word	0x0800a431
 8006c7c:	0800a5b4 	.word	0x0800a5b4
 8006c80:	0800a870 	.word	0x0800a870
 8006c84:	0800a750 	.word	0x0800a750
 8006c88:	0800a728 	.word	0x0800a728
 8006c8c:	7ff00000 	.word	0x7ff00000
 8006c90:	7ca00000 	.word	0x7ca00000
 8006c94:	7fefffff 	.word	0x7fefffff
 8006c98:	f018 0310 	ands.w	r3, r8, #16
 8006c9c:	bf18      	it	ne
 8006c9e:	236a      	movne	r3, #106	; 0x6a
 8006ca0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007058 <_strtod_l+0x978>
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	4659      	mov	r1, fp
 8006caa:	2300      	movs	r3, #0
 8006cac:	f018 0f01 	tst.w	r8, #1
 8006cb0:	d004      	beq.n	8006cbc <_strtod_l+0x5dc>
 8006cb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006cb6:	f7f9 fcb7 	bl	8000628 <__aeabi_dmul>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006cc0:	f109 0908 	add.w	r9, r9, #8
 8006cc4:	d1f2      	bne.n	8006cac <_strtod_l+0x5cc>
 8006cc6:	b10b      	cbz	r3, 8006ccc <_strtod_l+0x5ec>
 8006cc8:	4682      	mov	sl, r0
 8006cca:	468b      	mov	fp, r1
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	b1bb      	cbz	r3, 8006d00 <_strtod_l+0x620>
 8006cd0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006cd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	4659      	mov	r1, fp
 8006cdc:	dd10      	ble.n	8006d00 <_strtod_l+0x620>
 8006cde:	2b1f      	cmp	r3, #31
 8006ce0:	f340 8128 	ble.w	8006f34 <_strtod_l+0x854>
 8006ce4:	2b34      	cmp	r3, #52	; 0x34
 8006ce6:	bfde      	ittt	le
 8006ce8:	3b20      	suble	r3, #32
 8006cea:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8006cee:	fa02 f303 	lslle.w	r3, r2, r3
 8006cf2:	f04f 0a00 	mov.w	sl, #0
 8006cf6:	bfcc      	ite	gt
 8006cf8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006cfc:	ea03 0b01 	andle.w	fp, r3, r1
 8006d00:	2200      	movs	r2, #0
 8006d02:	2300      	movs	r3, #0
 8006d04:	4650      	mov	r0, sl
 8006d06:	4659      	mov	r1, fp
 8006d08:	f7f9 fef6 	bl	8000af8 <__aeabi_dcmpeq>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1a4      	bne.n	8006c5a <_strtod_l+0x57a>
 8006d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d16:	462b      	mov	r3, r5
 8006d18:	463a      	mov	r2, r7
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f001 fe44 	bl	80089a8 <__s2b>
 8006d20:	9009      	str	r0, [sp, #36]	; 0x24
 8006d22:	2800      	cmp	r0, #0
 8006d24:	f43f af24 	beq.w	8006b70 <_strtod_l+0x490>
 8006d28:	9b07      	ldr	r3, [sp, #28]
 8006d2a:	1b9e      	subs	r6, r3, r6
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfb4      	ite	lt
 8006d32:	4633      	movlt	r3, r6
 8006d34:	2300      	movge	r3, #0
 8006d36:	9310      	str	r3, [sp, #64]	; 0x40
 8006d38:	9b08      	ldr	r3, [sp, #32]
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d40:	9318      	str	r3, [sp, #96]	; 0x60
 8006d42:	462e      	mov	r6, r5
 8006d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d46:	4620      	mov	r0, r4
 8006d48:	6859      	ldr	r1, [r3, #4]
 8006d4a:	f001 fd81 	bl	8008850 <_Balloc>
 8006d4e:	9007      	str	r0, [sp, #28]
 8006d50:	2800      	cmp	r0, #0
 8006d52:	f43f af11 	beq.w	8006b78 <_strtod_l+0x498>
 8006d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	3202      	adds	r2, #2
 8006d5c:	f103 010c 	add.w	r1, r3, #12
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	300c      	adds	r0, #12
 8006d64:	f001 fd66 	bl	8008834 <memcpy>
 8006d68:	ec4b ab10 	vmov	d0, sl, fp
 8006d6c:	aa20      	add	r2, sp, #128	; 0x80
 8006d6e:	a91f      	add	r1, sp, #124	; 0x7c
 8006d70:	4620      	mov	r0, r4
 8006d72:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006d76:	f002 f953 	bl	8009020 <__d2b>
 8006d7a:	901e      	str	r0, [sp, #120]	; 0x78
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f43f aefb 	beq.w	8006b78 <_strtod_l+0x498>
 8006d82:	2101      	movs	r1, #1
 8006d84:	4620      	mov	r0, r4
 8006d86:	f001 fea9 	bl	8008adc <__i2b>
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	f43f aef3 	beq.w	8006b78 <_strtod_l+0x498>
 8006d92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d94:	9904      	ldr	r1, [sp, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfab      	itete	ge
 8006d9a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006d9c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006d9e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006da0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006da4:	bfac      	ite	ge
 8006da6:	eb03 0902 	addge.w	r9, r3, r2
 8006daa:	1ad7      	sublt	r7, r2, r3
 8006dac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006dae:	eba3 0801 	sub.w	r8, r3, r1
 8006db2:	4490      	add	r8, r2
 8006db4:	4ba3      	ldr	r3, [pc, #652]	; (8007044 <_strtod_l+0x964>)
 8006db6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006dba:	4598      	cmp	r8, r3
 8006dbc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006dc0:	f280 80cc 	bge.w	8006f5c <_strtod_l+0x87c>
 8006dc4:	eba3 0308 	sub.w	r3, r3, r8
 8006dc8:	2b1f      	cmp	r3, #31
 8006dca:	eba2 0203 	sub.w	r2, r2, r3
 8006dce:	f04f 0101 	mov.w	r1, #1
 8006dd2:	f300 80b6 	bgt.w	8006f42 <_strtod_l+0x862>
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	9311      	str	r3, [sp, #68]	; 0x44
 8006ddc:	2300      	movs	r3, #0
 8006dde:	930c      	str	r3, [sp, #48]	; 0x30
 8006de0:	eb09 0802 	add.w	r8, r9, r2
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	45c1      	cmp	r9, r8
 8006de8:	4417      	add	r7, r2
 8006dea:	441f      	add	r7, r3
 8006dec:	464b      	mov	r3, r9
 8006dee:	bfa8      	it	ge
 8006df0:	4643      	movge	r3, r8
 8006df2:	42bb      	cmp	r3, r7
 8006df4:	bfa8      	it	ge
 8006df6:	463b      	movge	r3, r7
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfc2      	ittt	gt
 8006dfc:	eba8 0803 	subgt.w	r8, r8, r3
 8006e00:	1aff      	subgt	r7, r7, r3
 8006e02:	eba9 0903 	subgt.w	r9, r9, r3
 8006e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dd17      	ble.n	8006e3c <_strtod_l+0x75c>
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4620      	mov	r0, r4
 8006e12:	f001 ff1f 	bl	8008c54 <__pow5mult>
 8006e16:	4606      	mov	r6, r0
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f43f aead 	beq.w	8006b78 <_strtod_l+0x498>
 8006e1e:	4601      	mov	r1, r0
 8006e20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e22:	4620      	mov	r0, r4
 8006e24:	f001 fe70 	bl	8008b08 <__multiply>
 8006e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	f43f aea4 	beq.w	8006b78 <_strtod_l+0x498>
 8006e30:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e32:	4620      	mov	r0, r4
 8006e34:	f001 fd4c 	bl	80088d0 <_Bfree>
 8006e38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e3a:	931e      	str	r3, [sp, #120]	; 0x78
 8006e3c:	f1b8 0f00 	cmp.w	r8, #0
 8006e40:	f300 8091 	bgt.w	8006f66 <_strtod_l+0x886>
 8006e44:	9b08      	ldr	r3, [sp, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	dd08      	ble.n	8006e5c <_strtod_l+0x77c>
 8006e4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e4c:	9907      	ldr	r1, [sp, #28]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f001 ff00 	bl	8008c54 <__pow5mult>
 8006e54:	9007      	str	r0, [sp, #28]
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f43f ae8e 	beq.w	8006b78 <_strtod_l+0x498>
 8006e5c:	2f00      	cmp	r7, #0
 8006e5e:	dd08      	ble.n	8006e72 <_strtod_l+0x792>
 8006e60:	9907      	ldr	r1, [sp, #28]
 8006e62:	463a      	mov	r2, r7
 8006e64:	4620      	mov	r0, r4
 8006e66:	f001 ff4f 	bl	8008d08 <__lshift>
 8006e6a:	9007      	str	r0, [sp, #28]
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	f43f ae83 	beq.w	8006b78 <_strtod_l+0x498>
 8006e72:	f1b9 0f00 	cmp.w	r9, #0
 8006e76:	dd08      	ble.n	8006e8a <_strtod_l+0x7aa>
 8006e78:	4631      	mov	r1, r6
 8006e7a:	464a      	mov	r2, r9
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f001 ff43 	bl	8008d08 <__lshift>
 8006e82:	4606      	mov	r6, r0
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f43f ae77 	beq.w	8006b78 <_strtod_l+0x498>
 8006e8a:	9a07      	ldr	r2, [sp, #28]
 8006e8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f001 ffc2 	bl	8008e18 <__mdiff>
 8006e94:	4605      	mov	r5, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f43f ae6e 	beq.w	8006b78 <_strtod_l+0x498>
 8006e9c:	68c3      	ldr	r3, [r0, #12]
 8006e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60c3      	str	r3, [r0, #12]
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	f001 ff9b 	bl	8008de0 <__mcmp>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	da65      	bge.n	8006f7a <_strtod_l+0x89a>
 8006eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eb0:	ea53 030a 	orrs.w	r3, r3, sl
 8006eb4:	f040 8087 	bne.w	8006fc6 <_strtod_l+0x8e6>
 8006eb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f040 8082 	bne.w	8006fc6 <_strtod_l+0x8e6>
 8006ec2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ec6:	0d1b      	lsrs	r3, r3, #20
 8006ec8:	051b      	lsls	r3, r3, #20
 8006eca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ece:	d97a      	bls.n	8006fc6 <_strtod_l+0x8e6>
 8006ed0:	696b      	ldr	r3, [r5, #20]
 8006ed2:	b913      	cbnz	r3, 8006eda <_strtod_l+0x7fa>
 8006ed4:	692b      	ldr	r3, [r5, #16]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	dd75      	ble.n	8006fc6 <_strtod_l+0x8e6>
 8006eda:	4629      	mov	r1, r5
 8006edc:	2201      	movs	r2, #1
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f001 ff12 	bl	8008d08 <__lshift>
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	f001 ff7a 	bl	8008de0 <__mcmp>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	dd6a      	ble.n	8006fc6 <_strtod_l+0x8e6>
 8006ef0:	9904      	ldr	r1, [sp, #16]
 8006ef2:	4a55      	ldr	r2, [pc, #340]	; (8007048 <_strtod_l+0x968>)
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	f000 8085 	beq.w	8007006 <_strtod_l+0x926>
 8006efc:	ea02 010b 	and.w	r1, r2, fp
 8006f00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f04:	dc7f      	bgt.n	8007006 <_strtod_l+0x926>
 8006f06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006f0a:	f77f aeaa 	ble.w	8006c62 <_strtod_l+0x582>
 8006f0e:	4a4f      	ldr	r2, [pc, #316]	; (800704c <_strtod_l+0x96c>)
 8006f10:	2300      	movs	r3, #0
 8006f12:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006f16:	4650      	mov	r0, sl
 8006f18:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7f9 fb83 	bl	8000628 <__aeabi_dmul>
 8006f22:	460b      	mov	r3, r1
 8006f24:	4303      	orrs	r3, r0
 8006f26:	bf08      	it	eq
 8006f28:	2322      	moveq	r3, #34	; 0x22
 8006f2a:	4682      	mov	sl, r0
 8006f2c:	468b      	mov	fp, r1
 8006f2e:	bf08      	it	eq
 8006f30:	6023      	streq	r3, [r4, #0]
 8006f32:	e62b      	b.n	8006b8c <_strtod_l+0x4ac>
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	ea03 0a0a 	and.w	sl, r3, sl
 8006f40:	e6de      	b.n	8006d00 <_strtod_l+0x620>
 8006f42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006f46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006f4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006f4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006f52:	fa01 f308 	lsl.w	r3, r1, r8
 8006f56:	930c      	str	r3, [sp, #48]	; 0x30
 8006f58:	9111      	str	r1, [sp, #68]	; 0x44
 8006f5a:	e741      	b.n	8006de0 <_strtod_l+0x700>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f60:	2301      	movs	r3, #1
 8006f62:	9311      	str	r3, [sp, #68]	; 0x44
 8006f64:	e73c      	b.n	8006de0 <_strtod_l+0x700>
 8006f66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f001 fecc 	bl	8008d08 <__lshift>
 8006f70:	901e      	str	r0, [sp, #120]	; 0x78
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f47f af66 	bne.w	8006e44 <_strtod_l+0x764>
 8006f78:	e5fe      	b.n	8006b78 <_strtod_l+0x498>
 8006f7a:	465f      	mov	r7, fp
 8006f7c:	d16e      	bne.n	800705c <_strtod_l+0x97c>
 8006f7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f84:	b342      	cbz	r2, 8006fd8 <_strtod_l+0x8f8>
 8006f86:	4a32      	ldr	r2, [pc, #200]	; (8007050 <_strtod_l+0x970>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d128      	bne.n	8006fde <_strtod_l+0x8fe>
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	4650      	mov	r0, sl
 8006f90:	b1eb      	cbz	r3, 8006fce <_strtod_l+0x8ee>
 8006f92:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <_strtod_l+0x968>)
 8006f94:	403a      	ands	r2, r7
 8006f96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f9e:	d819      	bhi.n	8006fd4 <_strtod_l+0x8f4>
 8006fa0:	0d12      	lsrs	r2, r2, #20
 8006fa2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8006faa:	4298      	cmp	r0, r3
 8006fac:	d117      	bne.n	8006fde <_strtod_l+0x8fe>
 8006fae:	4b29      	ldr	r3, [pc, #164]	; (8007054 <_strtod_l+0x974>)
 8006fb0:	429f      	cmp	r7, r3
 8006fb2:	d102      	bne.n	8006fba <_strtod_l+0x8da>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f addf 	beq.w	8006b78 <_strtod_l+0x498>
 8006fba:	4b23      	ldr	r3, [pc, #140]	; (8007048 <_strtod_l+0x968>)
 8006fbc:	403b      	ands	r3, r7
 8006fbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006fc2:	f04f 0a00 	mov.w	sl, #0
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1a0      	bne.n	8006f0e <_strtod_l+0x82e>
 8006fcc:	e5de      	b.n	8006b8c <_strtod_l+0x4ac>
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fd2:	e7ea      	b.n	8006faa <_strtod_l+0x8ca>
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e7e8      	b.n	8006faa <_strtod_l+0x8ca>
 8006fd8:	ea53 030a 	orrs.w	r3, r3, sl
 8006fdc:	d088      	beq.n	8006ef0 <_strtod_l+0x810>
 8006fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fe0:	b1db      	cbz	r3, 800701a <_strtod_l+0x93a>
 8006fe2:	423b      	tst	r3, r7
 8006fe4:	d0ef      	beq.n	8006fc6 <_strtod_l+0x8e6>
 8006fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	4650      	mov	r0, sl
 8006fec:	4659      	mov	r1, fp
 8006fee:	b1c3      	cbz	r3, 8007022 <_strtod_l+0x942>
 8006ff0:	f7ff fb58 	bl	80066a4 <sulp>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ffc:	f7f9 f95e 	bl	80002bc <__adddf3>
 8007000:	4682      	mov	sl, r0
 8007002:	468b      	mov	fp, r1
 8007004:	e7df      	b.n	8006fc6 <_strtod_l+0x8e6>
 8007006:	4013      	ands	r3, r2
 8007008:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800700c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007010:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007014:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007018:	e7d5      	b.n	8006fc6 <_strtod_l+0x8e6>
 800701a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800701c:	ea13 0f0a 	tst.w	r3, sl
 8007020:	e7e0      	b.n	8006fe4 <_strtod_l+0x904>
 8007022:	f7ff fb3f 	bl	80066a4 <sulp>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800702e:	f7f9 f943 	bl	80002b8 <__aeabi_dsub>
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	4682      	mov	sl, r0
 8007038:	468b      	mov	fp, r1
 800703a:	f7f9 fd5d 	bl	8000af8 <__aeabi_dcmpeq>
 800703e:	2800      	cmp	r0, #0
 8007040:	d0c1      	beq.n	8006fc6 <_strtod_l+0x8e6>
 8007042:	e60e      	b.n	8006c62 <_strtod_l+0x582>
 8007044:	fffffc02 	.word	0xfffffc02
 8007048:	7ff00000 	.word	0x7ff00000
 800704c:	39500000 	.word	0x39500000
 8007050:	000fffff 	.word	0x000fffff
 8007054:	7fefffff 	.word	0x7fefffff
 8007058:	0800a488 	.word	0x0800a488
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	f002 f83a 	bl	80090d8 <__ratio>
 8007064:	ec59 8b10 	vmov	r8, r9, d0
 8007068:	ee10 0a10 	vmov	r0, s0
 800706c:	2200      	movs	r2, #0
 800706e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007072:	4649      	mov	r1, r9
 8007074:	f7f9 fd54 	bl	8000b20 <__aeabi_dcmple>
 8007078:	2800      	cmp	r0, #0
 800707a:	d07c      	beq.n	8007176 <_strtod_l+0xa96>
 800707c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d04c      	beq.n	800711c <_strtod_l+0xa3c>
 8007082:	4b95      	ldr	r3, [pc, #596]	; (80072d8 <_strtod_l+0xbf8>)
 8007084:	2200      	movs	r2, #0
 8007086:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800708a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80072d8 <_strtod_l+0xbf8>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	4b92      	ldr	r3, [pc, #584]	; (80072dc <_strtod_l+0xbfc>)
 8007094:	403b      	ands	r3, r7
 8007096:	9311      	str	r3, [sp, #68]	; 0x44
 8007098:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800709a:	4b91      	ldr	r3, [pc, #580]	; (80072e0 <_strtod_l+0xc00>)
 800709c:	429a      	cmp	r2, r3
 800709e:	f040 80b2 	bne.w	8007206 <_strtod_l+0xb26>
 80070a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80070ae:	ec4b ab10 	vmov	d0, sl, fp
 80070b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80070b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80070ba:	f001 ff35 	bl	8008f28 <__ulp>
 80070be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070c2:	ec53 2b10 	vmov	r2, r3, d0
 80070c6:	f7f9 faaf 	bl	8000628 <__aeabi_dmul>
 80070ca:	4652      	mov	r2, sl
 80070cc:	465b      	mov	r3, fp
 80070ce:	f7f9 f8f5 	bl	80002bc <__adddf3>
 80070d2:	460b      	mov	r3, r1
 80070d4:	4981      	ldr	r1, [pc, #516]	; (80072dc <_strtod_l+0xbfc>)
 80070d6:	4a83      	ldr	r2, [pc, #524]	; (80072e4 <_strtod_l+0xc04>)
 80070d8:	4019      	ands	r1, r3
 80070da:	4291      	cmp	r1, r2
 80070dc:	4682      	mov	sl, r0
 80070de:	d95e      	bls.n	800719e <_strtod_l+0xabe>
 80070e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d103      	bne.n	80070f2 <_strtod_l+0xa12>
 80070ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ec:	3301      	adds	r3, #1
 80070ee:	f43f ad43 	beq.w	8006b78 <_strtod_l+0x498>
 80070f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80072f0 <_strtod_l+0xc10>
 80070f6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80070fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070fc:	4620      	mov	r0, r4
 80070fe:	f001 fbe7 	bl	80088d0 <_Bfree>
 8007102:	9907      	ldr	r1, [sp, #28]
 8007104:	4620      	mov	r0, r4
 8007106:	f001 fbe3 	bl	80088d0 <_Bfree>
 800710a:	4631      	mov	r1, r6
 800710c:	4620      	mov	r0, r4
 800710e:	f001 fbdf 	bl	80088d0 <_Bfree>
 8007112:	4629      	mov	r1, r5
 8007114:	4620      	mov	r0, r4
 8007116:	f001 fbdb 	bl	80088d0 <_Bfree>
 800711a:	e613      	b.n	8006d44 <_strtod_l+0x664>
 800711c:	f1ba 0f00 	cmp.w	sl, #0
 8007120:	d11b      	bne.n	800715a <_strtod_l+0xa7a>
 8007122:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007126:	b9f3      	cbnz	r3, 8007166 <_strtod_l+0xa86>
 8007128:	4b6b      	ldr	r3, [pc, #428]	; (80072d8 <_strtod_l+0xbf8>)
 800712a:	2200      	movs	r2, #0
 800712c:	4640      	mov	r0, r8
 800712e:	4649      	mov	r1, r9
 8007130:	f7f9 fcec 	bl	8000b0c <__aeabi_dcmplt>
 8007134:	b9d0      	cbnz	r0, 800716c <_strtod_l+0xa8c>
 8007136:	4640      	mov	r0, r8
 8007138:	4649      	mov	r1, r9
 800713a:	4b6b      	ldr	r3, [pc, #428]	; (80072e8 <_strtod_l+0xc08>)
 800713c:	2200      	movs	r2, #0
 800713e:	f7f9 fa73 	bl	8000628 <__aeabi_dmul>
 8007142:	4680      	mov	r8, r0
 8007144:	4689      	mov	r9, r1
 8007146:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800714a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800714e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007150:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007154:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007158:	e79b      	b.n	8007092 <_strtod_l+0x9b2>
 800715a:	f1ba 0f01 	cmp.w	sl, #1
 800715e:	d102      	bne.n	8007166 <_strtod_l+0xa86>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f43f ad7e 	beq.w	8006c62 <_strtod_l+0x582>
 8007166:	4b61      	ldr	r3, [pc, #388]	; (80072ec <_strtod_l+0xc0c>)
 8007168:	2200      	movs	r2, #0
 800716a:	e78c      	b.n	8007086 <_strtod_l+0x9a6>
 800716c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80072e8 <_strtod_l+0xc08>
 8007170:	f04f 0800 	mov.w	r8, #0
 8007174:	e7e7      	b.n	8007146 <_strtod_l+0xa66>
 8007176:	4b5c      	ldr	r3, [pc, #368]	; (80072e8 <_strtod_l+0xc08>)
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	2200      	movs	r2, #0
 800717e:	f7f9 fa53 	bl	8000628 <__aeabi_dmul>
 8007182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007184:	4680      	mov	r8, r0
 8007186:	4689      	mov	r9, r1
 8007188:	b933      	cbnz	r3, 8007198 <_strtod_l+0xab8>
 800718a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800718e:	9012      	str	r0, [sp, #72]	; 0x48
 8007190:	9313      	str	r3, [sp, #76]	; 0x4c
 8007192:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007196:	e7dd      	b.n	8007154 <_strtod_l+0xa74>
 8007198:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800719c:	e7f9      	b.n	8007192 <_strtod_l+0xab2>
 800719e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80071a2:	9b04      	ldr	r3, [sp, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1a8      	bne.n	80070fa <_strtod_l+0xa1a>
 80071a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071ae:	0d1b      	lsrs	r3, r3, #20
 80071b0:	051b      	lsls	r3, r3, #20
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d1a1      	bne.n	80070fa <_strtod_l+0xa1a>
 80071b6:	4640      	mov	r0, r8
 80071b8:	4649      	mov	r1, r9
 80071ba:	f7f9 fd95 	bl	8000ce8 <__aeabi_d2lz>
 80071be:	f7f9 fa05 	bl	80005cc <__aeabi_l2d>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 f875 	bl	80002b8 <__aeabi_dsub>
 80071ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071d4:	ea43 030a 	orr.w	r3, r3, sl
 80071d8:	4313      	orrs	r3, r2
 80071da:	4680      	mov	r8, r0
 80071dc:	4689      	mov	r9, r1
 80071de:	d053      	beq.n	8007288 <_strtod_l+0xba8>
 80071e0:	a335      	add	r3, pc, #212	; (adr r3, 80072b8 <_strtod_l+0xbd8>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f9 fc91 	bl	8000b0c <__aeabi_dcmplt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f47f acce 	bne.w	8006b8c <_strtod_l+0x4ac>
 80071f0:	a333      	add	r3, pc, #204	; (adr r3, 80072c0 <_strtod_l+0xbe0>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 fca5 	bl	8000b48 <__aeabi_dcmpgt>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f af7b 	beq.w	80070fa <_strtod_l+0xa1a>
 8007204:	e4c2      	b.n	8006b8c <_strtod_l+0x4ac>
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	b333      	cbz	r3, 8007258 <_strtod_l+0xb78>
 800720a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800720c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007210:	d822      	bhi.n	8007258 <_strtod_l+0xb78>
 8007212:	a32d      	add	r3, pc, #180	; (adr r3, 80072c8 <_strtod_l+0xbe8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	4640      	mov	r0, r8
 800721a:	4649      	mov	r1, r9
 800721c:	f7f9 fc80 	bl	8000b20 <__aeabi_dcmple>
 8007220:	b1a0      	cbz	r0, 800724c <_strtod_l+0xb6c>
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	f7f9 fcd7 	bl	8000bd8 <__aeabi_d2uiz>
 800722a:	2801      	cmp	r0, #1
 800722c:	bf38      	it	cc
 800722e:	2001      	movcc	r0, #1
 8007230:	f7f9 f980 	bl	8000534 <__aeabi_ui2d>
 8007234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007236:	4680      	mov	r8, r0
 8007238:	4689      	mov	r9, r1
 800723a:	bb13      	cbnz	r3, 8007282 <_strtod_l+0xba2>
 800723c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007240:	9014      	str	r0, [sp, #80]	; 0x50
 8007242:	9315      	str	r3, [sp, #84]	; 0x54
 8007244:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007248:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800724c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800724e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007250:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	930d      	str	r3, [sp, #52]	; 0x34
 8007258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800725c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007260:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007264:	f001 fe60 	bl	8008f28 <__ulp>
 8007268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800726c:	ec53 2b10 	vmov	r2, r3, d0
 8007270:	f7f9 f9da 	bl	8000628 <__aeabi_dmul>
 8007274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007278:	f7f9 f820 	bl	80002bc <__adddf3>
 800727c:	4682      	mov	sl, r0
 800727e:	468b      	mov	fp, r1
 8007280:	e78f      	b.n	80071a2 <_strtod_l+0xac2>
 8007282:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007286:	e7dd      	b.n	8007244 <_strtod_l+0xb64>
 8007288:	a311      	add	r3, pc, #68	; (adr r3, 80072d0 <_strtod_l+0xbf0>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f9 fc3d 	bl	8000b0c <__aeabi_dcmplt>
 8007292:	e7b4      	b.n	80071fe <_strtod_l+0xb1e>
 8007294:	2300      	movs	r3, #0
 8007296:	930e      	str	r3, [sp, #56]	; 0x38
 8007298:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800729a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	f7ff ba65 	b.w	800676c <_strtod_l+0x8c>
 80072a2:	2b65      	cmp	r3, #101	; 0x65
 80072a4:	f43f ab5d 	beq.w	8006962 <_strtod_l+0x282>
 80072a8:	2b45      	cmp	r3, #69	; 0x45
 80072aa:	f43f ab5a 	beq.w	8006962 <_strtod_l+0x282>
 80072ae:	2201      	movs	r2, #1
 80072b0:	f7ff bb92 	b.w	80069d8 <_strtod_l+0x2f8>
 80072b4:	f3af 8000 	nop.w
 80072b8:	94a03595 	.word	0x94a03595
 80072bc:	3fdfffff 	.word	0x3fdfffff
 80072c0:	35afe535 	.word	0x35afe535
 80072c4:	3fe00000 	.word	0x3fe00000
 80072c8:	ffc00000 	.word	0xffc00000
 80072cc:	41dfffff 	.word	0x41dfffff
 80072d0:	94a03595 	.word	0x94a03595
 80072d4:	3fcfffff 	.word	0x3fcfffff
 80072d8:	3ff00000 	.word	0x3ff00000
 80072dc:	7ff00000 	.word	0x7ff00000
 80072e0:	7fe00000 	.word	0x7fe00000
 80072e4:	7c9fffff 	.word	0x7c9fffff
 80072e8:	3fe00000 	.word	0x3fe00000
 80072ec:	bff00000 	.word	0xbff00000
 80072f0:	7fefffff 	.word	0x7fefffff

080072f4 <strtod>:
 80072f4:	460a      	mov	r2, r1
 80072f6:	4601      	mov	r1, r0
 80072f8:	4802      	ldr	r0, [pc, #8]	; (8007304 <strtod+0x10>)
 80072fa:	4b03      	ldr	r3, [pc, #12]	; (8007308 <strtod+0x14>)
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	f7ff b9ef 	b.w	80066e0 <_strtod_l>
 8007302:	bf00      	nop
 8007304:	20000010 	.word	0x20000010
 8007308:	20000078 	.word	0x20000078

0800730c <_strtol_l.isra.0>:
 800730c:	2b01      	cmp	r3, #1
 800730e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007312:	d001      	beq.n	8007318 <_strtol_l.isra.0+0xc>
 8007314:	2b24      	cmp	r3, #36	; 0x24
 8007316:	d906      	bls.n	8007326 <_strtol_l.isra.0+0x1a>
 8007318:	f7fe fcee 	bl	8005cf8 <__errno>
 800731c:	2316      	movs	r3, #22
 800731e:	6003      	str	r3, [r0, #0]
 8007320:	2000      	movs	r0, #0
 8007322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007326:	4f3a      	ldr	r7, [pc, #232]	; (8007410 <_strtol_l.isra.0+0x104>)
 8007328:	468e      	mov	lr, r1
 800732a:	4676      	mov	r6, lr
 800732c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007330:	5de5      	ldrb	r5, [r4, r7]
 8007332:	f015 0508 	ands.w	r5, r5, #8
 8007336:	d1f8      	bne.n	800732a <_strtol_l.isra.0+0x1e>
 8007338:	2c2d      	cmp	r4, #45	; 0x2d
 800733a:	d134      	bne.n	80073a6 <_strtol_l.isra.0+0x9a>
 800733c:	f89e 4000 	ldrb.w	r4, [lr]
 8007340:	f04f 0801 	mov.w	r8, #1
 8007344:	f106 0e02 	add.w	lr, r6, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d05c      	beq.n	8007406 <_strtol_l.isra.0+0xfa>
 800734c:	2b10      	cmp	r3, #16
 800734e:	d10c      	bne.n	800736a <_strtol_l.isra.0+0x5e>
 8007350:	2c30      	cmp	r4, #48	; 0x30
 8007352:	d10a      	bne.n	800736a <_strtol_l.isra.0+0x5e>
 8007354:	f89e 4000 	ldrb.w	r4, [lr]
 8007358:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800735c:	2c58      	cmp	r4, #88	; 0x58
 800735e:	d14d      	bne.n	80073fc <_strtol_l.isra.0+0xf0>
 8007360:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007364:	2310      	movs	r3, #16
 8007366:	f10e 0e02 	add.w	lr, lr, #2
 800736a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800736e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007372:	2600      	movs	r6, #0
 8007374:	fbbc f9f3 	udiv	r9, ip, r3
 8007378:	4635      	mov	r5, r6
 800737a:	fb03 ca19 	mls	sl, r3, r9, ip
 800737e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007382:	2f09      	cmp	r7, #9
 8007384:	d818      	bhi.n	80073b8 <_strtol_l.isra.0+0xac>
 8007386:	463c      	mov	r4, r7
 8007388:	42a3      	cmp	r3, r4
 800738a:	dd24      	ble.n	80073d6 <_strtol_l.isra.0+0xca>
 800738c:	2e00      	cmp	r6, #0
 800738e:	db1f      	blt.n	80073d0 <_strtol_l.isra.0+0xc4>
 8007390:	45a9      	cmp	r9, r5
 8007392:	d31d      	bcc.n	80073d0 <_strtol_l.isra.0+0xc4>
 8007394:	d101      	bne.n	800739a <_strtol_l.isra.0+0x8e>
 8007396:	45a2      	cmp	sl, r4
 8007398:	db1a      	blt.n	80073d0 <_strtol_l.isra.0+0xc4>
 800739a:	fb05 4503 	mla	r5, r5, r3, r4
 800739e:	2601      	movs	r6, #1
 80073a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80073a4:	e7eb      	b.n	800737e <_strtol_l.isra.0+0x72>
 80073a6:	2c2b      	cmp	r4, #43	; 0x2b
 80073a8:	bf08      	it	eq
 80073aa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80073ae:	46a8      	mov	r8, r5
 80073b0:	bf08      	it	eq
 80073b2:	f106 0e02 	addeq.w	lr, r6, #2
 80073b6:	e7c7      	b.n	8007348 <_strtol_l.isra.0+0x3c>
 80073b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80073bc:	2f19      	cmp	r7, #25
 80073be:	d801      	bhi.n	80073c4 <_strtol_l.isra.0+0xb8>
 80073c0:	3c37      	subs	r4, #55	; 0x37
 80073c2:	e7e1      	b.n	8007388 <_strtol_l.isra.0+0x7c>
 80073c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80073c8:	2f19      	cmp	r7, #25
 80073ca:	d804      	bhi.n	80073d6 <_strtol_l.isra.0+0xca>
 80073cc:	3c57      	subs	r4, #87	; 0x57
 80073ce:	e7db      	b.n	8007388 <_strtol_l.isra.0+0x7c>
 80073d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80073d4:	e7e4      	b.n	80073a0 <_strtol_l.isra.0+0x94>
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	da05      	bge.n	80073e6 <_strtol_l.isra.0+0xda>
 80073da:	2322      	movs	r3, #34	; 0x22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	4665      	mov	r5, ip
 80073e0:	b942      	cbnz	r2, 80073f4 <_strtol_l.isra.0+0xe8>
 80073e2:	4628      	mov	r0, r5
 80073e4:	e79d      	b.n	8007322 <_strtol_l.isra.0+0x16>
 80073e6:	f1b8 0f00 	cmp.w	r8, #0
 80073ea:	d000      	beq.n	80073ee <_strtol_l.isra.0+0xe2>
 80073ec:	426d      	negs	r5, r5
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	d0f7      	beq.n	80073e2 <_strtol_l.isra.0+0xd6>
 80073f2:	b10e      	cbz	r6, 80073f8 <_strtol_l.isra.0+0xec>
 80073f4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80073f8:	6011      	str	r1, [r2, #0]
 80073fa:	e7f2      	b.n	80073e2 <_strtol_l.isra.0+0xd6>
 80073fc:	2430      	movs	r4, #48	; 0x30
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1b3      	bne.n	800736a <_strtol_l.isra.0+0x5e>
 8007402:	2308      	movs	r3, #8
 8007404:	e7b1      	b.n	800736a <_strtol_l.isra.0+0x5e>
 8007406:	2c30      	cmp	r4, #48	; 0x30
 8007408:	d0a4      	beq.n	8007354 <_strtol_l.isra.0+0x48>
 800740a:	230a      	movs	r3, #10
 800740c:	e7ad      	b.n	800736a <_strtol_l.isra.0+0x5e>
 800740e:	bf00      	nop
 8007410:	0800a4b1 	.word	0x0800a4b1

08007414 <strtol>:
 8007414:	4613      	mov	r3, r2
 8007416:	460a      	mov	r2, r1
 8007418:	4601      	mov	r1, r0
 800741a:	4802      	ldr	r0, [pc, #8]	; (8007424 <strtol+0x10>)
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f7ff bf75 	b.w	800730c <_strtol_l.isra.0>
 8007422:	bf00      	nop
 8007424:	20000010 	.word	0x20000010

08007428 <quorem>:
 8007428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	6903      	ldr	r3, [r0, #16]
 800742e:	690c      	ldr	r4, [r1, #16]
 8007430:	42a3      	cmp	r3, r4
 8007432:	4607      	mov	r7, r0
 8007434:	f2c0 8081 	blt.w	800753a <quorem+0x112>
 8007438:	3c01      	subs	r4, #1
 800743a:	f101 0814 	add.w	r8, r1, #20
 800743e:	f100 0514 	add.w	r5, r0, #20
 8007442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800744c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007450:	3301      	adds	r3, #1
 8007452:	429a      	cmp	r2, r3
 8007454:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800745c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007460:	d331      	bcc.n	80074c6 <quorem+0x9e>
 8007462:	f04f 0e00 	mov.w	lr, #0
 8007466:	4640      	mov	r0, r8
 8007468:	46ac      	mov	ip, r5
 800746a:	46f2      	mov	sl, lr
 800746c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007470:	b293      	uxth	r3, r2
 8007472:	fb06 e303 	mla	r3, r6, r3, lr
 8007476:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800747a:	b29b      	uxth	r3, r3
 800747c:	ebaa 0303 	sub.w	r3, sl, r3
 8007480:	0c12      	lsrs	r2, r2, #16
 8007482:	f8dc a000 	ldr.w	sl, [ip]
 8007486:	fb06 e202 	mla	r2, r6, r2, lr
 800748a:	fa13 f38a 	uxtah	r3, r3, sl
 800748e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007492:	fa1f fa82 	uxth.w	sl, r2
 8007496:	f8dc 2000 	ldr.w	r2, [ip]
 800749a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800749e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a8:	4581      	cmp	r9, r0
 80074aa:	f84c 3b04 	str.w	r3, [ip], #4
 80074ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074b2:	d2db      	bcs.n	800746c <quorem+0x44>
 80074b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80074b8:	b92b      	cbnz	r3, 80074c6 <quorem+0x9e>
 80074ba:	9b01      	ldr	r3, [sp, #4]
 80074bc:	3b04      	subs	r3, #4
 80074be:	429d      	cmp	r5, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	d32e      	bcc.n	8007522 <quorem+0xfa>
 80074c4:	613c      	str	r4, [r7, #16]
 80074c6:	4638      	mov	r0, r7
 80074c8:	f001 fc8a 	bl	8008de0 <__mcmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	db24      	blt.n	800751a <quorem+0xf2>
 80074d0:	3601      	adds	r6, #1
 80074d2:	4628      	mov	r0, r5
 80074d4:	f04f 0c00 	mov.w	ip, #0
 80074d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80074dc:	f8d0 e000 	ldr.w	lr, [r0]
 80074e0:	b293      	uxth	r3, r2
 80074e2:	ebac 0303 	sub.w	r3, ip, r3
 80074e6:	0c12      	lsrs	r2, r2, #16
 80074e8:	fa13 f38e 	uxtah	r3, r3, lr
 80074ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074fa:	45c1      	cmp	r9, r8
 80074fc:	f840 3b04 	str.w	r3, [r0], #4
 8007500:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007504:	d2e8      	bcs.n	80074d8 <quorem+0xb0>
 8007506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800750a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800750e:	b922      	cbnz	r2, 800751a <quorem+0xf2>
 8007510:	3b04      	subs	r3, #4
 8007512:	429d      	cmp	r5, r3
 8007514:	461a      	mov	r2, r3
 8007516:	d30a      	bcc.n	800752e <quorem+0x106>
 8007518:	613c      	str	r4, [r7, #16]
 800751a:	4630      	mov	r0, r6
 800751c:	b003      	add	sp, #12
 800751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	3b04      	subs	r3, #4
 8007526:	2a00      	cmp	r2, #0
 8007528:	d1cc      	bne.n	80074c4 <quorem+0x9c>
 800752a:	3c01      	subs	r4, #1
 800752c:	e7c7      	b.n	80074be <quorem+0x96>
 800752e:	6812      	ldr	r2, [r2, #0]
 8007530:	3b04      	subs	r3, #4
 8007532:	2a00      	cmp	r2, #0
 8007534:	d1f0      	bne.n	8007518 <quorem+0xf0>
 8007536:	3c01      	subs	r4, #1
 8007538:	e7eb      	b.n	8007512 <quorem+0xea>
 800753a:	2000      	movs	r0, #0
 800753c:	e7ee      	b.n	800751c <quorem+0xf4>
	...

08007540 <_dtoa_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ed2d 8b02 	vpush	{d8}
 8007548:	ec57 6b10 	vmov	r6, r7, d0
 800754c:	b095      	sub	sp, #84	; 0x54
 800754e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007550:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007554:	9105      	str	r1, [sp, #20]
 8007556:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800755a:	4604      	mov	r4, r0
 800755c:	9209      	str	r2, [sp, #36]	; 0x24
 800755e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007560:	b975      	cbnz	r5, 8007580 <_dtoa_r+0x40>
 8007562:	2010      	movs	r0, #16
 8007564:	f001 f94c 	bl	8008800 <malloc>
 8007568:	4602      	mov	r2, r0
 800756a:	6260      	str	r0, [r4, #36]	; 0x24
 800756c:	b920      	cbnz	r0, 8007578 <_dtoa_r+0x38>
 800756e:	4bb2      	ldr	r3, [pc, #712]	; (8007838 <_dtoa_r+0x2f8>)
 8007570:	21ea      	movs	r1, #234	; 0xea
 8007572:	48b2      	ldr	r0, [pc, #712]	; (800783c <_dtoa_r+0x2fc>)
 8007574:	f002 f874 	bl	8009660 <__assert_func>
 8007578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800757c:	6005      	str	r5, [r0, #0]
 800757e:	60c5      	str	r5, [r0, #12]
 8007580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	b151      	cbz	r1, 800759c <_dtoa_r+0x5c>
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	604a      	str	r2, [r1, #4]
 800758a:	2301      	movs	r3, #1
 800758c:	4093      	lsls	r3, r2
 800758e:	608b      	str	r3, [r1, #8]
 8007590:	4620      	mov	r0, r4
 8007592:	f001 f99d 	bl	80088d0 <_Bfree>
 8007596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	1e3b      	subs	r3, r7, #0
 800759e:	bfb9      	ittee	lt
 80075a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80075a4:	9303      	strlt	r3, [sp, #12]
 80075a6:	2300      	movge	r3, #0
 80075a8:	f8c8 3000 	strge.w	r3, [r8]
 80075ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80075b0:	4ba3      	ldr	r3, [pc, #652]	; (8007840 <_dtoa_r+0x300>)
 80075b2:	bfbc      	itt	lt
 80075b4:	2201      	movlt	r2, #1
 80075b6:	f8c8 2000 	strlt.w	r2, [r8]
 80075ba:	ea33 0309 	bics.w	r3, r3, r9
 80075be:	d11b      	bne.n	80075f8 <_dtoa_r+0xb8>
 80075c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075cc:	4333      	orrs	r3, r6
 80075ce:	f000 857a 	beq.w	80080c6 <_dtoa_r+0xb86>
 80075d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d4:	b963      	cbnz	r3, 80075f0 <_dtoa_r+0xb0>
 80075d6:	4b9b      	ldr	r3, [pc, #620]	; (8007844 <_dtoa_r+0x304>)
 80075d8:	e024      	b.n	8007624 <_dtoa_r+0xe4>
 80075da:	4b9b      	ldr	r3, [pc, #620]	; (8007848 <_dtoa_r+0x308>)
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	3308      	adds	r3, #8
 80075e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	9800      	ldr	r0, [sp, #0]
 80075e6:	b015      	add	sp, #84	; 0x54
 80075e8:	ecbd 8b02 	vpop	{d8}
 80075ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f0:	4b94      	ldr	r3, [pc, #592]	; (8007844 <_dtoa_r+0x304>)
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	3303      	adds	r3, #3
 80075f6:	e7f3      	b.n	80075e0 <_dtoa_r+0xa0>
 80075f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	ec51 0b17 	vmov	r0, r1, d7
 8007602:	2300      	movs	r3, #0
 8007604:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007608:	f7f9 fa76 	bl	8000af8 <__aeabi_dcmpeq>
 800760c:	4680      	mov	r8, r0
 800760e:	b158      	cbz	r0, 8007628 <_dtoa_r+0xe8>
 8007610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007612:	2301      	movs	r3, #1
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8551 	beq.w	80080c0 <_dtoa_r+0xb80>
 800761e:	488b      	ldr	r0, [pc, #556]	; (800784c <_dtoa_r+0x30c>)
 8007620:	6018      	str	r0, [r3, #0]
 8007622:	1e43      	subs	r3, r0, #1
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	e7dd      	b.n	80075e4 <_dtoa_r+0xa4>
 8007628:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800762c:	aa12      	add	r2, sp, #72	; 0x48
 800762e:	a913      	add	r1, sp, #76	; 0x4c
 8007630:	4620      	mov	r0, r4
 8007632:	f001 fcf5 	bl	8009020 <__d2b>
 8007636:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800763a:	4683      	mov	fp, r0
 800763c:	2d00      	cmp	r5, #0
 800763e:	d07c      	beq.n	800773a <_dtoa_r+0x1fa>
 8007640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007642:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800764a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800764e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007652:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007656:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800765a:	4b7d      	ldr	r3, [pc, #500]	; (8007850 <_dtoa_r+0x310>)
 800765c:	2200      	movs	r2, #0
 800765e:	4630      	mov	r0, r6
 8007660:	4639      	mov	r1, r7
 8007662:	f7f8 fe29 	bl	80002b8 <__aeabi_dsub>
 8007666:	a36e      	add	r3, pc, #440	; (adr r3, 8007820 <_dtoa_r+0x2e0>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f8 ffdc 	bl	8000628 <__aeabi_dmul>
 8007670:	a36d      	add	r3, pc, #436	; (adr r3, 8007828 <_dtoa_r+0x2e8>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f7f8 fe21 	bl	80002bc <__adddf3>
 800767a:	4606      	mov	r6, r0
 800767c:	4628      	mov	r0, r5
 800767e:	460f      	mov	r7, r1
 8007680:	f7f8 ff68 	bl	8000554 <__aeabi_i2d>
 8007684:	a36a      	add	r3, pc, #424	; (adr r3, 8007830 <_dtoa_r+0x2f0>)
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	f7f8 ffcd 	bl	8000628 <__aeabi_dmul>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4630      	mov	r0, r6
 8007694:	4639      	mov	r1, r7
 8007696:	f7f8 fe11 	bl	80002bc <__adddf3>
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	f7f9 fa73 	bl	8000b88 <__aeabi_d2iz>
 80076a2:	2200      	movs	r2, #0
 80076a4:	4682      	mov	sl, r0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	f7f9 fa2e 	bl	8000b0c <__aeabi_dcmplt>
 80076b0:	b148      	cbz	r0, 80076c6 <_dtoa_r+0x186>
 80076b2:	4650      	mov	r0, sl
 80076b4:	f7f8 ff4e 	bl	8000554 <__aeabi_i2d>
 80076b8:	4632      	mov	r2, r6
 80076ba:	463b      	mov	r3, r7
 80076bc:	f7f9 fa1c 	bl	8000af8 <__aeabi_dcmpeq>
 80076c0:	b908      	cbnz	r0, 80076c6 <_dtoa_r+0x186>
 80076c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076c6:	f1ba 0f16 	cmp.w	sl, #22
 80076ca:	d854      	bhi.n	8007776 <_dtoa_r+0x236>
 80076cc:	4b61      	ldr	r3, [pc, #388]	; (8007854 <_dtoa_r+0x314>)
 80076ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076da:	f7f9 fa17 	bl	8000b0c <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d04b      	beq.n	800777a <_dtoa_r+0x23a>
 80076e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076e6:	2300      	movs	r3, #0
 80076e8:	930e      	str	r3, [sp, #56]	; 0x38
 80076ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ec:	1b5d      	subs	r5, r3, r5
 80076ee:	1e6b      	subs	r3, r5, #1
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	bf43      	ittte	mi
 80076f4:	2300      	movmi	r3, #0
 80076f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80076fa:	9304      	strmi	r3, [sp, #16]
 80076fc:	f04f 0800 	movpl.w	r8, #0
 8007700:	f1ba 0f00 	cmp.w	sl, #0
 8007704:	db3b      	blt.n	800777e <_dtoa_r+0x23e>
 8007706:	9b04      	ldr	r3, [sp, #16]
 8007708:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800770c:	4453      	add	r3, sl
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	2300      	movs	r3, #0
 8007712:	9306      	str	r3, [sp, #24]
 8007714:	9b05      	ldr	r3, [sp, #20]
 8007716:	2b09      	cmp	r3, #9
 8007718:	d869      	bhi.n	80077ee <_dtoa_r+0x2ae>
 800771a:	2b05      	cmp	r3, #5
 800771c:	bfc4      	itt	gt
 800771e:	3b04      	subgt	r3, #4
 8007720:	9305      	strgt	r3, [sp, #20]
 8007722:	9b05      	ldr	r3, [sp, #20]
 8007724:	f1a3 0302 	sub.w	r3, r3, #2
 8007728:	bfcc      	ite	gt
 800772a:	2500      	movgt	r5, #0
 800772c:	2501      	movle	r5, #1
 800772e:	2b03      	cmp	r3, #3
 8007730:	d869      	bhi.n	8007806 <_dtoa_r+0x2c6>
 8007732:	e8df f003 	tbb	[pc, r3]
 8007736:	4e2c      	.short	0x4e2c
 8007738:	5a4c      	.short	0x5a4c
 800773a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800773e:	441d      	add	r5, r3
 8007740:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007744:	2b20      	cmp	r3, #32
 8007746:	bfc1      	itttt	gt
 8007748:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800774c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007750:	fa09 f303 	lslgt.w	r3, r9, r3
 8007754:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007758:	bfda      	itte	le
 800775a:	f1c3 0320 	rsble	r3, r3, #32
 800775e:	fa06 f003 	lslle.w	r0, r6, r3
 8007762:	4318      	orrgt	r0, r3
 8007764:	f7f8 fee6 	bl	8000534 <__aeabi_ui2d>
 8007768:	2301      	movs	r3, #1
 800776a:	4606      	mov	r6, r0
 800776c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007770:	3d01      	subs	r5, #1
 8007772:	9310      	str	r3, [sp, #64]	; 0x40
 8007774:	e771      	b.n	800765a <_dtoa_r+0x11a>
 8007776:	2301      	movs	r3, #1
 8007778:	e7b6      	b.n	80076e8 <_dtoa_r+0x1a8>
 800777a:	900e      	str	r0, [sp, #56]	; 0x38
 800777c:	e7b5      	b.n	80076ea <_dtoa_r+0x1aa>
 800777e:	f1ca 0300 	rsb	r3, sl, #0
 8007782:	9306      	str	r3, [sp, #24]
 8007784:	2300      	movs	r3, #0
 8007786:	eba8 080a 	sub.w	r8, r8, sl
 800778a:	930d      	str	r3, [sp, #52]	; 0x34
 800778c:	e7c2      	b.n	8007714 <_dtoa_r+0x1d4>
 800778e:	2300      	movs	r3, #0
 8007790:	9308      	str	r3, [sp, #32]
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	dc39      	bgt.n	800780c <_dtoa_r+0x2cc>
 8007798:	f04f 0901 	mov.w	r9, #1
 800779c:	f8cd 9004 	str.w	r9, [sp, #4]
 80077a0:	464b      	mov	r3, r9
 80077a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80077a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077a8:	2200      	movs	r2, #0
 80077aa:	6042      	str	r2, [r0, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	f102 0614 	add.w	r6, r2, #20
 80077b2:	429e      	cmp	r6, r3
 80077b4:	6841      	ldr	r1, [r0, #4]
 80077b6:	d92f      	bls.n	8007818 <_dtoa_r+0x2d8>
 80077b8:	4620      	mov	r0, r4
 80077ba:	f001 f849 	bl	8008850 <_Balloc>
 80077be:	9000      	str	r0, [sp, #0]
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d14b      	bne.n	800785c <_dtoa_r+0x31c>
 80077c4:	4b24      	ldr	r3, [pc, #144]	; (8007858 <_dtoa_r+0x318>)
 80077c6:	4602      	mov	r2, r0
 80077c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077cc:	e6d1      	b.n	8007572 <_dtoa_r+0x32>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e7de      	b.n	8007790 <_dtoa_r+0x250>
 80077d2:	2300      	movs	r3, #0
 80077d4:	9308      	str	r3, [sp, #32]
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	eb0a 0903 	add.w	r9, sl, r3
 80077dc:	f109 0301 	add.w	r3, r9, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	bfb8      	it	lt
 80077e6:	2301      	movlt	r3, #1
 80077e8:	e7dd      	b.n	80077a6 <_dtoa_r+0x266>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7f2      	b.n	80077d4 <_dtoa_r+0x294>
 80077ee:	2501      	movs	r5, #1
 80077f0:	2300      	movs	r3, #0
 80077f2:	9305      	str	r3, [sp, #20]
 80077f4:	9508      	str	r5, [sp, #32]
 80077f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007800:	2312      	movs	r3, #18
 8007802:	9209      	str	r2, [sp, #36]	; 0x24
 8007804:	e7cf      	b.n	80077a6 <_dtoa_r+0x266>
 8007806:	2301      	movs	r3, #1
 8007808:	9308      	str	r3, [sp, #32]
 800780a:	e7f4      	b.n	80077f6 <_dtoa_r+0x2b6>
 800780c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007810:	f8cd 9004 	str.w	r9, [sp, #4]
 8007814:	464b      	mov	r3, r9
 8007816:	e7c6      	b.n	80077a6 <_dtoa_r+0x266>
 8007818:	3101      	adds	r1, #1
 800781a:	6041      	str	r1, [r0, #4]
 800781c:	0052      	lsls	r2, r2, #1
 800781e:	e7c6      	b.n	80077ae <_dtoa_r+0x26e>
 8007820:	636f4361 	.word	0x636f4361
 8007824:	3fd287a7 	.word	0x3fd287a7
 8007828:	8b60c8b3 	.word	0x8b60c8b3
 800782c:	3fc68a28 	.word	0x3fc68a28
 8007830:	509f79fb 	.word	0x509f79fb
 8007834:	3fd34413 	.word	0x3fd34413
 8007838:	0800a5be 	.word	0x0800a5be
 800783c:	0800a5d5 	.word	0x0800a5d5
 8007840:	7ff00000 	.word	0x7ff00000
 8007844:	0800a5ba 	.word	0x0800a5ba
 8007848:	0800a5b1 	.word	0x0800a5b1
 800784c:	0800a43d 	.word	0x0800a43d
 8007850:	3ff80000 	.word	0x3ff80000
 8007854:	0800a750 	.word	0x0800a750
 8007858:	0800a634 	.word	0x0800a634
 800785c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800785e:	9a00      	ldr	r2, [sp, #0]
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	9b01      	ldr	r3, [sp, #4]
 8007864:	2b0e      	cmp	r3, #14
 8007866:	f200 80ad 	bhi.w	80079c4 <_dtoa_r+0x484>
 800786a:	2d00      	cmp	r5, #0
 800786c:	f000 80aa 	beq.w	80079c4 <_dtoa_r+0x484>
 8007870:	f1ba 0f00 	cmp.w	sl, #0
 8007874:	dd36      	ble.n	80078e4 <_dtoa_r+0x3a4>
 8007876:	4ac3      	ldr	r2, [pc, #780]	; (8007b84 <_dtoa_r+0x644>)
 8007878:	f00a 030f 	and.w	r3, sl, #15
 800787c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007880:	ed93 7b00 	vldr	d7, [r3]
 8007884:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007888:	ea4f 172a 	mov.w	r7, sl, asr #4
 800788c:	eeb0 8a47 	vmov.f32	s16, s14
 8007890:	eef0 8a67 	vmov.f32	s17, s15
 8007894:	d016      	beq.n	80078c4 <_dtoa_r+0x384>
 8007896:	4bbc      	ldr	r3, [pc, #752]	; (8007b88 <_dtoa_r+0x648>)
 8007898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800789c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078a0:	f7f8 ffec 	bl	800087c <__aeabi_ddiv>
 80078a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a8:	f007 070f 	and.w	r7, r7, #15
 80078ac:	2503      	movs	r5, #3
 80078ae:	4eb6      	ldr	r6, [pc, #728]	; (8007b88 <_dtoa_r+0x648>)
 80078b0:	b957      	cbnz	r7, 80078c8 <_dtoa_r+0x388>
 80078b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b6:	ec53 2b18 	vmov	r2, r3, d8
 80078ba:	f7f8 ffdf 	bl	800087c <__aeabi_ddiv>
 80078be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078c2:	e029      	b.n	8007918 <_dtoa_r+0x3d8>
 80078c4:	2502      	movs	r5, #2
 80078c6:	e7f2      	b.n	80078ae <_dtoa_r+0x36e>
 80078c8:	07f9      	lsls	r1, r7, #31
 80078ca:	d508      	bpl.n	80078de <_dtoa_r+0x39e>
 80078cc:	ec51 0b18 	vmov	r0, r1, d8
 80078d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078d4:	f7f8 fea8 	bl	8000628 <__aeabi_dmul>
 80078d8:	ec41 0b18 	vmov	d8, r0, r1
 80078dc:	3501      	adds	r5, #1
 80078de:	107f      	asrs	r7, r7, #1
 80078e0:	3608      	adds	r6, #8
 80078e2:	e7e5      	b.n	80078b0 <_dtoa_r+0x370>
 80078e4:	f000 80a6 	beq.w	8007a34 <_dtoa_r+0x4f4>
 80078e8:	f1ca 0600 	rsb	r6, sl, #0
 80078ec:	4ba5      	ldr	r3, [pc, #660]	; (8007b84 <_dtoa_r+0x644>)
 80078ee:	4fa6      	ldr	r7, [pc, #664]	; (8007b88 <_dtoa_r+0x648>)
 80078f0:	f006 020f 	and.w	r2, r6, #15
 80078f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007900:	f7f8 fe92 	bl	8000628 <__aeabi_dmul>
 8007904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007908:	1136      	asrs	r6, r6, #4
 800790a:	2300      	movs	r3, #0
 800790c:	2502      	movs	r5, #2
 800790e:	2e00      	cmp	r6, #0
 8007910:	f040 8085 	bne.w	8007a1e <_dtoa_r+0x4de>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1d2      	bne.n	80078be <_dtoa_r+0x37e>
 8007918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 808c 	beq.w	8007a38 <_dtoa_r+0x4f8>
 8007920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007924:	4b99      	ldr	r3, [pc, #612]	; (8007b8c <_dtoa_r+0x64c>)
 8007926:	2200      	movs	r2, #0
 8007928:	4630      	mov	r0, r6
 800792a:	4639      	mov	r1, r7
 800792c:	f7f9 f8ee 	bl	8000b0c <__aeabi_dcmplt>
 8007930:	2800      	cmp	r0, #0
 8007932:	f000 8081 	beq.w	8007a38 <_dtoa_r+0x4f8>
 8007936:	9b01      	ldr	r3, [sp, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d07d      	beq.n	8007a38 <_dtoa_r+0x4f8>
 800793c:	f1b9 0f00 	cmp.w	r9, #0
 8007940:	dd3c      	ble.n	80079bc <_dtoa_r+0x47c>
 8007942:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	2200      	movs	r2, #0
 800794a:	4b91      	ldr	r3, [pc, #580]	; (8007b90 <_dtoa_r+0x650>)
 800794c:	4630      	mov	r0, r6
 800794e:	4639      	mov	r1, r7
 8007950:	f7f8 fe6a 	bl	8000628 <__aeabi_dmul>
 8007954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007958:	3501      	adds	r5, #1
 800795a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800795e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007962:	4628      	mov	r0, r5
 8007964:	f7f8 fdf6 	bl	8000554 <__aeabi_i2d>
 8007968:	4632      	mov	r2, r6
 800796a:	463b      	mov	r3, r7
 800796c:	f7f8 fe5c 	bl	8000628 <__aeabi_dmul>
 8007970:	4b88      	ldr	r3, [pc, #544]	; (8007b94 <_dtoa_r+0x654>)
 8007972:	2200      	movs	r2, #0
 8007974:	f7f8 fca2 	bl	80002bc <__adddf3>
 8007978:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800797c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007980:	9303      	str	r3, [sp, #12]
 8007982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007984:	2b00      	cmp	r3, #0
 8007986:	d15c      	bne.n	8007a42 <_dtoa_r+0x502>
 8007988:	4b83      	ldr	r3, [pc, #524]	; (8007b98 <_dtoa_r+0x658>)
 800798a:	2200      	movs	r2, #0
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f8 fc92 	bl	80002b8 <__aeabi_dsub>
 8007994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007998:	4606      	mov	r6, r0
 800799a:	460f      	mov	r7, r1
 800799c:	f7f9 f8d4 	bl	8000b48 <__aeabi_dcmpgt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f040 8296 	bne.w	8007ed2 <_dtoa_r+0x992>
 80079a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80079aa:	4630      	mov	r0, r6
 80079ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7f9 f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f040 8288 	bne.w	8007ecc <_dtoa_r+0x98c>
 80079bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f2c0 8158 	blt.w	8007c7c <_dtoa_r+0x73c>
 80079cc:	f1ba 0f0e 	cmp.w	sl, #14
 80079d0:	f300 8154 	bgt.w	8007c7c <_dtoa_r+0x73c>
 80079d4:	4b6b      	ldr	r3, [pc, #428]	; (8007b84 <_dtoa_r+0x644>)
 80079d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f280 80e3 	bge.w	8007bac <_dtoa_r+0x66c>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f300 80df 	bgt.w	8007bac <_dtoa_r+0x66c>
 80079ee:	f040 826d 	bne.w	8007ecc <_dtoa_r+0x98c>
 80079f2:	4b69      	ldr	r3, [pc, #420]	; (8007b98 <_dtoa_r+0x658>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f8 fe15 	bl	8000628 <__aeabi_dmul>
 80079fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a02:	f7f9 f897 	bl	8000b34 <__aeabi_dcmpge>
 8007a06:	9e01      	ldr	r6, [sp, #4]
 8007a08:	4637      	mov	r7, r6
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f040 8243 	bne.w	8007e96 <_dtoa_r+0x956>
 8007a10:	9d00      	ldr	r5, [sp, #0]
 8007a12:	2331      	movs	r3, #49	; 0x31
 8007a14:	f805 3b01 	strb.w	r3, [r5], #1
 8007a18:	f10a 0a01 	add.w	sl, sl, #1
 8007a1c:	e23f      	b.n	8007e9e <_dtoa_r+0x95e>
 8007a1e:	07f2      	lsls	r2, r6, #31
 8007a20:	d505      	bpl.n	8007a2e <_dtoa_r+0x4ee>
 8007a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a26:	f7f8 fdff 	bl	8000628 <__aeabi_dmul>
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	1076      	asrs	r6, r6, #1
 8007a30:	3708      	adds	r7, #8
 8007a32:	e76c      	b.n	800790e <_dtoa_r+0x3ce>
 8007a34:	2502      	movs	r5, #2
 8007a36:	e76f      	b.n	8007918 <_dtoa_r+0x3d8>
 8007a38:	9b01      	ldr	r3, [sp, #4]
 8007a3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007a40:	e78d      	b.n	800795e <_dtoa_r+0x41e>
 8007a42:	9900      	ldr	r1, [sp, #0]
 8007a44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a48:	4b4e      	ldr	r3, [pc, #312]	; (8007b84 <_dtoa_r+0x644>)
 8007a4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a4e:	4401      	add	r1, r0
 8007a50:	9102      	str	r1, [sp, #8]
 8007a52:	9908      	ldr	r1, [sp, #32]
 8007a54:	eeb0 8a47 	vmov.f32	s16, s14
 8007a58:	eef0 8a67 	vmov.f32	s17, s15
 8007a5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d045      	beq.n	8007af4 <_dtoa_r+0x5b4>
 8007a68:	494c      	ldr	r1, [pc, #304]	; (8007b9c <_dtoa_r+0x65c>)
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	f7f8 ff06 	bl	800087c <__aeabi_ddiv>
 8007a70:	ec53 2b18 	vmov	r2, r3, d8
 8007a74:	f7f8 fc20 	bl	80002b8 <__aeabi_dsub>
 8007a78:	9d00      	ldr	r5, [sp, #0]
 8007a7a:	ec41 0b18 	vmov	d8, r0, r1
 8007a7e:	4639      	mov	r1, r7
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7f9 f881 	bl	8000b88 <__aeabi_d2iz>
 8007a86:	900c      	str	r0, [sp, #48]	; 0x30
 8007a88:	f7f8 fd64 	bl	8000554 <__aeabi_i2d>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f8 fc10 	bl	80002b8 <__aeabi_dsub>
 8007a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9a:	3330      	adds	r3, #48	; 0x30
 8007a9c:	f805 3b01 	strb.w	r3, [r5], #1
 8007aa0:	ec53 2b18 	vmov	r2, r3, d8
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	f7f9 f830 	bl	8000b0c <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d165      	bne.n	8007b7c <_dtoa_r+0x63c>
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	4935      	ldr	r1, [pc, #212]	; (8007b8c <_dtoa_r+0x64c>)
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	f7f8 fbfe 	bl	80002b8 <__aeabi_dsub>
 8007abc:	ec53 2b18 	vmov	r2, r3, d8
 8007ac0:	f7f9 f824 	bl	8000b0c <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f040 80b9 	bne.w	8007c3c <_dtoa_r+0x6fc>
 8007aca:	9b02      	ldr	r3, [sp, #8]
 8007acc:	429d      	cmp	r5, r3
 8007ace:	f43f af75 	beq.w	80079bc <_dtoa_r+0x47c>
 8007ad2:	4b2f      	ldr	r3, [pc, #188]	; (8007b90 <_dtoa_r+0x650>)
 8007ad4:	ec51 0b18 	vmov	r0, r1, d8
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f7f8 fda5 	bl	8000628 <__aeabi_dmul>
 8007ade:	4b2c      	ldr	r3, [pc, #176]	; (8007b90 <_dtoa_r+0x650>)
 8007ae0:	ec41 0b18 	vmov	d8, r0, r1
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f8 fd9d 	bl	8000628 <__aeabi_dmul>
 8007aee:	4606      	mov	r6, r0
 8007af0:	460f      	mov	r7, r1
 8007af2:	e7c4      	b.n	8007a7e <_dtoa_r+0x53e>
 8007af4:	ec51 0b17 	vmov	r0, r1, d7
 8007af8:	f7f8 fd96 	bl	8000628 <__aeabi_dmul>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	9d00      	ldr	r5, [sp, #0]
 8007b00:	930c      	str	r3, [sp, #48]	; 0x30
 8007b02:	ec41 0b18 	vmov	d8, r0, r1
 8007b06:	4639      	mov	r1, r7
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7f9 f83d 	bl	8000b88 <__aeabi_d2iz>
 8007b0e:	9011      	str	r0, [sp, #68]	; 0x44
 8007b10:	f7f8 fd20 	bl	8000554 <__aeabi_i2d>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	f7f8 fbcc 	bl	80002b8 <__aeabi_dsub>
 8007b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b22:	3330      	adds	r3, #48	; 0x30
 8007b24:	f805 3b01 	strb.w	r3, [r5], #1
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	460f      	mov	r7, r1
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	d134      	bne.n	8007ba0 <_dtoa_r+0x660>
 8007b36:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <_dtoa_r+0x65c>)
 8007b38:	ec51 0b18 	vmov	r0, r1, d8
 8007b3c:	f7f8 fbbe 	bl	80002bc <__adddf3>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4630      	mov	r0, r6
 8007b46:	4639      	mov	r1, r7
 8007b48:	f7f8 fffe 	bl	8000b48 <__aeabi_dcmpgt>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d175      	bne.n	8007c3c <_dtoa_r+0x6fc>
 8007b50:	ec53 2b18 	vmov	r2, r3, d8
 8007b54:	4911      	ldr	r1, [pc, #68]	; (8007b9c <_dtoa_r+0x65c>)
 8007b56:	2000      	movs	r0, #0
 8007b58:	f7f8 fbae 	bl	80002b8 <__aeabi_dsub>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 ffd2 	bl	8000b0c <__aeabi_dcmplt>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	f43f af27 	beq.w	80079bc <_dtoa_r+0x47c>
 8007b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b70:	1e6b      	subs	r3, r5, #1
 8007b72:	930c      	str	r3, [sp, #48]	; 0x30
 8007b74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b78:	2b30      	cmp	r3, #48	; 0x30
 8007b7a:	d0f8      	beq.n	8007b6e <_dtoa_r+0x62e>
 8007b7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b80:	e04a      	b.n	8007c18 <_dtoa_r+0x6d8>
 8007b82:	bf00      	nop
 8007b84:	0800a750 	.word	0x0800a750
 8007b88:	0800a728 	.word	0x0800a728
 8007b8c:	3ff00000 	.word	0x3ff00000
 8007b90:	40240000 	.word	0x40240000
 8007b94:	401c0000 	.word	0x401c0000
 8007b98:	40140000 	.word	0x40140000
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	4baf      	ldr	r3, [pc, #700]	; (8007e60 <_dtoa_r+0x920>)
 8007ba2:	f7f8 fd41 	bl	8000628 <__aeabi_dmul>
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	e7ac      	b.n	8007b06 <_dtoa_r+0x5c6>
 8007bac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bb0:	9d00      	ldr	r5, [sp, #0]
 8007bb2:	4642      	mov	r2, r8
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	f7f8 fe5f 	bl	800087c <__aeabi_ddiv>
 8007bbe:	f7f8 ffe3 	bl	8000b88 <__aeabi_d2iz>
 8007bc2:	9002      	str	r0, [sp, #8]
 8007bc4:	f7f8 fcc6 	bl	8000554 <__aeabi_i2d>
 8007bc8:	4642      	mov	r2, r8
 8007bca:	464b      	mov	r3, r9
 8007bcc:	f7f8 fd2c 	bl	8000628 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	f7f8 fb6e 	bl	80002b8 <__aeabi_dsub>
 8007bdc:	9e02      	ldr	r6, [sp, #8]
 8007bde:	9f01      	ldr	r7, [sp, #4]
 8007be0:	3630      	adds	r6, #48	; 0x30
 8007be2:	f805 6b01 	strb.w	r6, [r5], #1
 8007be6:	9e00      	ldr	r6, [sp, #0]
 8007be8:	1bae      	subs	r6, r5, r6
 8007bea:	42b7      	cmp	r7, r6
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	d137      	bne.n	8007c62 <_dtoa_r+0x722>
 8007bf2:	f7f8 fb63 	bl	80002bc <__adddf3>
 8007bf6:	4642      	mov	r2, r8
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	f7f8 ffa3 	bl	8000b48 <__aeabi_dcmpgt>
 8007c02:	b9c8      	cbnz	r0, 8007c38 <_dtoa_r+0x6f8>
 8007c04:	4642      	mov	r2, r8
 8007c06:	464b      	mov	r3, r9
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 ff74 	bl	8000af8 <__aeabi_dcmpeq>
 8007c10:	b110      	cbz	r0, 8007c18 <_dtoa_r+0x6d8>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	07d9      	lsls	r1, r3, #31
 8007c16:	d40f      	bmi.n	8007c38 <_dtoa_r+0x6f8>
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4659      	mov	r1, fp
 8007c1c:	f000 fe58 	bl	80088d0 <_Bfree>
 8007c20:	2300      	movs	r3, #0
 8007c22:	702b      	strb	r3, [r5, #0]
 8007c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c26:	f10a 0001 	add.w	r0, sl, #1
 8007c2a:	6018      	str	r0, [r3, #0]
 8007c2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f43f acd8 	beq.w	80075e4 <_dtoa_r+0xa4>
 8007c34:	601d      	str	r5, [r3, #0]
 8007c36:	e4d5      	b.n	80075e4 <_dtoa_r+0xa4>
 8007c38:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	461d      	mov	r5, r3
 8007c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c44:	2a39      	cmp	r2, #57	; 0x39
 8007c46:	d108      	bne.n	8007c5a <_dtoa_r+0x71a>
 8007c48:	9a00      	ldr	r2, [sp, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d1f7      	bne.n	8007c3e <_dtoa_r+0x6fe>
 8007c4e:	9a07      	ldr	r2, [sp, #28]
 8007c50:	9900      	ldr	r1, [sp, #0]
 8007c52:	3201      	adds	r2, #1
 8007c54:	9207      	str	r2, [sp, #28]
 8007c56:	2230      	movs	r2, #48	; 0x30
 8007c58:	700a      	strb	r2, [r1, #0]
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	3201      	adds	r2, #1
 8007c5e:	701a      	strb	r2, [r3, #0]
 8007c60:	e78c      	b.n	8007b7c <_dtoa_r+0x63c>
 8007c62:	4b7f      	ldr	r3, [pc, #508]	; (8007e60 <_dtoa_r+0x920>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	f7f8 fcdf 	bl	8000628 <__aeabi_dmul>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4606      	mov	r6, r0
 8007c70:	460f      	mov	r7, r1
 8007c72:	f7f8 ff41 	bl	8000af8 <__aeabi_dcmpeq>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d09b      	beq.n	8007bb2 <_dtoa_r+0x672>
 8007c7a:	e7cd      	b.n	8007c18 <_dtoa_r+0x6d8>
 8007c7c:	9a08      	ldr	r2, [sp, #32]
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	f000 80c4 	beq.w	8007e0c <_dtoa_r+0x8cc>
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	2a01      	cmp	r2, #1
 8007c88:	f300 80a8 	bgt.w	8007ddc <_dtoa_r+0x89c>
 8007c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	f000 80a0 	beq.w	8007dd4 <_dtoa_r+0x894>
 8007c94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c98:	9e06      	ldr	r6, [sp, #24]
 8007c9a:	4645      	mov	r5, r8
 8007c9c:	9a04      	ldr	r2, [sp, #16]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	441a      	add	r2, r3
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4498      	add	r8, r3
 8007ca6:	9204      	str	r2, [sp, #16]
 8007ca8:	f000 ff18 	bl	8008adc <__i2b>
 8007cac:	4607      	mov	r7, r0
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	dd0b      	ble.n	8007cca <_dtoa_r+0x78a>
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd08      	ble.n	8007cca <_dtoa_r+0x78a>
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	bfa8      	it	ge
 8007cbe:	462b      	movge	r3, r5
 8007cc0:	eba8 0803 	sub.w	r8, r8, r3
 8007cc4:	1aed      	subs	r5, r5, r3
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9b06      	ldr	r3, [sp, #24]
 8007ccc:	b1fb      	cbz	r3, 8007d0e <_dtoa_r+0x7ce>
 8007cce:	9b08      	ldr	r3, [sp, #32]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 809f 	beq.w	8007e14 <_dtoa_r+0x8d4>
 8007cd6:	2e00      	cmp	r6, #0
 8007cd8:	dd11      	ble.n	8007cfe <_dtoa_r+0x7be>
 8007cda:	4639      	mov	r1, r7
 8007cdc:	4632      	mov	r2, r6
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 ffb8 	bl	8008c54 <__pow5mult>
 8007ce4:	465a      	mov	r2, fp
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	4607      	mov	r7, r0
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 ff0c 	bl	8008b08 <__multiply>
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	9007      	str	r0, [sp, #28]
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fdeb 	bl	80088d0 <_Bfree>
 8007cfa:	9b07      	ldr	r3, [sp, #28]
 8007cfc:	469b      	mov	fp, r3
 8007cfe:	9b06      	ldr	r3, [sp, #24]
 8007d00:	1b9a      	subs	r2, r3, r6
 8007d02:	d004      	beq.n	8007d0e <_dtoa_r+0x7ce>
 8007d04:	4659      	mov	r1, fp
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 ffa4 	bl	8008c54 <__pow5mult>
 8007d0c:	4683      	mov	fp, r0
 8007d0e:	2101      	movs	r1, #1
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fee3 	bl	8008adc <__i2b>
 8007d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	dd7c      	ble.n	8007e18 <_dtoa_r+0x8d8>
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4601      	mov	r1, r0
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 ff96 	bl	8008c54 <__pow5mult>
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	dd76      	ble.n	8007e1e <_dtoa_r+0x8de>
 8007d30:	2300      	movs	r3, #0
 8007d32:	9306      	str	r3, [sp, #24]
 8007d34:	6933      	ldr	r3, [r6, #16]
 8007d36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d3a:	6918      	ldr	r0, [r3, #16]
 8007d3c:	f000 fe7e 	bl	8008a3c <__hi0bits>
 8007d40:	f1c0 0020 	rsb	r0, r0, #32
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	4418      	add	r0, r3
 8007d48:	f010 001f 	ands.w	r0, r0, #31
 8007d4c:	f000 8086 	beq.w	8007e5c <_dtoa_r+0x91c>
 8007d50:	f1c0 0320 	rsb	r3, r0, #32
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	dd7f      	ble.n	8007e58 <_dtoa_r+0x918>
 8007d58:	f1c0 001c 	rsb	r0, r0, #28
 8007d5c:	9b04      	ldr	r3, [sp, #16]
 8007d5e:	4403      	add	r3, r0
 8007d60:	4480      	add	r8, r0
 8007d62:	4405      	add	r5, r0
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	f1b8 0f00 	cmp.w	r8, #0
 8007d6a:	dd05      	ble.n	8007d78 <_dtoa_r+0x838>
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	4642      	mov	r2, r8
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 ffc9 	bl	8008d08 <__lshift>
 8007d76:	4683      	mov	fp, r0
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dd05      	ble.n	8007d8a <_dtoa_r+0x84a>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	461a      	mov	r2, r3
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 ffc0 	bl	8008d08 <__lshift>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d069      	beq.n	8007e64 <_dtoa_r+0x924>
 8007d90:	4631      	mov	r1, r6
 8007d92:	4658      	mov	r0, fp
 8007d94:	f001 f824 	bl	8008de0 <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	da63      	bge.n	8007e64 <_dtoa_r+0x924>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4659      	mov	r1, fp
 8007da0:	220a      	movs	r2, #10
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 fdb6 	bl	8008914 <__multadd>
 8007da8:	9b08      	ldr	r3, [sp, #32]
 8007daa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007dae:	4683      	mov	fp, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 818f 	beq.w	80080d4 <_dtoa_r+0xb94>
 8007db6:	4639      	mov	r1, r7
 8007db8:	2300      	movs	r3, #0
 8007dba:	220a      	movs	r2, #10
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fda9 	bl	8008914 <__multadd>
 8007dc2:	f1b9 0f00 	cmp.w	r9, #0
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	f300 808e 	bgt.w	8007ee8 <_dtoa_r+0x9a8>
 8007dcc:	9b05      	ldr	r3, [sp, #20]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	dc50      	bgt.n	8007e74 <_dtoa_r+0x934>
 8007dd2:	e089      	b.n	8007ee8 <_dtoa_r+0x9a8>
 8007dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dda:	e75d      	b.n	8007c98 <_dtoa_r+0x758>
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	1e5e      	subs	r6, r3, #1
 8007de0:	9b06      	ldr	r3, [sp, #24]
 8007de2:	42b3      	cmp	r3, r6
 8007de4:	bfbf      	itttt	lt
 8007de6:	9b06      	ldrlt	r3, [sp, #24]
 8007de8:	9606      	strlt	r6, [sp, #24]
 8007dea:	1af2      	sublt	r2, r6, r3
 8007dec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007dee:	bfb6      	itet	lt
 8007df0:	189b      	addlt	r3, r3, r2
 8007df2:	1b9e      	subge	r6, r3, r6
 8007df4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	bfb8      	it	lt
 8007dfa:	2600      	movlt	r6, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfb5      	itete	lt
 8007e00:	eba8 0503 	sublt.w	r5, r8, r3
 8007e04:	9b01      	ldrge	r3, [sp, #4]
 8007e06:	2300      	movlt	r3, #0
 8007e08:	4645      	movge	r5, r8
 8007e0a:	e747      	b.n	8007c9c <_dtoa_r+0x75c>
 8007e0c:	9e06      	ldr	r6, [sp, #24]
 8007e0e:	9f08      	ldr	r7, [sp, #32]
 8007e10:	4645      	mov	r5, r8
 8007e12:	e74c      	b.n	8007cae <_dtoa_r+0x76e>
 8007e14:	9a06      	ldr	r2, [sp, #24]
 8007e16:	e775      	b.n	8007d04 <_dtoa_r+0x7c4>
 8007e18:	9b05      	ldr	r3, [sp, #20]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	dc18      	bgt.n	8007e50 <_dtoa_r+0x910>
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	b9b3      	cbnz	r3, 8007e50 <_dtoa_r+0x910>
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e28:	b9a3      	cbnz	r3, 8007e54 <_dtoa_r+0x914>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e30:	0d1b      	lsrs	r3, r3, #20
 8007e32:	051b      	lsls	r3, r3, #20
 8007e34:	b12b      	cbz	r3, 8007e42 <_dtoa_r+0x902>
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	f108 0801 	add.w	r8, r8, #1
 8007e40:	2301      	movs	r3, #1
 8007e42:	9306      	str	r3, [sp, #24]
 8007e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f47f af74 	bne.w	8007d34 <_dtoa_r+0x7f4>
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	e779      	b.n	8007d44 <_dtoa_r+0x804>
 8007e50:	2300      	movs	r3, #0
 8007e52:	e7f6      	b.n	8007e42 <_dtoa_r+0x902>
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	e7f4      	b.n	8007e42 <_dtoa_r+0x902>
 8007e58:	d085      	beq.n	8007d66 <_dtoa_r+0x826>
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	301c      	adds	r0, #28
 8007e5e:	e77d      	b.n	8007d5c <_dtoa_r+0x81c>
 8007e60:	40240000 	.word	0x40240000
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dc38      	bgt.n	8007edc <_dtoa_r+0x99c>
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	dd35      	ble.n	8007edc <_dtoa_r+0x99c>
 8007e70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007e74:	f1b9 0f00 	cmp.w	r9, #0
 8007e78:	d10d      	bne.n	8007e96 <_dtoa_r+0x956>
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	2205      	movs	r2, #5
 8007e80:	4620      	mov	r0, r4
 8007e82:	f000 fd47 	bl	8008914 <__multadd>
 8007e86:	4601      	mov	r1, r0
 8007e88:	4606      	mov	r6, r0
 8007e8a:	4658      	mov	r0, fp
 8007e8c:	f000 ffa8 	bl	8008de0 <__mcmp>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f73f adbd 	bgt.w	8007a10 <_dtoa_r+0x4d0>
 8007e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e98:	9d00      	ldr	r5, [sp, #0]
 8007e9a:	ea6f 0a03 	mvn.w	sl, r3
 8007e9e:	f04f 0800 	mov.w	r8, #0
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 fd13 	bl	80088d0 <_Bfree>
 8007eaa:	2f00      	cmp	r7, #0
 8007eac:	f43f aeb4 	beq.w	8007c18 <_dtoa_r+0x6d8>
 8007eb0:	f1b8 0f00 	cmp.w	r8, #0
 8007eb4:	d005      	beq.n	8007ec2 <_dtoa_r+0x982>
 8007eb6:	45b8      	cmp	r8, r7
 8007eb8:	d003      	beq.n	8007ec2 <_dtoa_r+0x982>
 8007eba:	4641      	mov	r1, r8
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fd07 	bl	80088d0 <_Bfree>
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 fd03 	bl	80088d0 <_Bfree>
 8007eca:	e6a5      	b.n	8007c18 <_dtoa_r+0x6d8>
 8007ecc:	2600      	movs	r6, #0
 8007ece:	4637      	mov	r7, r6
 8007ed0:	e7e1      	b.n	8007e96 <_dtoa_r+0x956>
 8007ed2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ed8:	4637      	mov	r7, r6
 8007eda:	e599      	b.n	8007a10 <_dtoa_r+0x4d0>
 8007edc:	9b08      	ldr	r3, [sp, #32]
 8007ede:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80fd 	beq.w	80080e2 <_dtoa_r+0xba2>
 8007ee8:	2d00      	cmp	r5, #0
 8007eea:	dd05      	ble.n	8007ef8 <_dtoa_r+0x9b8>
 8007eec:	4639      	mov	r1, r7
 8007eee:	462a      	mov	r2, r5
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 ff09 	bl	8008d08 <__lshift>
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d05c      	beq.n	8007fb8 <_dtoa_r+0xa78>
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fca5 	bl	8008850 <_Balloc>
 8007f06:	4605      	mov	r5, r0
 8007f08:	b928      	cbnz	r0, 8007f16 <_dtoa_r+0x9d6>
 8007f0a:	4b80      	ldr	r3, [pc, #512]	; (800810c <_dtoa_r+0xbcc>)
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f12:	f7ff bb2e 	b.w	8007572 <_dtoa_r+0x32>
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	3202      	adds	r2, #2
 8007f1a:	0092      	lsls	r2, r2, #2
 8007f1c:	f107 010c 	add.w	r1, r7, #12
 8007f20:	300c      	adds	r0, #12
 8007f22:	f000 fc87 	bl	8008834 <memcpy>
 8007f26:	2201      	movs	r2, #1
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 feec 	bl	8008d08 <__lshift>
 8007f30:	9b00      	ldr	r3, [sp, #0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	444b      	add	r3, r9
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	46b8      	mov	r8, r7
 8007f44:	9306      	str	r3, [sp, #24]
 8007f46:	4607      	mov	r7, r0
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4658      	mov	r0, fp
 8007f50:	9302      	str	r3, [sp, #8]
 8007f52:	f7ff fa69 	bl	8007428 <quorem>
 8007f56:	4603      	mov	r3, r0
 8007f58:	3330      	adds	r3, #48	; 0x30
 8007f5a:	9004      	str	r0, [sp, #16]
 8007f5c:	4641      	mov	r1, r8
 8007f5e:	4658      	mov	r0, fp
 8007f60:	9308      	str	r3, [sp, #32]
 8007f62:	f000 ff3d 	bl	8008de0 <__mcmp>
 8007f66:	463a      	mov	r2, r7
 8007f68:	4681      	mov	r9, r0
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 ff53 	bl	8008e18 <__mdiff>
 8007f72:	68c2      	ldr	r2, [r0, #12]
 8007f74:	9b08      	ldr	r3, [sp, #32]
 8007f76:	4605      	mov	r5, r0
 8007f78:	bb02      	cbnz	r2, 8007fbc <_dtoa_r+0xa7c>
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	4658      	mov	r0, fp
 8007f7e:	f000 ff2f 	bl	8008de0 <__mcmp>
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	4602      	mov	r2, r0
 8007f86:	4629      	mov	r1, r5
 8007f88:	4620      	mov	r0, r4
 8007f8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007f8e:	f000 fc9f 	bl	80088d0 <_Bfree>
 8007f92:	9b05      	ldr	r3, [sp, #20]
 8007f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f96:	9d01      	ldr	r5, [sp, #4]
 8007f98:	ea43 0102 	orr.w	r1, r3, r2
 8007f9c:	9b06      	ldr	r3, [sp, #24]
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	9b08      	ldr	r3, [sp, #32]
 8007fa2:	d10d      	bne.n	8007fc0 <_dtoa_r+0xa80>
 8007fa4:	2b39      	cmp	r3, #57	; 0x39
 8007fa6:	d029      	beq.n	8007ffc <_dtoa_r+0xabc>
 8007fa8:	f1b9 0f00 	cmp.w	r9, #0
 8007fac:	dd01      	ble.n	8007fb2 <_dtoa_r+0xa72>
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	3331      	adds	r3, #49	; 0x31
 8007fb2:	9a02      	ldr	r2, [sp, #8]
 8007fb4:	7013      	strb	r3, [r2, #0]
 8007fb6:	e774      	b.n	8007ea2 <_dtoa_r+0x962>
 8007fb8:	4638      	mov	r0, r7
 8007fba:	e7b9      	b.n	8007f30 <_dtoa_r+0x9f0>
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	e7e2      	b.n	8007f86 <_dtoa_r+0xa46>
 8007fc0:	f1b9 0f00 	cmp.w	r9, #0
 8007fc4:	db06      	blt.n	8007fd4 <_dtoa_r+0xa94>
 8007fc6:	9905      	ldr	r1, [sp, #20]
 8007fc8:	ea41 0909 	orr.w	r9, r1, r9
 8007fcc:	9906      	ldr	r1, [sp, #24]
 8007fce:	ea59 0101 	orrs.w	r1, r9, r1
 8007fd2:	d120      	bne.n	8008016 <_dtoa_r+0xad6>
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	ddec      	ble.n	8007fb2 <_dtoa_r+0xa72>
 8007fd8:	4659      	mov	r1, fp
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4620      	mov	r0, r4
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	f000 fe92 	bl	8008d08 <__lshift>
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4683      	mov	fp, r0
 8007fe8:	f000 fefa 	bl	8008de0 <__mcmp>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	dc02      	bgt.n	8007ff8 <_dtoa_r+0xab8>
 8007ff2:	d1de      	bne.n	8007fb2 <_dtoa_r+0xa72>
 8007ff4:	07da      	lsls	r2, r3, #31
 8007ff6:	d5dc      	bpl.n	8007fb2 <_dtoa_r+0xa72>
 8007ff8:	2b39      	cmp	r3, #57	; 0x39
 8007ffa:	d1d8      	bne.n	8007fae <_dtoa_r+0xa6e>
 8007ffc:	9a02      	ldr	r2, [sp, #8]
 8007ffe:	2339      	movs	r3, #57	; 0x39
 8008000:	7013      	strb	r3, [r2, #0]
 8008002:	462b      	mov	r3, r5
 8008004:	461d      	mov	r5, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800800c:	2a39      	cmp	r2, #57	; 0x39
 800800e:	d050      	beq.n	80080b2 <_dtoa_r+0xb72>
 8008010:	3201      	adds	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e745      	b.n	8007ea2 <_dtoa_r+0x962>
 8008016:	2a00      	cmp	r2, #0
 8008018:	dd03      	ble.n	8008022 <_dtoa_r+0xae2>
 800801a:	2b39      	cmp	r3, #57	; 0x39
 800801c:	d0ee      	beq.n	8007ffc <_dtoa_r+0xabc>
 800801e:	3301      	adds	r3, #1
 8008020:	e7c7      	b.n	8007fb2 <_dtoa_r+0xa72>
 8008022:	9a01      	ldr	r2, [sp, #4]
 8008024:	9907      	ldr	r1, [sp, #28]
 8008026:	f802 3c01 	strb.w	r3, [r2, #-1]
 800802a:	428a      	cmp	r2, r1
 800802c:	d02a      	beq.n	8008084 <_dtoa_r+0xb44>
 800802e:	4659      	mov	r1, fp
 8008030:	2300      	movs	r3, #0
 8008032:	220a      	movs	r2, #10
 8008034:	4620      	mov	r0, r4
 8008036:	f000 fc6d 	bl	8008914 <__multadd>
 800803a:	45b8      	cmp	r8, r7
 800803c:	4683      	mov	fp, r0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	f04f 020a 	mov.w	r2, #10
 8008046:	4641      	mov	r1, r8
 8008048:	4620      	mov	r0, r4
 800804a:	d107      	bne.n	800805c <_dtoa_r+0xb1c>
 800804c:	f000 fc62 	bl	8008914 <__multadd>
 8008050:	4680      	mov	r8, r0
 8008052:	4607      	mov	r7, r0
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	3301      	adds	r3, #1
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	e775      	b.n	8007f48 <_dtoa_r+0xa08>
 800805c:	f000 fc5a 	bl	8008914 <__multadd>
 8008060:	4639      	mov	r1, r7
 8008062:	4680      	mov	r8, r0
 8008064:	2300      	movs	r3, #0
 8008066:	220a      	movs	r2, #10
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fc53 	bl	8008914 <__multadd>
 800806e:	4607      	mov	r7, r0
 8008070:	e7f0      	b.n	8008054 <_dtoa_r+0xb14>
 8008072:	f1b9 0f00 	cmp.w	r9, #0
 8008076:	9a00      	ldr	r2, [sp, #0]
 8008078:	bfcc      	ite	gt
 800807a:	464d      	movgt	r5, r9
 800807c:	2501      	movle	r5, #1
 800807e:	4415      	add	r5, r2
 8008080:	f04f 0800 	mov.w	r8, #0
 8008084:	4659      	mov	r1, fp
 8008086:	2201      	movs	r2, #1
 8008088:	4620      	mov	r0, r4
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	f000 fe3c 	bl	8008d08 <__lshift>
 8008090:	4631      	mov	r1, r6
 8008092:	4683      	mov	fp, r0
 8008094:	f000 fea4 	bl	8008de0 <__mcmp>
 8008098:	2800      	cmp	r0, #0
 800809a:	dcb2      	bgt.n	8008002 <_dtoa_r+0xac2>
 800809c:	d102      	bne.n	80080a4 <_dtoa_r+0xb64>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	07db      	lsls	r3, r3, #31
 80080a2:	d4ae      	bmi.n	8008002 <_dtoa_r+0xac2>
 80080a4:	462b      	mov	r3, r5
 80080a6:	461d      	mov	r5, r3
 80080a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ac:	2a30      	cmp	r2, #48	; 0x30
 80080ae:	d0fa      	beq.n	80080a6 <_dtoa_r+0xb66>
 80080b0:	e6f7      	b.n	8007ea2 <_dtoa_r+0x962>
 80080b2:	9a00      	ldr	r2, [sp, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d1a5      	bne.n	8008004 <_dtoa_r+0xac4>
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	2331      	movs	r3, #49	; 0x31
 80080be:	e779      	b.n	8007fb4 <_dtoa_r+0xa74>
 80080c0:	4b13      	ldr	r3, [pc, #76]	; (8008110 <_dtoa_r+0xbd0>)
 80080c2:	f7ff baaf 	b.w	8007624 <_dtoa_r+0xe4>
 80080c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f47f aa86 	bne.w	80075da <_dtoa_r+0x9a>
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <_dtoa_r+0xbd4>)
 80080d0:	f7ff baa8 	b.w	8007624 <_dtoa_r+0xe4>
 80080d4:	f1b9 0f00 	cmp.w	r9, #0
 80080d8:	dc03      	bgt.n	80080e2 <_dtoa_r+0xba2>
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	f73f aec9 	bgt.w	8007e74 <_dtoa_r+0x934>
 80080e2:	9d00      	ldr	r5, [sp, #0]
 80080e4:	4631      	mov	r1, r6
 80080e6:	4658      	mov	r0, fp
 80080e8:	f7ff f99e 	bl	8007428 <quorem>
 80080ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80080f0:	f805 3b01 	strb.w	r3, [r5], #1
 80080f4:	9a00      	ldr	r2, [sp, #0]
 80080f6:	1aaa      	subs	r2, r5, r2
 80080f8:	4591      	cmp	r9, r2
 80080fa:	ddba      	ble.n	8008072 <_dtoa_r+0xb32>
 80080fc:	4659      	mov	r1, fp
 80080fe:	2300      	movs	r3, #0
 8008100:	220a      	movs	r2, #10
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fc06 	bl	8008914 <__multadd>
 8008108:	4683      	mov	fp, r0
 800810a:	e7eb      	b.n	80080e4 <_dtoa_r+0xba4>
 800810c:	0800a634 	.word	0x0800a634
 8008110:	0800a43c 	.word	0x0800a43c
 8008114:	0800a5b1 	.word	0x0800a5b1

08008118 <rshift>:
 8008118:	6903      	ldr	r3, [r0, #16]
 800811a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800811e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008122:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008126:	f100 0414 	add.w	r4, r0, #20
 800812a:	dd45      	ble.n	80081b8 <rshift+0xa0>
 800812c:	f011 011f 	ands.w	r1, r1, #31
 8008130:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008134:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008138:	d10c      	bne.n	8008154 <rshift+0x3c>
 800813a:	f100 0710 	add.w	r7, r0, #16
 800813e:	4629      	mov	r1, r5
 8008140:	42b1      	cmp	r1, r6
 8008142:	d334      	bcc.n	80081ae <rshift+0x96>
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	1eea      	subs	r2, r5, #3
 800814a:	4296      	cmp	r6, r2
 800814c:	bf38      	it	cc
 800814e:	2300      	movcc	r3, #0
 8008150:	4423      	add	r3, r4
 8008152:	e015      	b.n	8008180 <rshift+0x68>
 8008154:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008158:	f1c1 0820 	rsb	r8, r1, #32
 800815c:	40cf      	lsrs	r7, r1
 800815e:	f105 0e04 	add.w	lr, r5, #4
 8008162:	46a1      	mov	r9, r4
 8008164:	4576      	cmp	r6, lr
 8008166:	46f4      	mov	ip, lr
 8008168:	d815      	bhi.n	8008196 <rshift+0x7e>
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	009a      	lsls	r2, r3, #2
 800816e:	3a04      	subs	r2, #4
 8008170:	3501      	adds	r5, #1
 8008172:	42ae      	cmp	r6, r5
 8008174:	bf38      	it	cc
 8008176:	2200      	movcc	r2, #0
 8008178:	18a3      	adds	r3, r4, r2
 800817a:	50a7      	str	r7, [r4, r2]
 800817c:	b107      	cbz	r7, 8008180 <rshift+0x68>
 800817e:	3304      	adds	r3, #4
 8008180:	1b1a      	subs	r2, r3, r4
 8008182:	42a3      	cmp	r3, r4
 8008184:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008188:	bf08      	it	eq
 800818a:	2300      	moveq	r3, #0
 800818c:	6102      	str	r2, [r0, #16]
 800818e:	bf08      	it	eq
 8008190:	6143      	streq	r3, [r0, #20]
 8008192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008196:	f8dc c000 	ldr.w	ip, [ip]
 800819a:	fa0c fc08 	lsl.w	ip, ip, r8
 800819e:	ea4c 0707 	orr.w	r7, ip, r7
 80081a2:	f849 7b04 	str.w	r7, [r9], #4
 80081a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081aa:	40cf      	lsrs	r7, r1
 80081ac:	e7da      	b.n	8008164 <rshift+0x4c>
 80081ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80081b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80081b6:	e7c3      	b.n	8008140 <rshift+0x28>
 80081b8:	4623      	mov	r3, r4
 80081ba:	e7e1      	b.n	8008180 <rshift+0x68>

080081bc <__hexdig_fun>:
 80081bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081c0:	2b09      	cmp	r3, #9
 80081c2:	d802      	bhi.n	80081ca <__hexdig_fun+0xe>
 80081c4:	3820      	subs	r0, #32
 80081c6:	b2c0      	uxtb	r0, r0
 80081c8:	4770      	bx	lr
 80081ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	d801      	bhi.n	80081d6 <__hexdig_fun+0x1a>
 80081d2:	3847      	subs	r0, #71	; 0x47
 80081d4:	e7f7      	b.n	80081c6 <__hexdig_fun+0xa>
 80081d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d801      	bhi.n	80081e2 <__hexdig_fun+0x26>
 80081de:	3827      	subs	r0, #39	; 0x27
 80081e0:	e7f1      	b.n	80081c6 <__hexdig_fun+0xa>
 80081e2:	2000      	movs	r0, #0
 80081e4:	4770      	bx	lr
	...

080081e8 <__gethex>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	ed2d 8b02 	vpush	{d8}
 80081f0:	b089      	sub	sp, #36	; 0x24
 80081f2:	ee08 0a10 	vmov	s16, r0
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	4bbc      	ldr	r3, [pc, #752]	; (80084ec <__gethex+0x304>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	4618      	mov	r0, r3
 8008200:	468b      	mov	fp, r1
 8008202:	4690      	mov	r8, r2
 8008204:	f7f7 fff6 	bl	80001f4 <strlen>
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	f8db 2000 	ldr.w	r2, [fp]
 800820e:	4403      	add	r3, r0
 8008210:	4682      	mov	sl, r0
 8008212:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	1c93      	adds	r3, r2, #2
 800821a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800821e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008222:	32fe      	adds	r2, #254	; 0xfe
 8008224:	18d1      	adds	r1, r2, r3
 8008226:	461f      	mov	r7, r3
 8008228:	f813 0b01 	ldrb.w	r0, [r3], #1
 800822c:	9100      	str	r1, [sp, #0]
 800822e:	2830      	cmp	r0, #48	; 0x30
 8008230:	d0f8      	beq.n	8008224 <__gethex+0x3c>
 8008232:	f7ff ffc3 	bl	80081bc <__hexdig_fun>
 8008236:	4604      	mov	r4, r0
 8008238:	2800      	cmp	r0, #0
 800823a:	d13a      	bne.n	80082b2 <__gethex+0xca>
 800823c:	9901      	ldr	r1, [sp, #4]
 800823e:	4652      	mov	r2, sl
 8008240:	4638      	mov	r0, r7
 8008242:	f001 f9ed 	bl	8009620 <strncmp>
 8008246:	4605      	mov	r5, r0
 8008248:	2800      	cmp	r0, #0
 800824a:	d168      	bne.n	800831e <__gethex+0x136>
 800824c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008250:	eb07 060a 	add.w	r6, r7, sl
 8008254:	f7ff ffb2 	bl	80081bc <__hexdig_fun>
 8008258:	2800      	cmp	r0, #0
 800825a:	d062      	beq.n	8008322 <__gethex+0x13a>
 800825c:	4633      	mov	r3, r6
 800825e:	7818      	ldrb	r0, [r3, #0]
 8008260:	2830      	cmp	r0, #48	; 0x30
 8008262:	461f      	mov	r7, r3
 8008264:	f103 0301 	add.w	r3, r3, #1
 8008268:	d0f9      	beq.n	800825e <__gethex+0x76>
 800826a:	f7ff ffa7 	bl	80081bc <__hexdig_fun>
 800826e:	2301      	movs	r3, #1
 8008270:	fab0 f480 	clz	r4, r0
 8008274:	0964      	lsrs	r4, r4, #5
 8008276:	4635      	mov	r5, r6
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	463a      	mov	r2, r7
 800827c:	4616      	mov	r6, r2
 800827e:	3201      	adds	r2, #1
 8008280:	7830      	ldrb	r0, [r6, #0]
 8008282:	f7ff ff9b 	bl	80081bc <__hexdig_fun>
 8008286:	2800      	cmp	r0, #0
 8008288:	d1f8      	bne.n	800827c <__gethex+0x94>
 800828a:	9901      	ldr	r1, [sp, #4]
 800828c:	4652      	mov	r2, sl
 800828e:	4630      	mov	r0, r6
 8008290:	f001 f9c6 	bl	8009620 <strncmp>
 8008294:	b980      	cbnz	r0, 80082b8 <__gethex+0xd0>
 8008296:	b94d      	cbnz	r5, 80082ac <__gethex+0xc4>
 8008298:	eb06 050a 	add.w	r5, r6, sl
 800829c:	462a      	mov	r2, r5
 800829e:	4616      	mov	r6, r2
 80082a0:	3201      	adds	r2, #1
 80082a2:	7830      	ldrb	r0, [r6, #0]
 80082a4:	f7ff ff8a 	bl	80081bc <__hexdig_fun>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d1f8      	bne.n	800829e <__gethex+0xb6>
 80082ac:	1bad      	subs	r5, r5, r6
 80082ae:	00ad      	lsls	r5, r5, #2
 80082b0:	e004      	b.n	80082bc <__gethex+0xd4>
 80082b2:	2400      	movs	r4, #0
 80082b4:	4625      	mov	r5, r4
 80082b6:	e7e0      	b.n	800827a <__gethex+0x92>
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	d1f7      	bne.n	80082ac <__gethex+0xc4>
 80082bc:	7833      	ldrb	r3, [r6, #0]
 80082be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082c2:	2b50      	cmp	r3, #80	; 0x50
 80082c4:	d13b      	bne.n	800833e <__gethex+0x156>
 80082c6:	7873      	ldrb	r3, [r6, #1]
 80082c8:	2b2b      	cmp	r3, #43	; 0x2b
 80082ca:	d02c      	beq.n	8008326 <__gethex+0x13e>
 80082cc:	2b2d      	cmp	r3, #45	; 0x2d
 80082ce:	d02e      	beq.n	800832e <__gethex+0x146>
 80082d0:	1c71      	adds	r1, r6, #1
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	7808      	ldrb	r0, [r1, #0]
 80082d8:	f7ff ff70 	bl	80081bc <__hexdig_fun>
 80082dc:	1e43      	subs	r3, r0, #1
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b18      	cmp	r3, #24
 80082e2:	d82c      	bhi.n	800833e <__gethex+0x156>
 80082e4:	f1a0 0210 	sub.w	r2, r0, #16
 80082e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082ec:	f7ff ff66 	bl	80081bc <__hexdig_fun>
 80082f0:	1e43      	subs	r3, r0, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b18      	cmp	r3, #24
 80082f6:	d91d      	bls.n	8008334 <__gethex+0x14c>
 80082f8:	f1b9 0f00 	cmp.w	r9, #0
 80082fc:	d000      	beq.n	8008300 <__gethex+0x118>
 80082fe:	4252      	negs	r2, r2
 8008300:	4415      	add	r5, r2
 8008302:	f8cb 1000 	str.w	r1, [fp]
 8008306:	b1e4      	cbz	r4, 8008342 <__gethex+0x15a>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf14      	ite	ne
 800830e:	2700      	movne	r7, #0
 8008310:	2706      	moveq	r7, #6
 8008312:	4638      	mov	r0, r7
 8008314:	b009      	add	sp, #36	; 0x24
 8008316:	ecbd 8b02 	vpop	{d8}
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	463e      	mov	r6, r7
 8008320:	4625      	mov	r5, r4
 8008322:	2401      	movs	r4, #1
 8008324:	e7ca      	b.n	80082bc <__gethex+0xd4>
 8008326:	f04f 0900 	mov.w	r9, #0
 800832a:	1cb1      	adds	r1, r6, #2
 800832c:	e7d3      	b.n	80082d6 <__gethex+0xee>
 800832e:	f04f 0901 	mov.w	r9, #1
 8008332:	e7fa      	b.n	800832a <__gethex+0x142>
 8008334:	230a      	movs	r3, #10
 8008336:	fb03 0202 	mla	r2, r3, r2, r0
 800833a:	3a10      	subs	r2, #16
 800833c:	e7d4      	b.n	80082e8 <__gethex+0x100>
 800833e:	4631      	mov	r1, r6
 8008340:	e7df      	b.n	8008302 <__gethex+0x11a>
 8008342:	1bf3      	subs	r3, r6, r7
 8008344:	3b01      	subs	r3, #1
 8008346:	4621      	mov	r1, r4
 8008348:	2b07      	cmp	r3, #7
 800834a:	dc0b      	bgt.n	8008364 <__gethex+0x17c>
 800834c:	ee18 0a10 	vmov	r0, s16
 8008350:	f000 fa7e 	bl	8008850 <_Balloc>
 8008354:	4604      	mov	r4, r0
 8008356:	b940      	cbnz	r0, 800836a <__gethex+0x182>
 8008358:	4b65      	ldr	r3, [pc, #404]	; (80084f0 <__gethex+0x308>)
 800835a:	4602      	mov	r2, r0
 800835c:	21de      	movs	r1, #222	; 0xde
 800835e:	4865      	ldr	r0, [pc, #404]	; (80084f4 <__gethex+0x30c>)
 8008360:	f001 f97e 	bl	8009660 <__assert_func>
 8008364:	3101      	adds	r1, #1
 8008366:	105b      	asrs	r3, r3, #1
 8008368:	e7ee      	b.n	8008348 <__gethex+0x160>
 800836a:	f100 0914 	add.w	r9, r0, #20
 800836e:	f04f 0b00 	mov.w	fp, #0
 8008372:	f1ca 0301 	rsb	r3, sl, #1
 8008376:	f8cd 9008 	str.w	r9, [sp, #8]
 800837a:	f8cd b000 	str.w	fp, [sp]
 800837e:	9306      	str	r3, [sp, #24]
 8008380:	42b7      	cmp	r7, r6
 8008382:	d340      	bcc.n	8008406 <__gethex+0x21e>
 8008384:	9802      	ldr	r0, [sp, #8]
 8008386:	9b00      	ldr	r3, [sp, #0]
 8008388:	f840 3b04 	str.w	r3, [r0], #4
 800838c:	eba0 0009 	sub.w	r0, r0, r9
 8008390:	1080      	asrs	r0, r0, #2
 8008392:	0146      	lsls	r6, r0, #5
 8008394:	6120      	str	r0, [r4, #16]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fb50 	bl	8008a3c <__hi0bits>
 800839c:	1a30      	subs	r0, r6, r0
 800839e:	f8d8 6000 	ldr.w	r6, [r8]
 80083a2:	42b0      	cmp	r0, r6
 80083a4:	dd63      	ble.n	800846e <__gethex+0x286>
 80083a6:	1b87      	subs	r7, r0, r6
 80083a8:	4639      	mov	r1, r7
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 feea 	bl	8009184 <__any_on>
 80083b0:	4682      	mov	sl, r0
 80083b2:	b1a8      	cbz	r0, 80083e0 <__gethex+0x1f8>
 80083b4:	1e7b      	subs	r3, r7, #1
 80083b6:	1159      	asrs	r1, r3, #5
 80083b8:	f003 021f 	and.w	r2, r3, #31
 80083bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083c0:	f04f 0a01 	mov.w	sl, #1
 80083c4:	fa0a f202 	lsl.w	r2, sl, r2
 80083c8:	420a      	tst	r2, r1
 80083ca:	d009      	beq.n	80083e0 <__gethex+0x1f8>
 80083cc:	4553      	cmp	r3, sl
 80083ce:	dd05      	ble.n	80083dc <__gethex+0x1f4>
 80083d0:	1eb9      	subs	r1, r7, #2
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fed6 	bl	8009184 <__any_on>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d145      	bne.n	8008468 <__gethex+0x280>
 80083dc:	f04f 0a02 	mov.w	sl, #2
 80083e0:	4639      	mov	r1, r7
 80083e2:	4620      	mov	r0, r4
 80083e4:	f7ff fe98 	bl	8008118 <rshift>
 80083e8:	443d      	add	r5, r7
 80083ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083ee:	42ab      	cmp	r3, r5
 80083f0:	da4c      	bge.n	800848c <__gethex+0x2a4>
 80083f2:	ee18 0a10 	vmov	r0, s16
 80083f6:	4621      	mov	r1, r4
 80083f8:	f000 fa6a 	bl	80088d0 <_Bfree>
 80083fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083fe:	2300      	movs	r3, #0
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	27a3      	movs	r7, #163	; 0xa3
 8008404:	e785      	b.n	8008312 <__gethex+0x12a>
 8008406:	1e73      	subs	r3, r6, #1
 8008408:	9a05      	ldr	r2, [sp, #20]
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008410:	4293      	cmp	r3, r2
 8008412:	d019      	beq.n	8008448 <__gethex+0x260>
 8008414:	f1bb 0f20 	cmp.w	fp, #32
 8008418:	d107      	bne.n	800842a <__gethex+0x242>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	9a00      	ldr	r2, [sp, #0]
 800841e:	f843 2b04 	str.w	r2, [r3], #4
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	2300      	movs	r3, #0
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	469b      	mov	fp, r3
 800842a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800842e:	f7ff fec5 	bl	80081bc <__hexdig_fun>
 8008432:	9b00      	ldr	r3, [sp, #0]
 8008434:	f000 000f 	and.w	r0, r0, #15
 8008438:	fa00 f00b 	lsl.w	r0, r0, fp
 800843c:	4303      	orrs	r3, r0
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	f10b 0b04 	add.w	fp, fp, #4
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	e00d      	b.n	8008464 <__gethex+0x27c>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	9a06      	ldr	r2, [sp, #24]
 800844c:	4413      	add	r3, r2
 800844e:	42bb      	cmp	r3, r7
 8008450:	d3e0      	bcc.n	8008414 <__gethex+0x22c>
 8008452:	4618      	mov	r0, r3
 8008454:	9901      	ldr	r1, [sp, #4]
 8008456:	9307      	str	r3, [sp, #28]
 8008458:	4652      	mov	r2, sl
 800845a:	f001 f8e1 	bl	8009620 <strncmp>
 800845e:	9b07      	ldr	r3, [sp, #28]
 8008460:	2800      	cmp	r0, #0
 8008462:	d1d7      	bne.n	8008414 <__gethex+0x22c>
 8008464:	461e      	mov	r6, r3
 8008466:	e78b      	b.n	8008380 <__gethex+0x198>
 8008468:	f04f 0a03 	mov.w	sl, #3
 800846c:	e7b8      	b.n	80083e0 <__gethex+0x1f8>
 800846e:	da0a      	bge.n	8008486 <__gethex+0x29e>
 8008470:	1a37      	subs	r7, r6, r0
 8008472:	4621      	mov	r1, r4
 8008474:	ee18 0a10 	vmov	r0, s16
 8008478:	463a      	mov	r2, r7
 800847a:	f000 fc45 	bl	8008d08 <__lshift>
 800847e:	1bed      	subs	r5, r5, r7
 8008480:	4604      	mov	r4, r0
 8008482:	f100 0914 	add.w	r9, r0, #20
 8008486:	f04f 0a00 	mov.w	sl, #0
 800848a:	e7ae      	b.n	80083ea <__gethex+0x202>
 800848c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008490:	42a8      	cmp	r0, r5
 8008492:	dd72      	ble.n	800857a <__gethex+0x392>
 8008494:	1b45      	subs	r5, r0, r5
 8008496:	42ae      	cmp	r6, r5
 8008498:	dc36      	bgt.n	8008508 <__gethex+0x320>
 800849a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d02a      	beq.n	80084f8 <__gethex+0x310>
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d02c      	beq.n	8008500 <__gethex+0x318>
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d115      	bne.n	80084d6 <__gethex+0x2ee>
 80084aa:	42ae      	cmp	r6, r5
 80084ac:	d113      	bne.n	80084d6 <__gethex+0x2ee>
 80084ae:	2e01      	cmp	r6, #1
 80084b0:	d10b      	bne.n	80084ca <__gethex+0x2e2>
 80084b2:	9a04      	ldr	r2, [sp, #16]
 80084b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	2301      	movs	r3, #1
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	f8c9 3000 	str.w	r3, [r9]
 80084c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084c4:	2762      	movs	r7, #98	; 0x62
 80084c6:	601c      	str	r4, [r3, #0]
 80084c8:	e723      	b.n	8008312 <__gethex+0x12a>
 80084ca:	1e71      	subs	r1, r6, #1
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 fe59 	bl	8009184 <__any_on>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d1ed      	bne.n	80084b2 <__gethex+0x2ca>
 80084d6:	ee18 0a10 	vmov	r0, s16
 80084da:	4621      	mov	r1, r4
 80084dc:	f000 f9f8 	bl	80088d0 <_Bfree>
 80084e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084e2:	2300      	movs	r3, #0
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	2750      	movs	r7, #80	; 0x50
 80084e8:	e713      	b.n	8008312 <__gethex+0x12a>
 80084ea:	bf00      	nop
 80084ec:	0800a6b0 	.word	0x0800a6b0
 80084f0:	0800a634 	.word	0x0800a634
 80084f4:	0800a645 	.word	0x0800a645
 80084f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1eb      	bne.n	80084d6 <__gethex+0x2ee>
 80084fe:	e7d8      	b.n	80084b2 <__gethex+0x2ca>
 8008500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1d5      	bne.n	80084b2 <__gethex+0x2ca>
 8008506:	e7e6      	b.n	80084d6 <__gethex+0x2ee>
 8008508:	1e6f      	subs	r7, r5, #1
 800850a:	f1ba 0f00 	cmp.w	sl, #0
 800850e:	d131      	bne.n	8008574 <__gethex+0x38c>
 8008510:	b127      	cbz	r7, 800851c <__gethex+0x334>
 8008512:	4639      	mov	r1, r7
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fe35 	bl	8009184 <__any_on>
 800851a:	4682      	mov	sl, r0
 800851c:	117b      	asrs	r3, r7, #5
 800851e:	2101      	movs	r1, #1
 8008520:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008524:	f007 071f 	and.w	r7, r7, #31
 8008528:	fa01 f707 	lsl.w	r7, r1, r7
 800852c:	421f      	tst	r7, r3
 800852e:	4629      	mov	r1, r5
 8008530:	4620      	mov	r0, r4
 8008532:	bf18      	it	ne
 8008534:	f04a 0a02 	orrne.w	sl, sl, #2
 8008538:	1b76      	subs	r6, r6, r5
 800853a:	f7ff fded 	bl	8008118 <rshift>
 800853e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008542:	2702      	movs	r7, #2
 8008544:	f1ba 0f00 	cmp.w	sl, #0
 8008548:	d048      	beq.n	80085dc <__gethex+0x3f4>
 800854a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d015      	beq.n	800857e <__gethex+0x396>
 8008552:	2b03      	cmp	r3, #3
 8008554:	d017      	beq.n	8008586 <__gethex+0x39e>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d109      	bne.n	800856e <__gethex+0x386>
 800855a:	f01a 0f02 	tst.w	sl, #2
 800855e:	d006      	beq.n	800856e <__gethex+0x386>
 8008560:	f8d9 0000 	ldr.w	r0, [r9]
 8008564:	ea4a 0a00 	orr.w	sl, sl, r0
 8008568:	f01a 0f01 	tst.w	sl, #1
 800856c:	d10e      	bne.n	800858c <__gethex+0x3a4>
 800856e:	f047 0710 	orr.w	r7, r7, #16
 8008572:	e033      	b.n	80085dc <__gethex+0x3f4>
 8008574:	f04f 0a01 	mov.w	sl, #1
 8008578:	e7d0      	b.n	800851c <__gethex+0x334>
 800857a:	2701      	movs	r7, #1
 800857c:	e7e2      	b.n	8008544 <__gethex+0x35c>
 800857e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008580:	f1c3 0301 	rsb	r3, r3, #1
 8008584:	9315      	str	r3, [sp, #84]	; 0x54
 8008586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <__gethex+0x386>
 800858c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008590:	f104 0314 	add.w	r3, r4, #20
 8008594:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008598:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800859c:	f04f 0c00 	mov.w	ip, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80085aa:	d01c      	beq.n	80085e6 <__gethex+0x3fe>
 80085ac:	3201      	adds	r2, #1
 80085ae:	6002      	str	r2, [r0, #0]
 80085b0:	2f02      	cmp	r7, #2
 80085b2:	f104 0314 	add.w	r3, r4, #20
 80085b6:	d13f      	bne.n	8008638 <__gethex+0x450>
 80085b8:	f8d8 2000 	ldr.w	r2, [r8]
 80085bc:	3a01      	subs	r2, #1
 80085be:	42b2      	cmp	r2, r6
 80085c0:	d10a      	bne.n	80085d8 <__gethex+0x3f0>
 80085c2:	1171      	asrs	r1, r6, #5
 80085c4:	2201      	movs	r2, #1
 80085c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085ca:	f006 061f 	and.w	r6, r6, #31
 80085ce:	fa02 f606 	lsl.w	r6, r2, r6
 80085d2:	421e      	tst	r6, r3
 80085d4:	bf18      	it	ne
 80085d6:	4617      	movne	r7, r2
 80085d8:	f047 0720 	orr.w	r7, r7, #32
 80085dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085de:	601c      	str	r4, [r3, #0]
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	601d      	str	r5, [r3, #0]
 80085e4:	e695      	b.n	8008312 <__gethex+0x12a>
 80085e6:	4299      	cmp	r1, r3
 80085e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80085ec:	d8d8      	bhi.n	80085a0 <__gethex+0x3b8>
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	459b      	cmp	fp, r3
 80085f2:	db19      	blt.n	8008628 <__gethex+0x440>
 80085f4:	6861      	ldr	r1, [r4, #4]
 80085f6:	ee18 0a10 	vmov	r0, s16
 80085fa:	3101      	adds	r1, #1
 80085fc:	f000 f928 	bl	8008850 <_Balloc>
 8008600:	4681      	mov	r9, r0
 8008602:	b918      	cbnz	r0, 800860c <__gethex+0x424>
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <__gethex+0x488>)
 8008606:	4602      	mov	r2, r0
 8008608:	2184      	movs	r1, #132	; 0x84
 800860a:	e6a8      	b.n	800835e <__gethex+0x176>
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	3202      	adds	r2, #2
 8008610:	f104 010c 	add.w	r1, r4, #12
 8008614:	0092      	lsls	r2, r2, #2
 8008616:	300c      	adds	r0, #12
 8008618:	f000 f90c 	bl	8008834 <memcpy>
 800861c:	4621      	mov	r1, r4
 800861e:	ee18 0a10 	vmov	r0, s16
 8008622:	f000 f955 	bl	80088d0 <_Bfree>
 8008626:	464c      	mov	r4, r9
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	1c5a      	adds	r2, r3, #1
 800862c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008630:	6122      	str	r2, [r4, #16]
 8008632:	2201      	movs	r2, #1
 8008634:	615a      	str	r2, [r3, #20]
 8008636:	e7bb      	b.n	80085b0 <__gethex+0x3c8>
 8008638:	6922      	ldr	r2, [r4, #16]
 800863a:	455a      	cmp	r2, fp
 800863c:	dd0b      	ble.n	8008656 <__gethex+0x46e>
 800863e:	2101      	movs	r1, #1
 8008640:	4620      	mov	r0, r4
 8008642:	f7ff fd69 	bl	8008118 <rshift>
 8008646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800864a:	3501      	adds	r5, #1
 800864c:	42ab      	cmp	r3, r5
 800864e:	f6ff aed0 	blt.w	80083f2 <__gethex+0x20a>
 8008652:	2701      	movs	r7, #1
 8008654:	e7c0      	b.n	80085d8 <__gethex+0x3f0>
 8008656:	f016 061f 	ands.w	r6, r6, #31
 800865a:	d0fa      	beq.n	8008652 <__gethex+0x46a>
 800865c:	449a      	add	sl, r3
 800865e:	f1c6 0620 	rsb	r6, r6, #32
 8008662:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008666:	f000 f9e9 	bl	8008a3c <__hi0bits>
 800866a:	42b0      	cmp	r0, r6
 800866c:	dbe7      	blt.n	800863e <__gethex+0x456>
 800866e:	e7f0      	b.n	8008652 <__gethex+0x46a>
 8008670:	0800a634 	.word	0x0800a634

08008674 <L_shift>:
 8008674:	f1c2 0208 	rsb	r2, r2, #8
 8008678:	0092      	lsls	r2, r2, #2
 800867a:	b570      	push	{r4, r5, r6, lr}
 800867c:	f1c2 0620 	rsb	r6, r2, #32
 8008680:	6843      	ldr	r3, [r0, #4]
 8008682:	6804      	ldr	r4, [r0, #0]
 8008684:	fa03 f506 	lsl.w	r5, r3, r6
 8008688:	432c      	orrs	r4, r5
 800868a:	40d3      	lsrs	r3, r2
 800868c:	6004      	str	r4, [r0, #0]
 800868e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008692:	4288      	cmp	r0, r1
 8008694:	d3f4      	bcc.n	8008680 <L_shift+0xc>
 8008696:	bd70      	pop	{r4, r5, r6, pc}

08008698 <__match>:
 8008698:	b530      	push	{r4, r5, lr}
 800869a:	6803      	ldr	r3, [r0, #0]
 800869c:	3301      	adds	r3, #1
 800869e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a2:	b914      	cbnz	r4, 80086aa <__match+0x12>
 80086a4:	6003      	str	r3, [r0, #0]
 80086a6:	2001      	movs	r0, #1
 80086a8:	bd30      	pop	{r4, r5, pc}
 80086aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086b2:	2d19      	cmp	r5, #25
 80086b4:	bf98      	it	ls
 80086b6:	3220      	addls	r2, #32
 80086b8:	42a2      	cmp	r2, r4
 80086ba:	d0f0      	beq.n	800869e <__match+0x6>
 80086bc:	2000      	movs	r0, #0
 80086be:	e7f3      	b.n	80086a8 <__match+0x10>

080086c0 <__hexnan>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	680b      	ldr	r3, [r1, #0]
 80086c6:	6801      	ldr	r1, [r0, #0]
 80086c8:	115e      	asrs	r6, r3, #5
 80086ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086ce:	f013 031f 	ands.w	r3, r3, #31
 80086d2:	b087      	sub	sp, #28
 80086d4:	bf18      	it	ne
 80086d6:	3604      	addne	r6, #4
 80086d8:	2500      	movs	r5, #0
 80086da:	1f37      	subs	r7, r6, #4
 80086dc:	4682      	mov	sl, r0
 80086de:	4690      	mov	r8, r2
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80086e6:	46b9      	mov	r9, r7
 80086e8:	463c      	mov	r4, r7
 80086ea:	9502      	str	r5, [sp, #8]
 80086ec:	46ab      	mov	fp, r5
 80086ee:	784a      	ldrb	r2, [r1, #1]
 80086f0:	1c4b      	adds	r3, r1, #1
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	b342      	cbz	r2, 8008748 <__hexnan+0x88>
 80086f6:	4610      	mov	r0, r2
 80086f8:	9105      	str	r1, [sp, #20]
 80086fa:	9204      	str	r2, [sp, #16]
 80086fc:	f7ff fd5e 	bl	80081bc <__hexdig_fun>
 8008700:	2800      	cmp	r0, #0
 8008702:	d14f      	bne.n	80087a4 <__hexnan+0xe4>
 8008704:	9a04      	ldr	r2, [sp, #16]
 8008706:	9905      	ldr	r1, [sp, #20]
 8008708:	2a20      	cmp	r2, #32
 800870a:	d818      	bhi.n	800873e <__hexnan+0x7e>
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	459b      	cmp	fp, r3
 8008710:	dd13      	ble.n	800873a <__hexnan+0x7a>
 8008712:	454c      	cmp	r4, r9
 8008714:	d206      	bcs.n	8008724 <__hexnan+0x64>
 8008716:	2d07      	cmp	r5, #7
 8008718:	dc04      	bgt.n	8008724 <__hexnan+0x64>
 800871a:	462a      	mov	r2, r5
 800871c:	4649      	mov	r1, r9
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff ffa8 	bl	8008674 <L_shift>
 8008724:	4544      	cmp	r4, r8
 8008726:	d950      	bls.n	80087ca <__hexnan+0x10a>
 8008728:	2300      	movs	r3, #0
 800872a:	f1a4 0904 	sub.w	r9, r4, #4
 800872e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008732:	f8cd b008 	str.w	fp, [sp, #8]
 8008736:	464c      	mov	r4, r9
 8008738:	461d      	mov	r5, r3
 800873a:	9903      	ldr	r1, [sp, #12]
 800873c:	e7d7      	b.n	80086ee <__hexnan+0x2e>
 800873e:	2a29      	cmp	r2, #41	; 0x29
 8008740:	d156      	bne.n	80087f0 <__hexnan+0x130>
 8008742:	3102      	adds	r1, #2
 8008744:	f8ca 1000 	str.w	r1, [sl]
 8008748:	f1bb 0f00 	cmp.w	fp, #0
 800874c:	d050      	beq.n	80087f0 <__hexnan+0x130>
 800874e:	454c      	cmp	r4, r9
 8008750:	d206      	bcs.n	8008760 <__hexnan+0xa0>
 8008752:	2d07      	cmp	r5, #7
 8008754:	dc04      	bgt.n	8008760 <__hexnan+0xa0>
 8008756:	462a      	mov	r2, r5
 8008758:	4649      	mov	r1, r9
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff ff8a 	bl	8008674 <L_shift>
 8008760:	4544      	cmp	r4, r8
 8008762:	d934      	bls.n	80087ce <__hexnan+0x10e>
 8008764:	f1a8 0204 	sub.w	r2, r8, #4
 8008768:	4623      	mov	r3, r4
 800876a:	f853 1b04 	ldr.w	r1, [r3], #4
 800876e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008772:	429f      	cmp	r7, r3
 8008774:	d2f9      	bcs.n	800876a <__hexnan+0xaa>
 8008776:	1b3b      	subs	r3, r7, r4
 8008778:	f023 0303 	bic.w	r3, r3, #3
 800877c:	3304      	adds	r3, #4
 800877e:	3401      	adds	r4, #1
 8008780:	3e03      	subs	r6, #3
 8008782:	42b4      	cmp	r4, r6
 8008784:	bf88      	it	hi
 8008786:	2304      	movhi	r3, #4
 8008788:	4443      	add	r3, r8
 800878a:	2200      	movs	r2, #0
 800878c:	f843 2b04 	str.w	r2, [r3], #4
 8008790:	429f      	cmp	r7, r3
 8008792:	d2fb      	bcs.n	800878c <__hexnan+0xcc>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	b91b      	cbnz	r3, 80087a0 <__hexnan+0xe0>
 8008798:	4547      	cmp	r7, r8
 800879a:	d127      	bne.n	80087ec <__hexnan+0x12c>
 800879c:	2301      	movs	r3, #1
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	2005      	movs	r0, #5
 80087a2:	e026      	b.n	80087f2 <__hexnan+0x132>
 80087a4:	3501      	adds	r5, #1
 80087a6:	2d08      	cmp	r5, #8
 80087a8:	f10b 0b01 	add.w	fp, fp, #1
 80087ac:	dd06      	ble.n	80087bc <__hexnan+0xfc>
 80087ae:	4544      	cmp	r4, r8
 80087b0:	d9c3      	bls.n	800873a <__hexnan+0x7a>
 80087b2:	2300      	movs	r3, #0
 80087b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80087b8:	2501      	movs	r5, #1
 80087ba:	3c04      	subs	r4, #4
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	f000 000f 	and.w	r0, r0, #15
 80087c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80087c6:	6022      	str	r2, [r4, #0]
 80087c8:	e7b7      	b.n	800873a <__hexnan+0x7a>
 80087ca:	2508      	movs	r5, #8
 80087cc:	e7b5      	b.n	800873a <__hexnan+0x7a>
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0df      	beq.n	8008794 <__hexnan+0xd4>
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087d8:	f1c3 0320 	rsb	r3, r3, #32
 80087dc:	fa22 f303 	lsr.w	r3, r2, r3
 80087e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087e4:	401a      	ands	r2, r3
 80087e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80087ea:	e7d3      	b.n	8008794 <__hexnan+0xd4>
 80087ec:	3f04      	subs	r7, #4
 80087ee:	e7d1      	b.n	8008794 <__hexnan+0xd4>
 80087f0:	2004      	movs	r0, #4
 80087f2:	b007      	add	sp, #28
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087f8 <_localeconv_r>:
 80087f8:	4800      	ldr	r0, [pc, #0]	; (80087fc <_localeconv_r+0x4>)
 80087fa:	4770      	bx	lr
 80087fc:	20000168 	.word	0x20000168

08008800 <malloc>:
 8008800:	4b02      	ldr	r3, [pc, #8]	; (800880c <malloc+0xc>)
 8008802:	4601      	mov	r1, r0
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	f000 bd3d 	b.w	8009284 <_malloc_r>
 800880a:	bf00      	nop
 800880c:	20000010 	.word	0x20000010

08008810 <__ascii_mbtowc>:
 8008810:	b082      	sub	sp, #8
 8008812:	b901      	cbnz	r1, 8008816 <__ascii_mbtowc+0x6>
 8008814:	a901      	add	r1, sp, #4
 8008816:	b142      	cbz	r2, 800882a <__ascii_mbtowc+0x1a>
 8008818:	b14b      	cbz	r3, 800882e <__ascii_mbtowc+0x1e>
 800881a:	7813      	ldrb	r3, [r2, #0]
 800881c:	600b      	str	r3, [r1, #0]
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	1e10      	subs	r0, r2, #0
 8008822:	bf18      	it	ne
 8008824:	2001      	movne	r0, #1
 8008826:	b002      	add	sp, #8
 8008828:	4770      	bx	lr
 800882a:	4610      	mov	r0, r2
 800882c:	e7fb      	b.n	8008826 <__ascii_mbtowc+0x16>
 800882e:	f06f 0001 	mvn.w	r0, #1
 8008832:	e7f8      	b.n	8008826 <__ascii_mbtowc+0x16>

08008834 <memcpy>:
 8008834:	440a      	add	r2, r1
 8008836:	4291      	cmp	r1, r2
 8008838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800883c:	d100      	bne.n	8008840 <memcpy+0xc>
 800883e:	4770      	bx	lr
 8008840:	b510      	push	{r4, lr}
 8008842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800884a:	4291      	cmp	r1, r2
 800884c:	d1f9      	bne.n	8008842 <memcpy+0xe>
 800884e:	bd10      	pop	{r4, pc}

08008850 <_Balloc>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008854:	4604      	mov	r4, r0
 8008856:	460d      	mov	r5, r1
 8008858:	b976      	cbnz	r6, 8008878 <_Balloc+0x28>
 800885a:	2010      	movs	r0, #16
 800885c:	f7ff ffd0 	bl	8008800 <malloc>
 8008860:	4602      	mov	r2, r0
 8008862:	6260      	str	r0, [r4, #36]	; 0x24
 8008864:	b920      	cbnz	r0, 8008870 <_Balloc+0x20>
 8008866:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <_Balloc+0x78>)
 8008868:	4818      	ldr	r0, [pc, #96]	; (80088cc <_Balloc+0x7c>)
 800886a:	2166      	movs	r1, #102	; 0x66
 800886c:	f000 fef8 	bl	8009660 <__assert_func>
 8008870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008874:	6006      	str	r6, [r0, #0]
 8008876:	60c6      	str	r6, [r0, #12]
 8008878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800887a:	68f3      	ldr	r3, [r6, #12]
 800887c:	b183      	cbz	r3, 80088a0 <_Balloc+0x50>
 800887e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008886:	b9b8      	cbnz	r0, 80088b8 <_Balloc+0x68>
 8008888:	2101      	movs	r1, #1
 800888a:	fa01 f605 	lsl.w	r6, r1, r5
 800888e:	1d72      	adds	r2, r6, #5
 8008890:	0092      	lsls	r2, r2, #2
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fc97 	bl	80091c6 <_calloc_r>
 8008898:	b160      	cbz	r0, 80088b4 <_Balloc+0x64>
 800889a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800889e:	e00e      	b.n	80088be <_Balloc+0x6e>
 80088a0:	2221      	movs	r2, #33	; 0x21
 80088a2:	2104      	movs	r1, #4
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fc8e 	bl	80091c6 <_calloc_r>
 80088aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ac:	60f0      	str	r0, [r6, #12]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e4      	bne.n	800887e <_Balloc+0x2e>
 80088b4:	2000      	movs	r0, #0
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	6802      	ldr	r2, [r0, #0]
 80088ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088be:	2300      	movs	r3, #0
 80088c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088c4:	e7f7      	b.n	80088b6 <_Balloc+0x66>
 80088c6:	bf00      	nop
 80088c8:	0800a5be 	.word	0x0800a5be
 80088cc:	0800a6c4 	.word	0x0800a6c4

080088d0 <_Bfree>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088d4:	4605      	mov	r5, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b976      	cbnz	r6, 80088f8 <_Bfree+0x28>
 80088da:	2010      	movs	r0, #16
 80088dc:	f7ff ff90 	bl	8008800 <malloc>
 80088e0:	4602      	mov	r2, r0
 80088e2:	6268      	str	r0, [r5, #36]	; 0x24
 80088e4:	b920      	cbnz	r0, 80088f0 <_Bfree+0x20>
 80088e6:	4b09      	ldr	r3, [pc, #36]	; (800890c <_Bfree+0x3c>)
 80088e8:	4809      	ldr	r0, [pc, #36]	; (8008910 <_Bfree+0x40>)
 80088ea:	218a      	movs	r1, #138	; 0x8a
 80088ec:	f000 feb8 	bl	8009660 <__assert_func>
 80088f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088f4:	6006      	str	r6, [r0, #0]
 80088f6:	60c6      	str	r6, [r0, #12]
 80088f8:	b13c      	cbz	r4, 800890a <_Bfree+0x3a>
 80088fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088fc:	6862      	ldr	r2, [r4, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008904:	6021      	str	r1, [r4, #0]
 8008906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	0800a5be 	.word	0x0800a5be
 8008910:	0800a6c4 	.word	0x0800a6c4

08008914 <__multadd>:
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	690e      	ldr	r6, [r1, #16]
 800891a:	4607      	mov	r7, r0
 800891c:	4698      	mov	r8, r3
 800891e:	460c      	mov	r4, r1
 8008920:	f101 0014 	add.w	r0, r1, #20
 8008924:	2300      	movs	r3, #0
 8008926:	6805      	ldr	r5, [r0, #0]
 8008928:	b2a9      	uxth	r1, r5
 800892a:	fb02 8101 	mla	r1, r2, r1, r8
 800892e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008932:	0c2d      	lsrs	r5, r5, #16
 8008934:	fb02 c505 	mla	r5, r2, r5, ip
 8008938:	b289      	uxth	r1, r1
 800893a:	3301      	adds	r3, #1
 800893c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008940:	429e      	cmp	r6, r3
 8008942:	f840 1b04 	str.w	r1, [r0], #4
 8008946:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800894a:	dcec      	bgt.n	8008926 <__multadd+0x12>
 800894c:	f1b8 0f00 	cmp.w	r8, #0
 8008950:	d022      	beq.n	8008998 <__multadd+0x84>
 8008952:	68a3      	ldr	r3, [r4, #8]
 8008954:	42b3      	cmp	r3, r6
 8008956:	dc19      	bgt.n	800898c <__multadd+0x78>
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	4638      	mov	r0, r7
 800895c:	3101      	adds	r1, #1
 800895e:	f7ff ff77 	bl	8008850 <_Balloc>
 8008962:	4605      	mov	r5, r0
 8008964:	b928      	cbnz	r0, 8008972 <__multadd+0x5e>
 8008966:	4602      	mov	r2, r0
 8008968:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <__multadd+0x8c>)
 800896a:	480e      	ldr	r0, [pc, #56]	; (80089a4 <__multadd+0x90>)
 800896c:	21b5      	movs	r1, #181	; 0xb5
 800896e:	f000 fe77 	bl	8009660 <__assert_func>
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	3202      	adds	r2, #2
 8008976:	f104 010c 	add.w	r1, r4, #12
 800897a:	0092      	lsls	r2, r2, #2
 800897c:	300c      	adds	r0, #12
 800897e:	f7ff ff59 	bl	8008834 <memcpy>
 8008982:	4621      	mov	r1, r4
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ffa3 	bl	80088d0 <_Bfree>
 800898a:	462c      	mov	r4, r5
 800898c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008990:	3601      	adds	r6, #1
 8008992:	f8c3 8014 	str.w	r8, [r3, #20]
 8008996:	6126      	str	r6, [r4, #16]
 8008998:	4620      	mov	r0, r4
 800899a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899e:	bf00      	nop
 80089a0:	0800a634 	.word	0x0800a634
 80089a4:	0800a6c4 	.word	0x0800a6c4

080089a8 <__s2b>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	460c      	mov	r4, r1
 80089ae:	4615      	mov	r5, r2
 80089b0:	461f      	mov	r7, r3
 80089b2:	2209      	movs	r2, #9
 80089b4:	3308      	adds	r3, #8
 80089b6:	4606      	mov	r6, r0
 80089b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80089bc:	2100      	movs	r1, #0
 80089be:	2201      	movs	r2, #1
 80089c0:	429a      	cmp	r2, r3
 80089c2:	db09      	blt.n	80089d8 <__s2b+0x30>
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7ff ff43 	bl	8008850 <_Balloc>
 80089ca:	b940      	cbnz	r0, 80089de <__s2b+0x36>
 80089cc:	4602      	mov	r2, r0
 80089ce:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <__s2b+0x8c>)
 80089d0:	4819      	ldr	r0, [pc, #100]	; (8008a38 <__s2b+0x90>)
 80089d2:	21ce      	movs	r1, #206	; 0xce
 80089d4:	f000 fe44 	bl	8009660 <__assert_func>
 80089d8:	0052      	lsls	r2, r2, #1
 80089da:	3101      	adds	r1, #1
 80089dc:	e7f0      	b.n	80089c0 <__s2b+0x18>
 80089de:	9b08      	ldr	r3, [sp, #32]
 80089e0:	6143      	str	r3, [r0, #20]
 80089e2:	2d09      	cmp	r5, #9
 80089e4:	f04f 0301 	mov.w	r3, #1
 80089e8:	6103      	str	r3, [r0, #16]
 80089ea:	dd16      	ble.n	8008a1a <__s2b+0x72>
 80089ec:	f104 0909 	add.w	r9, r4, #9
 80089f0:	46c8      	mov	r8, r9
 80089f2:	442c      	add	r4, r5
 80089f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089f8:	4601      	mov	r1, r0
 80089fa:	3b30      	subs	r3, #48	; 0x30
 80089fc:	220a      	movs	r2, #10
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7ff ff88 	bl	8008914 <__multadd>
 8008a04:	45a0      	cmp	r8, r4
 8008a06:	d1f5      	bne.n	80089f4 <__s2b+0x4c>
 8008a08:	f1a5 0408 	sub.w	r4, r5, #8
 8008a0c:	444c      	add	r4, r9
 8008a0e:	1b2d      	subs	r5, r5, r4
 8008a10:	1963      	adds	r3, r4, r5
 8008a12:	42bb      	cmp	r3, r7
 8008a14:	db04      	blt.n	8008a20 <__s2b+0x78>
 8008a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	340a      	adds	r4, #10
 8008a1c:	2509      	movs	r5, #9
 8008a1e:	e7f6      	b.n	8008a0e <__s2b+0x66>
 8008a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a24:	4601      	mov	r1, r0
 8008a26:	3b30      	subs	r3, #48	; 0x30
 8008a28:	220a      	movs	r2, #10
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ff72 	bl	8008914 <__multadd>
 8008a30:	e7ee      	b.n	8008a10 <__s2b+0x68>
 8008a32:	bf00      	nop
 8008a34:	0800a634 	.word	0x0800a634
 8008a38:	0800a6c4 	.word	0x0800a6c4

08008a3c <__hi0bits>:
 8008a3c:	0c03      	lsrs	r3, r0, #16
 8008a3e:	041b      	lsls	r3, r3, #16
 8008a40:	b9d3      	cbnz	r3, 8008a78 <__hi0bits+0x3c>
 8008a42:	0400      	lsls	r0, r0, #16
 8008a44:	2310      	movs	r3, #16
 8008a46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a4a:	bf04      	itt	eq
 8008a4c:	0200      	lsleq	r0, r0, #8
 8008a4e:	3308      	addeq	r3, #8
 8008a50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a54:	bf04      	itt	eq
 8008a56:	0100      	lsleq	r0, r0, #4
 8008a58:	3304      	addeq	r3, #4
 8008a5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a5e:	bf04      	itt	eq
 8008a60:	0080      	lsleq	r0, r0, #2
 8008a62:	3302      	addeq	r3, #2
 8008a64:	2800      	cmp	r0, #0
 8008a66:	db05      	blt.n	8008a74 <__hi0bits+0x38>
 8008a68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a6c:	f103 0301 	add.w	r3, r3, #1
 8008a70:	bf08      	it	eq
 8008a72:	2320      	moveq	r3, #32
 8008a74:	4618      	mov	r0, r3
 8008a76:	4770      	bx	lr
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e7e4      	b.n	8008a46 <__hi0bits+0xa>

08008a7c <__lo0bits>:
 8008a7c:	6803      	ldr	r3, [r0, #0]
 8008a7e:	f013 0207 	ands.w	r2, r3, #7
 8008a82:	4601      	mov	r1, r0
 8008a84:	d00b      	beq.n	8008a9e <__lo0bits+0x22>
 8008a86:	07da      	lsls	r2, r3, #31
 8008a88:	d424      	bmi.n	8008ad4 <__lo0bits+0x58>
 8008a8a:	0798      	lsls	r0, r3, #30
 8008a8c:	bf49      	itett	mi
 8008a8e:	085b      	lsrmi	r3, r3, #1
 8008a90:	089b      	lsrpl	r3, r3, #2
 8008a92:	2001      	movmi	r0, #1
 8008a94:	600b      	strmi	r3, [r1, #0]
 8008a96:	bf5c      	itt	pl
 8008a98:	600b      	strpl	r3, [r1, #0]
 8008a9a:	2002      	movpl	r0, #2
 8008a9c:	4770      	bx	lr
 8008a9e:	b298      	uxth	r0, r3
 8008aa0:	b9b0      	cbnz	r0, 8008ad0 <__lo0bits+0x54>
 8008aa2:	0c1b      	lsrs	r3, r3, #16
 8008aa4:	2010      	movs	r0, #16
 8008aa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008aaa:	bf04      	itt	eq
 8008aac:	0a1b      	lsreq	r3, r3, #8
 8008aae:	3008      	addeq	r0, #8
 8008ab0:	071a      	lsls	r2, r3, #28
 8008ab2:	bf04      	itt	eq
 8008ab4:	091b      	lsreq	r3, r3, #4
 8008ab6:	3004      	addeq	r0, #4
 8008ab8:	079a      	lsls	r2, r3, #30
 8008aba:	bf04      	itt	eq
 8008abc:	089b      	lsreq	r3, r3, #2
 8008abe:	3002      	addeq	r0, #2
 8008ac0:	07da      	lsls	r2, r3, #31
 8008ac2:	d403      	bmi.n	8008acc <__lo0bits+0x50>
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	f100 0001 	add.w	r0, r0, #1
 8008aca:	d005      	beq.n	8008ad8 <__lo0bits+0x5c>
 8008acc:	600b      	str	r3, [r1, #0]
 8008ace:	4770      	bx	lr
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	e7e8      	b.n	8008aa6 <__lo0bits+0x2a>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	4770      	bx	lr
 8008ad8:	2020      	movs	r0, #32
 8008ada:	4770      	bx	lr

08008adc <__i2b>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	460c      	mov	r4, r1
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	f7ff feb5 	bl	8008850 <_Balloc>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	b928      	cbnz	r0, 8008af6 <__i2b+0x1a>
 8008aea:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <__i2b+0x24>)
 8008aec:	4805      	ldr	r0, [pc, #20]	; (8008b04 <__i2b+0x28>)
 8008aee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008af2:	f000 fdb5 	bl	8009660 <__assert_func>
 8008af6:	2301      	movs	r3, #1
 8008af8:	6144      	str	r4, [r0, #20]
 8008afa:	6103      	str	r3, [r0, #16]
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	bf00      	nop
 8008b00:	0800a634 	.word	0x0800a634
 8008b04:	0800a6c4 	.word	0x0800a6c4

08008b08 <__multiply>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	690a      	ldr	r2, [r1, #16]
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	bfb8      	it	lt
 8008b16:	460b      	movlt	r3, r1
 8008b18:	460d      	mov	r5, r1
 8008b1a:	bfbc      	itt	lt
 8008b1c:	4625      	movlt	r5, r4
 8008b1e:	461c      	movlt	r4, r3
 8008b20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b28:	68ab      	ldr	r3, [r5, #8]
 8008b2a:	6869      	ldr	r1, [r5, #4]
 8008b2c:	eb0a 0709 	add.w	r7, sl, r9
 8008b30:	42bb      	cmp	r3, r7
 8008b32:	b085      	sub	sp, #20
 8008b34:	bfb8      	it	lt
 8008b36:	3101      	addlt	r1, #1
 8008b38:	f7ff fe8a 	bl	8008850 <_Balloc>
 8008b3c:	b930      	cbnz	r0, 8008b4c <__multiply+0x44>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b42      	ldr	r3, [pc, #264]	; (8008c4c <__multiply+0x144>)
 8008b42:	4843      	ldr	r0, [pc, #268]	; (8008c50 <__multiply+0x148>)
 8008b44:	f240 115d 	movw	r1, #349	; 0x15d
 8008b48:	f000 fd8a 	bl	8009660 <__assert_func>
 8008b4c:	f100 0614 	add.w	r6, r0, #20
 8008b50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b54:	4633      	mov	r3, r6
 8008b56:	2200      	movs	r2, #0
 8008b58:	4543      	cmp	r3, r8
 8008b5a:	d31e      	bcc.n	8008b9a <__multiply+0x92>
 8008b5c:	f105 0c14 	add.w	ip, r5, #20
 8008b60:	f104 0314 	add.w	r3, r4, #20
 8008b64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008b68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008b6c:	9202      	str	r2, [sp, #8]
 8008b6e:	ebac 0205 	sub.w	r2, ip, r5
 8008b72:	3a15      	subs	r2, #21
 8008b74:	f022 0203 	bic.w	r2, r2, #3
 8008b78:	3204      	adds	r2, #4
 8008b7a:	f105 0115 	add.w	r1, r5, #21
 8008b7e:	458c      	cmp	ip, r1
 8008b80:	bf38      	it	cc
 8008b82:	2204      	movcc	r2, #4
 8008b84:	9201      	str	r2, [sp, #4]
 8008b86:	9a02      	ldr	r2, [sp, #8]
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d808      	bhi.n	8008ba0 <__multiply+0x98>
 8008b8e:	2f00      	cmp	r7, #0
 8008b90:	dc55      	bgt.n	8008c3e <__multiply+0x136>
 8008b92:	6107      	str	r7, [r0, #16]
 8008b94:	b005      	add	sp, #20
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	f843 2b04 	str.w	r2, [r3], #4
 8008b9e:	e7db      	b.n	8008b58 <__multiply+0x50>
 8008ba0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ba4:	f1ba 0f00 	cmp.w	sl, #0
 8008ba8:	d020      	beq.n	8008bec <__multiply+0xe4>
 8008baa:	f105 0e14 	add.w	lr, r5, #20
 8008bae:	46b1      	mov	r9, r6
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008bb6:	f8d9 b000 	ldr.w	fp, [r9]
 8008bba:	b2a1      	uxth	r1, r4
 8008bbc:	fa1f fb8b 	uxth.w	fp, fp
 8008bc0:	fb0a b101 	mla	r1, sl, r1, fp
 8008bc4:	4411      	add	r1, r2
 8008bc6:	f8d9 2000 	ldr.w	r2, [r9]
 8008bca:	0c24      	lsrs	r4, r4, #16
 8008bcc:	0c12      	lsrs	r2, r2, #16
 8008bce:	fb0a 2404 	mla	r4, sl, r4, r2
 8008bd2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008bd6:	b289      	uxth	r1, r1
 8008bd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008bdc:	45f4      	cmp	ip, lr
 8008bde:	f849 1b04 	str.w	r1, [r9], #4
 8008be2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008be6:	d8e4      	bhi.n	8008bb2 <__multiply+0xaa>
 8008be8:	9901      	ldr	r1, [sp, #4]
 8008bea:	5072      	str	r2, [r6, r1]
 8008bec:	9a03      	ldr	r2, [sp, #12]
 8008bee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	f1b9 0f00 	cmp.w	r9, #0
 8008bf8:	d01f      	beq.n	8008c3a <__multiply+0x132>
 8008bfa:	6834      	ldr	r4, [r6, #0]
 8008bfc:	f105 0114 	add.w	r1, r5, #20
 8008c00:	46b6      	mov	lr, r6
 8008c02:	f04f 0a00 	mov.w	sl, #0
 8008c06:	880a      	ldrh	r2, [r1, #0]
 8008c08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c0c:	fb09 b202 	mla	r2, r9, r2, fp
 8008c10:	4492      	add	sl, r2
 8008c12:	b2a4      	uxth	r4, r4
 8008c14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c18:	f84e 4b04 	str.w	r4, [lr], #4
 8008c1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c20:	f8be 2000 	ldrh.w	r2, [lr]
 8008c24:	0c24      	lsrs	r4, r4, #16
 8008c26:	fb09 2404 	mla	r4, r9, r4, r2
 8008c2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c2e:	458c      	cmp	ip, r1
 8008c30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c34:	d8e7      	bhi.n	8008c06 <__multiply+0xfe>
 8008c36:	9a01      	ldr	r2, [sp, #4]
 8008c38:	50b4      	str	r4, [r6, r2]
 8008c3a:	3604      	adds	r6, #4
 8008c3c:	e7a3      	b.n	8008b86 <__multiply+0x7e>
 8008c3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1a5      	bne.n	8008b92 <__multiply+0x8a>
 8008c46:	3f01      	subs	r7, #1
 8008c48:	e7a1      	b.n	8008b8e <__multiply+0x86>
 8008c4a:	bf00      	nop
 8008c4c:	0800a634 	.word	0x0800a634
 8008c50:	0800a6c4 	.word	0x0800a6c4

08008c54 <__pow5mult>:
 8008c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c58:	4615      	mov	r5, r2
 8008c5a:	f012 0203 	ands.w	r2, r2, #3
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	d007      	beq.n	8008c74 <__pow5mult+0x20>
 8008c64:	4c25      	ldr	r4, [pc, #148]	; (8008cfc <__pow5mult+0xa8>)
 8008c66:	3a01      	subs	r2, #1
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c6e:	f7ff fe51 	bl	8008914 <__multadd>
 8008c72:	4607      	mov	r7, r0
 8008c74:	10ad      	asrs	r5, r5, #2
 8008c76:	d03d      	beq.n	8008cf4 <__pow5mult+0xa0>
 8008c78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c7a:	b97c      	cbnz	r4, 8008c9c <__pow5mult+0x48>
 8008c7c:	2010      	movs	r0, #16
 8008c7e:	f7ff fdbf 	bl	8008800 <malloc>
 8008c82:	4602      	mov	r2, r0
 8008c84:	6270      	str	r0, [r6, #36]	; 0x24
 8008c86:	b928      	cbnz	r0, 8008c94 <__pow5mult+0x40>
 8008c88:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <__pow5mult+0xac>)
 8008c8a:	481e      	ldr	r0, [pc, #120]	; (8008d04 <__pow5mult+0xb0>)
 8008c8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c90:	f000 fce6 	bl	8009660 <__assert_func>
 8008c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c98:	6004      	str	r4, [r0, #0]
 8008c9a:	60c4      	str	r4, [r0, #12]
 8008c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ca4:	b94c      	cbnz	r4, 8008cba <__pow5mult+0x66>
 8008ca6:	f240 2171 	movw	r1, #625	; 0x271
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7ff ff16 	bl	8008adc <__i2b>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	6003      	str	r3, [r0, #0]
 8008cba:	f04f 0900 	mov.w	r9, #0
 8008cbe:	07eb      	lsls	r3, r5, #31
 8008cc0:	d50a      	bpl.n	8008cd8 <__pow5mult+0x84>
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f7ff ff1e 	bl	8008b08 <__multiply>
 8008ccc:	4639      	mov	r1, r7
 8008cce:	4680      	mov	r8, r0
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f7ff fdfd 	bl	80088d0 <_Bfree>
 8008cd6:	4647      	mov	r7, r8
 8008cd8:	106d      	asrs	r5, r5, #1
 8008cda:	d00b      	beq.n	8008cf4 <__pow5mult+0xa0>
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	b938      	cbnz	r0, 8008cf0 <__pow5mult+0x9c>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7ff ff0f 	bl	8008b08 <__multiply>
 8008cea:	6020      	str	r0, [r4, #0]
 8008cec:	f8c0 9000 	str.w	r9, [r0]
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	e7e4      	b.n	8008cbe <__pow5mult+0x6a>
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfa:	bf00      	nop
 8008cfc:	0800a818 	.word	0x0800a818
 8008d00:	0800a5be 	.word	0x0800a5be
 8008d04:	0800a6c4 	.word	0x0800a6c4

08008d08 <__lshift>:
 8008d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	6849      	ldr	r1, [r1, #4]
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	4607      	mov	r7, r0
 8008d1a:	4691      	mov	r9, r2
 8008d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d20:	f108 0601 	add.w	r6, r8, #1
 8008d24:	42b3      	cmp	r3, r6
 8008d26:	db0b      	blt.n	8008d40 <__lshift+0x38>
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff fd91 	bl	8008850 <_Balloc>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b948      	cbnz	r0, 8008d46 <__lshift+0x3e>
 8008d32:	4602      	mov	r2, r0
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <__lshift+0xd0>)
 8008d36:	4829      	ldr	r0, [pc, #164]	; (8008ddc <__lshift+0xd4>)
 8008d38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d3c:	f000 fc90 	bl	8009660 <__assert_func>
 8008d40:	3101      	adds	r1, #1
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	e7ee      	b.n	8008d24 <__lshift+0x1c>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f100 0114 	add.w	r1, r0, #20
 8008d4c:	f100 0210 	add.w	r2, r0, #16
 8008d50:	4618      	mov	r0, r3
 8008d52:	4553      	cmp	r3, sl
 8008d54:	db33      	blt.n	8008dbe <__lshift+0xb6>
 8008d56:	6920      	ldr	r0, [r4, #16]
 8008d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d5c:	f104 0314 	add.w	r3, r4, #20
 8008d60:	f019 091f 	ands.w	r9, r9, #31
 8008d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d6c:	d02b      	beq.n	8008dc6 <__lshift+0xbe>
 8008d6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d72:	468a      	mov	sl, r1
 8008d74:	2200      	movs	r2, #0
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	fa00 f009 	lsl.w	r0, r0, r9
 8008d7c:	4302      	orrs	r2, r0
 8008d7e:	f84a 2b04 	str.w	r2, [sl], #4
 8008d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d86:	459c      	cmp	ip, r3
 8008d88:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d8c:	d8f3      	bhi.n	8008d76 <__lshift+0x6e>
 8008d8e:	ebac 0304 	sub.w	r3, ip, r4
 8008d92:	3b15      	subs	r3, #21
 8008d94:	f023 0303 	bic.w	r3, r3, #3
 8008d98:	3304      	adds	r3, #4
 8008d9a:	f104 0015 	add.w	r0, r4, #21
 8008d9e:	4584      	cmp	ip, r0
 8008da0:	bf38      	it	cc
 8008da2:	2304      	movcc	r3, #4
 8008da4:	50ca      	str	r2, [r1, r3]
 8008da6:	b10a      	cbz	r2, 8008dac <__lshift+0xa4>
 8008da8:	f108 0602 	add.w	r6, r8, #2
 8008dac:	3e01      	subs	r6, #1
 8008dae:	4638      	mov	r0, r7
 8008db0:	612e      	str	r6, [r5, #16]
 8008db2:	4621      	mov	r1, r4
 8008db4:	f7ff fd8c 	bl	80088d0 <_Bfree>
 8008db8:	4628      	mov	r0, r5
 8008dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	e7c5      	b.n	8008d52 <__lshift+0x4a>
 8008dc6:	3904      	subs	r1, #4
 8008dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dd0:	459c      	cmp	ip, r3
 8008dd2:	d8f9      	bhi.n	8008dc8 <__lshift+0xc0>
 8008dd4:	e7ea      	b.n	8008dac <__lshift+0xa4>
 8008dd6:	bf00      	nop
 8008dd8:	0800a634 	.word	0x0800a634
 8008ddc:	0800a6c4 	.word	0x0800a6c4

08008de0 <__mcmp>:
 8008de0:	b530      	push	{r4, r5, lr}
 8008de2:	6902      	ldr	r2, [r0, #16]
 8008de4:	690c      	ldr	r4, [r1, #16]
 8008de6:	1b12      	subs	r2, r2, r4
 8008de8:	d10e      	bne.n	8008e08 <__mcmp+0x28>
 8008dea:	f100 0314 	add.w	r3, r0, #20
 8008dee:	3114      	adds	r1, #20
 8008df0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008df4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008df8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008dfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e00:	42a5      	cmp	r5, r4
 8008e02:	d003      	beq.n	8008e0c <__mcmp+0x2c>
 8008e04:	d305      	bcc.n	8008e12 <__mcmp+0x32>
 8008e06:	2201      	movs	r2, #1
 8008e08:	4610      	mov	r0, r2
 8008e0a:	bd30      	pop	{r4, r5, pc}
 8008e0c:	4283      	cmp	r3, r0
 8008e0e:	d3f3      	bcc.n	8008df8 <__mcmp+0x18>
 8008e10:	e7fa      	b.n	8008e08 <__mcmp+0x28>
 8008e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e16:	e7f7      	b.n	8008e08 <__mcmp+0x28>

08008e18 <__mdiff>:
 8008e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	4606      	mov	r6, r0
 8008e20:	4611      	mov	r1, r2
 8008e22:	4620      	mov	r0, r4
 8008e24:	4617      	mov	r7, r2
 8008e26:	f7ff ffdb 	bl	8008de0 <__mcmp>
 8008e2a:	1e05      	subs	r5, r0, #0
 8008e2c:	d110      	bne.n	8008e50 <__mdiff+0x38>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff fd0d 	bl	8008850 <_Balloc>
 8008e36:	b930      	cbnz	r0, 8008e46 <__mdiff+0x2e>
 8008e38:	4b39      	ldr	r3, [pc, #228]	; (8008f20 <__mdiff+0x108>)
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	f240 2132 	movw	r1, #562	; 0x232
 8008e40:	4838      	ldr	r0, [pc, #224]	; (8008f24 <__mdiff+0x10c>)
 8008e42:	f000 fc0d 	bl	8009660 <__assert_func>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e50:	bfa4      	itt	ge
 8008e52:	463b      	movge	r3, r7
 8008e54:	4627      	movge	r7, r4
 8008e56:	4630      	mov	r0, r6
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	bfa6      	itte	ge
 8008e5c:	461c      	movge	r4, r3
 8008e5e:	2500      	movge	r5, #0
 8008e60:	2501      	movlt	r5, #1
 8008e62:	f7ff fcf5 	bl	8008850 <_Balloc>
 8008e66:	b920      	cbnz	r0, 8008e72 <__mdiff+0x5a>
 8008e68:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <__mdiff+0x108>)
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e70:	e7e6      	b.n	8008e40 <__mdiff+0x28>
 8008e72:	693e      	ldr	r6, [r7, #16]
 8008e74:	60c5      	str	r5, [r0, #12]
 8008e76:	6925      	ldr	r5, [r4, #16]
 8008e78:	f107 0114 	add.w	r1, r7, #20
 8008e7c:	f104 0914 	add.w	r9, r4, #20
 8008e80:	f100 0e14 	add.w	lr, r0, #20
 8008e84:	f107 0210 	add.w	r2, r7, #16
 8008e88:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008e8c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008e90:	46f2      	mov	sl, lr
 8008e92:	2700      	movs	r7, #0
 8008e94:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e9c:	fa1f f883 	uxth.w	r8, r3
 8008ea0:	fa17 f78b 	uxtah	r7, r7, fp
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	eba7 0808 	sub.w	r8, r7, r8
 8008eaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008eae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008eb2:	fa1f f888 	uxth.w	r8, r8
 8008eb6:	141f      	asrs	r7, r3, #16
 8008eb8:	454d      	cmp	r5, r9
 8008eba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ebe:	f84a 3b04 	str.w	r3, [sl], #4
 8008ec2:	d8e7      	bhi.n	8008e94 <__mdiff+0x7c>
 8008ec4:	1b2b      	subs	r3, r5, r4
 8008ec6:	3b15      	subs	r3, #21
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	3304      	adds	r3, #4
 8008ece:	3415      	adds	r4, #21
 8008ed0:	42a5      	cmp	r5, r4
 8008ed2:	bf38      	it	cc
 8008ed4:	2304      	movcc	r3, #4
 8008ed6:	4419      	add	r1, r3
 8008ed8:	4473      	add	r3, lr
 8008eda:	469e      	mov	lr, r3
 8008edc:	460d      	mov	r5, r1
 8008ede:	4565      	cmp	r5, ip
 8008ee0:	d30e      	bcc.n	8008f00 <__mdiff+0xe8>
 8008ee2:	f10c 0203 	add.w	r2, ip, #3
 8008ee6:	1a52      	subs	r2, r2, r1
 8008ee8:	f022 0203 	bic.w	r2, r2, #3
 8008eec:	3903      	subs	r1, #3
 8008eee:	458c      	cmp	ip, r1
 8008ef0:	bf38      	it	cc
 8008ef2:	2200      	movcc	r2, #0
 8008ef4:	441a      	add	r2, r3
 8008ef6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008efa:	b17b      	cbz	r3, 8008f1c <__mdiff+0x104>
 8008efc:	6106      	str	r6, [r0, #16]
 8008efe:	e7a5      	b.n	8008e4c <__mdiff+0x34>
 8008f00:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f04:	fa17 f488 	uxtah	r4, r7, r8
 8008f08:	1422      	asrs	r2, r4, #16
 8008f0a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f0e:	b2a4      	uxth	r4, r4
 8008f10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f14:	f84e 4b04 	str.w	r4, [lr], #4
 8008f18:	1417      	asrs	r7, r2, #16
 8008f1a:	e7e0      	b.n	8008ede <__mdiff+0xc6>
 8008f1c:	3e01      	subs	r6, #1
 8008f1e:	e7ea      	b.n	8008ef6 <__mdiff+0xde>
 8008f20:	0800a634 	.word	0x0800a634
 8008f24:	0800a6c4 	.word	0x0800a6c4

08008f28 <__ulp>:
 8008f28:	b082      	sub	sp, #8
 8008f2a:	ed8d 0b00 	vstr	d0, [sp]
 8008f2e:	9b01      	ldr	r3, [sp, #4]
 8008f30:	4912      	ldr	r1, [pc, #72]	; (8008f7c <__ulp+0x54>)
 8008f32:	4019      	ands	r1, r3
 8008f34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	dd05      	ble.n	8008f48 <__ulp+0x20>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	ec43 2b10 	vmov	d0, r2, r3
 8008f44:	b002      	add	sp, #8
 8008f46:	4770      	bx	lr
 8008f48:	4249      	negs	r1, r1
 8008f4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008f4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	da04      	bge.n	8008f66 <__ulp+0x3e>
 8008f5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008f60:	fa41 f300 	asr.w	r3, r1, r0
 8008f64:	e7ec      	b.n	8008f40 <__ulp+0x18>
 8008f66:	f1a0 0114 	sub.w	r1, r0, #20
 8008f6a:	291e      	cmp	r1, #30
 8008f6c:	bfda      	itte	le
 8008f6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008f72:	fa20 f101 	lsrle.w	r1, r0, r1
 8008f76:	2101      	movgt	r1, #1
 8008f78:	460a      	mov	r2, r1
 8008f7a:	e7e1      	b.n	8008f40 <__ulp+0x18>
 8008f7c:	7ff00000 	.word	0x7ff00000

08008f80 <__b2d>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	6905      	ldr	r5, [r0, #16]
 8008f84:	f100 0714 	add.w	r7, r0, #20
 8008f88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f8c:	1f2e      	subs	r6, r5, #4
 8008f8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f92:	4620      	mov	r0, r4
 8008f94:	f7ff fd52 	bl	8008a3c <__hi0bits>
 8008f98:	f1c0 0320 	rsb	r3, r0, #32
 8008f9c:	280a      	cmp	r0, #10
 8008f9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800901c <__b2d+0x9c>
 8008fa2:	600b      	str	r3, [r1, #0]
 8008fa4:	dc14      	bgt.n	8008fd0 <__b2d+0x50>
 8008fa6:	f1c0 0e0b 	rsb	lr, r0, #11
 8008faa:	fa24 f10e 	lsr.w	r1, r4, lr
 8008fae:	42b7      	cmp	r7, r6
 8008fb0:	ea41 030c 	orr.w	r3, r1, ip
 8008fb4:	bf34      	ite	cc
 8008fb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fba:	2100      	movcs	r1, #0
 8008fbc:	3015      	adds	r0, #21
 8008fbe:	fa04 f000 	lsl.w	r0, r4, r0
 8008fc2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008fc6:	ea40 0201 	orr.w	r2, r0, r1
 8008fca:	ec43 2b10 	vmov	d0, r2, r3
 8008fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd0:	42b7      	cmp	r7, r6
 8008fd2:	bf3a      	itte	cc
 8008fd4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fd8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008fdc:	2100      	movcs	r1, #0
 8008fde:	380b      	subs	r0, #11
 8008fe0:	d017      	beq.n	8009012 <__b2d+0x92>
 8008fe2:	f1c0 0c20 	rsb	ip, r0, #32
 8008fe6:	fa04 f500 	lsl.w	r5, r4, r0
 8008fea:	42be      	cmp	r6, r7
 8008fec:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ff0:	ea45 0504 	orr.w	r5, r5, r4
 8008ff4:	bf8c      	ite	hi
 8008ff6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008ffa:	2400      	movls	r4, #0
 8008ffc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009000:	fa01 f000 	lsl.w	r0, r1, r0
 8009004:	fa24 f40c 	lsr.w	r4, r4, ip
 8009008:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800900c:	ea40 0204 	orr.w	r2, r0, r4
 8009010:	e7db      	b.n	8008fca <__b2d+0x4a>
 8009012:	ea44 030c 	orr.w	r3, r4, ip
 8009016:	460a      	mov	r2, r1
 8009018:	e7d7      	b.n	8008fca <__b2d+0x4a>
 800901a:	bf00      	nop
 800901c:	3ff00000 	.word	0x3ff00000

08009020 <__d2b>:
 8009020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009024:	4689      	mov	r9, r1
 8009026:	2101      	movs	r1, #1
 8009028:	ec57 6b10 	vmov	r6, r7, d0
 800902c:	4690      	mov	r8, r2
 800902e:	f7ff fc0f 	bl	8008850 <_Balloc>
 8009032:	4604      	mov	r4, r0
 8009034:	b930      	cbnz	r0, 8009044 <__d2b+0x24>
 8009036:	4602      	mov	r2, r0
 8009038:	4b25      	ldr	r3, [pc, #148]	; (80090d0 <__d2b+0xb0>)
 800903a:	4826      	ldr	r0, [pc, #152]	; (80090d4 <__d2b+0xb4>)
 800903c:	f240 310a 	movw	r1, #778	; 0x30a
 8009040:	f000 fb0e 	bl	8009660 <__assert_func>
 8009044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800904c:	bb35      	cbnz	r5, 800909c <__d2b+0x7c>
 800904e:	2e00      	cmp	r6, #0
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	d028      	beq.n	80090a6 <__d2b+0x86>
 8009054:	4668      	mov	r0, sp
 8009056:	9600      	str	r6, [sp, #0]
 8009058:	f7ff fd10 	bl	8008a7c <__lo0bits>
 800905c:	9900      	ldr	r1, [sp, #0]
 800905e:	b300      	cbz	r0, 80090a2 <__d2b+0x82>
 8009060:	9a01      	ldr	r2, [sp, #4]
 8009062:	f1c0 0320 	rsb	r3, r0, #32
 8009066:	fa02 f303 	lsl.w	r3, r2, r3
 800906a:	430b      	orrs	r3, r1
 800906c:	40c2      	lsrs	r2, r0
 800906e:	6163      	str	r3, [r4, #20]
 8009070:	9201      	str	r2, [sp, #4]
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	61a3      	str	r3, [r4, #24]
 8009076:	2b00      	cmp	r3, #0
 8009078:	bf14      	ite	ne
 800907a:	2202      	movne	r2, #2
 800907c:	2201      	moveq	r2, #1
 800907e:	6122      	str	r2, [r4, #16]
 8009080:	b1d5      	cbz	r5, 80090b8 <__d2b+0x98>
 8009082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009086:	4405      	add	r5, r0
 8009088:	f8c9 5000 	str.w	r5, [r9]
 800908c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009090:	f8c8 0000 	str.w	r0, [r8]
 8009094:	4620      	mov	r0, r4
 8009096:	b003      	add	sp, #12
 8009098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090a0:	e7d5      	b.n	800904e <__d2b+0x2e>
 80090a2:	6161      	str	r1, [r4, #20]
 80090a4:	e7e5      	b.n	8009072 <__d2b+0x52>
 80090a6:	a801      	add	r0, sp, #4
 80090a8:	f7ff fce8 	bl	8008a7c <__lo0bits>
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	6163      	str	r3, [r4, #20]
 80090b0:	2201      	movs	r2, #1
 80090b2:	6122      	str	r2, [r4, #16]
 80090b4:	3020      	adds	r0, #32
 80090b6:	e7e3      	b.n	8009080 <__d2b+0x60>
 80090b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090c0:	f8c9 0000 	str.w	r0, [r9]
 80090c4:	6918      	ldr	r0, [r3, #16]
 80090c6:	f7ff fcb9 	bl	8008a3c <__hi0bits>
 80090ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090ce:	e7df      	b.n	8009090 <__d2b+0x70>
 80090d0:	0800a634 	.word	0x0800a634
 80090d4:	0800a6c4 	.word	0x0800a6c4

080090d8 <__ratio>:
 80090d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	4688      	mov	r8, r1
 80090de:	4669      	mov	r1, sp
 80090e0:	4681      	mov	r9, r0
 80090e2:	f7ff ff4d 	bl	8008f80 <__b2d>
 80090e6:	a901      	add	r1, sp, #4
 80090e8:	4640      	mov	r0, r8
 80090ea:	ec55 4b10 	vmov	r4, r5, d0
 80090ee:	f7ff ff47 	bl	8008f80 <__b2d>
 80090f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090fa:	eba3 0c02 	sub.w	ip, r3, r2
 80090fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009108:	ec51 0b10 	vmov	r0, r1, d0
 800910c:	2b00      	cmp	r3, #0
 800910e:	bfd6      	itet	le
 8009110:	460a      	movle	r2, r1
 8009112:	462a      	movgt	r2, r5
 8009114:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009118:	468b      	mov	fp, r1
 800911a:	462f      	mov	r7, r5
 800911c:	bfd4      	ite	le
 800911e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009122:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009126:	4620      	mov	r0, r4
 8009128:	ee10 2a10 	vmov	r2, s0
 800912c:	465b      	mov	r3, fp
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 fba4 	bl	800087c <__aeabi_ddiv>
 8009134:	ec41 0b10 	vmov	d0, r0, r1
 8009138:	b003      	add	sp, #12
 800913a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800913e <__copybits>:
 800913e:	3901      	subs	r1, #1
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	1149      	asrs	r1, r1, #5
 8009144:	6914      	ldr	r4, [r2, #16]
 8009146:	3101      	adds	r1, #1
 8009148:	f102 0314 	add.w	r3, r2, #20
 800914c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009150:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009154:	1f05      	subs	r5, r0, #4
 8009156:	42a3      	cmp	r3, r4
 8009158:	d30c      	bcc.n	8009174 <__copybits+0x36>
 800915a:	1aa3      	subs	r3, r4, r2
 800915c:	3b11      	subs	r3, #17
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	3211      	adds	r2, #17
 8009164:	42a2      	cmp	r2, r4
 8009166:	bf88      	it	hi
 8009168:	2300      	movhi	r3, #0
 800916a:	4418      	add	r0, r3
 800916c:	2300      	movs	r3, #0
 800916e:	4288      	cmp	r0, r1
 8009170:	d305      	bcc.n	800917e <__copybits+0x40>
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	f853 6b04 	ldr.w	r6, [r3], #4
 8009178:	f845 6f04 	str.w	r6, [r5, #4]!
 800917c:	e7eb      	b.n	8009156 <__copybits+0x18>
 800917e:	f840 3b04 	str.w	r3, [r0], #4
 8009182:	e7f4      	b.n	800916e <__copybits+0x30>

08009184 <__any_on>:
 8009184:	f100 0214 	add.w	r2, r0, #20
 8009188:	6900      	ldr	r0, [r0, #16]
 800918a:	114b      	asrs	r3, r1, #5
 800918c:	4298      	cmp	r0, r3
 800918e:	b510      	push	{r4, lr}
 8009190:	db11      	blt.n	80091b6 <__any_on+0x32>
 8009192:	dd0a      	ble.n	80091aa <__any_on+0x26>
 8009194:	f011 011f 	ands.w	r1, r1, #31
 8009198:	d007      	beq.n	80091aa <__any_on+0x26>
 800919a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800919e:	fa24 f001 	lsr.w	r0, r4, r1
 80091a2:	fa00 f101 	lsl.w	r1, r0, r1
 80091a6:	428c      	cmp	r4, r1
 80091a8:	d10b      	bne.n	80091c2 <__any_on+0x3e>
 80091aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d803      	bhi.n	80091ba <__any_on+0x36>
 80091b2:	2000      	movs	r0, #0
 80091b4:	bd10      	pop	{r4, pc}
 80091b6:	4603      	mov	r3, r0
 80091b8:	e7f7      	b.n	80091aa <__any_on+0x26>
 80091ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091be:	2900      	cmp	r1, #0
 80091c0:	d0f5      	beq.n	80091ae <__any_on+0x2a>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7f6      	b.n	80091b4 <__any_on+0x30>

080091c6 <_calloc_r>:
 80091c6:	b513      	push	{r0, r1, r4, lr}
 80091c8:	434a      	muls	r2, r1
 80091ca:	4611      	mov	r1, r2
 80091cc:	9201      	str	r2, [sp, #4]
 80091ce:	f000 f859 	bl	8009284 <_malloc_r>
 80091d2:	4604      	mov	r4, r0
 80091d4:	b118      	cbz	r0, 80091de <_calloc_r+0x18>
 80091d6:	9a01      	ldr	r2, [sp, #4]
 80091d8:	2100      	movs	r1, #0
 80091da:	f7fc fdb7 	bl	8005d4c <memset>
 80091de:	4620      	mov	r0, r4
 80091e0:	b002      	add	sp, #8
 80091e2:	bd10      	pop	{r4, pc}

080091e4 <_free_r>:
 80091e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091e6:	2900      	cmp	r1, #0
 80091e8:	d048      	beq.n	800927c <_free_r+0x98>
 80091ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ee:	9001      	str	r0, [sp, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f1a1 0404 	sub.w	r4, r1, #4
 80091f6:	bfb8      	it	lt
 80091f8:	18e4      	addlt	r4, r4, r3
 80091fa:	f000 fa7b 	bl	80096f4 <__malloc_lock>
 80091fe:	4a20      	ldr	r2, [pc, #128]	; (8009280 <_free_r+0x9c>)
 8009200:	9801      	ldr	r0, [sp, #4]
 8009202:	6813      	ldr	r3, [r2, #0]
 8009204:	4615      	mov	r5, r2
 8009206:	b933      	cbnz	r3, 8009216 <_free_r+0x32>
 8009208:	6063      	str	r3, [r4, #4]
 800920a:	6014      	str	r4, [r2, #0]
 800920c:	b003      	add	sp, #12
 800920e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009212:	f000 ba75 	b.w	8009700 <__malloc_unlock>
 8009216:	42a3      	cmp	r3, r4
 8009218:	d90b      	bls.n	8009232 <_free_r+0x4e>
 800921a:	6821      	ldr	r1, [r4, #0]
 800921c:	1862      	adds	r2, r4, r1
 800921e:	4293      	cmp	r3, r2
 8009220:	bf04      	itt	eq
 8009222:	681a      	ldreq	r2, [r3, #0]
 8009224:	685b      	ldreq	r3, [r3, #4]
 8009226:	6063      	str	r3, [r4, #4]
 8009228:	bf04      	itt	eq
 800922a:	1852      	addeq	r2, r2, r1
 800922c:	6022      	streq	r2, [r4, #0]
 800922e:	602c      	str	r4, [r5, #0]
 8009230:	e7ec      	b.n	800920c <_free_r+0x28>
 8009232:	461a      	mov	r2, r3
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	b10b      	cbz	r3, 800923c <_free_r+0x58>
 8009238:	42a3      	cmp	r3, r4
 800923a:	d9fa      	bls.n	8009232 <_free_r+0x4e>
 800923c:	6811      	ldr	r1, [r2, #0]
 800923e:	1855      	adds	r5, r2, r1
 8009240:	42a5      	cmp	r5, r4
 8009242:	d10b      	bne.n	800925c <_free_r+0x78>
 8009244:	6824      	ldr	r4, [r4, #0]
 8009246:	4421      	add	r1, r4
 8009248:	1854      	adds	r4, r2, r1
 800924a:	42a3      	cmp	r3, r4
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	d1dd      	bne.n	800920c <_free_r+0x28>
 8009250:	681c      	ldr	r4, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	6053      	str	r3, [r2, #4]
 8009256:	4421      	add	r1, r4
 8009258:	6011      	str	r1, [r2, #0]
 800925a:	e7d7      	b.n	800920c <_free_r+0x28>
 800925c:	d902      	bls.n	8009264 <_free_r+0x80>
 800925e:	230c      	movs	r3, #12
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	e7d3      	b.n	800920c <_free_r+0x28>
 8009264:	6825      	ldr	r5, [r4, #0]
 8009266:	1961      	adds	r1, r4, r5
 8009268:	428b      	cmp	r3, r1
 800926a:	bf04      	itt	eq
 800926c:	6819      	ldreq	r1, [r3, #0]
 800926e:	685b      	ldreq	r3, [r3, #4]
 8009270:	6063      	str	r3, [r4, #4]
 8009272:	bf04      	itt	eq
 8009274:	1949      	addeq	r1, r1, r5
 8009276:	6021      	streq	r1, [r4, #0]
 8009278:	6054      	str	r4, [r2, #4]
 800927a:	e7c7      	b.n	800920c <_free_r+0x28>
 800927c:	b003      	add	sp, #12
 800927e:	bd30      	pop	{r4, r5, pc}
 8009280:	2000020c 	.word	0x2000020c

08009284 <_malloc_r>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	1ccd      	adds	r5, r1, #3
 8009288:	f025 0503 	bic.w	r5, r5, #3
 800928c:	3508      	adds	r5, #8
 800928e:	2d0c      	cmp	r5, #12
 8009290:	bf38      	it	cc
 8009292:	250c      	movcc	r5, #12
 8009294:	2d00      	cmp	r5, #0
 8009296:	4606      	mov	r6, r0
 8009298:	db01      	blt.n	800929e <_malloc_r+0x1a>
 800929a:	42a9      	cmp	r1, r5
 800929c:	d903      	bls.n	80092a6 <_malloc_r+0x22>
 800929e:	230c      	movs	r3, #12
 80092a0:	6033      	str	r3, [r6, #0]
 80092a2:	2000      	movs	r0, #0
 80092a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a6:	f000 fa25 	bl	80096f4 <__malloc_lock>
 80092aa:	4921      	ldr	r1, [pc, #132]	; (8009330 <_malloc_r+0xac>)
 80092ac:	680a      	ldr	r2, [r1, #0]
 80092ae:	4614      	mov	r4, r2
 80092b0:	b99c      	cbnz	r4, 80092da <_malloc_r+0x56>
 80092b2:	4f20      	ldr	r7, [pc, #128]	; (8009334 <_malloc_r+0xb0>)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	b923      	cbnz	r3, 80092c2 <_malloc_r+0x3e>
 80092b8:	4621      	mov	r1, r4
 80092ba:	4630      	mov	r0, r6
 80092bc:	f000 f9a0 	bl	8009600 <_sbrk_r>
 80092c0:	6038      	str	r0, [r7, #0]
 80092c2:	4629      	mov	r1, r5
 80092c4:	4630      	mov	r0, r6
 80092c6:	f000 f99b 	bl	8009600 <_sbrk_r>
 80092ca:	1c43      	adds	r3, r0, #1
 80092cc:	d123      	bne.n	8009316 <_malloc_r+0x92>
 80092ce:	230c      	movs	r3, #12
 80092d0:	6033      	str	r3, [r6, #0]
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 fa14 	bl	8009700 <__malloc_unlock>
 80092d8:	e7e3      	b.n	80092a2 <_malloc_r+0x1e>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	1b5b      	subs	r3, r3, r5
 80092de:	d417      	bmi.n	8009310 <_malloc_r+0x8c>
 80092e0:	2b0b      	cmp	r3, #11
 80092e2:	d903      	bls.n	80092ec <_malloc_r+0x68>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	441c      	add	r4, r3
 80092e8:	6025      	str	r5, [r4, #0]
 80092ea:	e004      	b.n	80092f6 <_malloc_r+0x72>
 80092ec:	6863      	ldr	r3, [r4, #4]
 80092ee:	42a2      	cmp	r2, r4
 80092f0:	bf0c      	ite	eq
 80092f2:	600b      	streq	r3, [r1, #0]
 80092f4:	6053      	strne	r3, [r2, #4]
 80092f6:	4630      	mov	r0, r6
 80092f8:	f000 fa02 	bl	8009700 <__malloc_unlock>
 80092fc:	f104 000b 	add.w	r0, r4, #11
 8009300:	1d23      	adds	r3, r4, #4
 8009302:	f020 0007 	bic.w	r0, r0, #7
 8009306:	1ac2      	subs	r2, r0, r3
 8009308:	d0cc      	beq.n	80092a4 <_malloc_r+0x20>
 800930a:	1a1b      	subs	r3, r3, r0
 800930c:	50a3      	str	r3, [r4, r2]
 800930e:	e7c9      	b.n	80092a4 <_malloc_r+0x20>
 8009310:	4622      	mov	r2, r4
 8009312:	6864      	ldr	r4, [r4, #4]
 8009314:	e7cc      	b.n	80092b0 <_malloc_r+0x2c>
 8009316:	1cc4      	adds	r4, r0, #3
 8009318:	f024 0403 	bic.w	r4, r4, #3
 800931c:	42a0      	cmp	r0, r4
 800931e:	d0e3      	beq.n	80092e8 <_malloc_r+0x64>
 8009320:	1a21      	subs	r1, r4, r0
 8009322:	4630      	mov	r0, r6
 8009324:	f000 f96c 	bl	8009600 <_sbrk_r>
 8009328:	3001      	adds	r0, #1
 800932a:	d1dd      	bne.n	80092e8 <_malloc_r+0x64>
 800932c:	e7cf      	b.n	80092ce <_malloc_r+0x4a>
 800932e:	bf00      	nop
 8009330:	2000020c 	.word	0x2000020c
 8009334:	20000210 	.word	0x20000210

08009338 <__ssputs_r>:
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	688e      	ldr	r6, [r1, #8]
 800933e:	429e      	cmp	r6, r3
 8009340:	4682      	mov	sl, r0
 8009342:	460c      	mov	r4, r1
 8009344:	4690      	mov	r8, r2
 8009346:	461f      	mov	r7, r3
 8009348:	d838      	bhi.n	80093bc <__ssputs_r+0x84>
 800934a:	898a      	ldrh	r2, [r1, #12]
 800934c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009350:	d032      	beq.n	80093b8 <__ssputs_r+0x80>
 8009352:	6825      	ldr	r5, [r4, #0]
 8009354:	6909      	ldr	r1, [r1, #16]
 8009356:	eba5 0901 	sub.w	r9, r5, r1
 800935a:	6965      	ldr	r5, [r4, #20]
 800935c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009364:	3301      	adds	r3, #1
 8009366:	444b      	add	r3, r9
 8009368:	106d      	asrs	r5, r5, #1
 800936a:	429d      	cmp	r5, r3
 800936c:	bf38      	it	cc
 800936e:	461d      	movcc	r5, r3
 8009370:	0553      	lsls	r3, r2, #21
 8009372:	d531      	bpl.n	80093d8 <__ssputs_r+0xa0>
 8009374:	4629      	mov	r1, r5
 8009376:	f7ff ff85 	bl	8009284 <_malloc_r>
 800937a:	4606      	mov	r6, r0
 800937c:	b950      	cbnz	r0, 8009394 <__ssputs_r+0x5c>
 800937e:	230c      	movs	r3, #12
 8009380:	f8ca 3000 	str.w	r3, [sl]
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	6921      	ldr	r1, [r4, #16]
 8009396:	464a      	mov	r2, r9
 8009398:	f7ff fa4c 	bl	8008834 <memcpy>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	6126      	str	r6, [r4, #16]
 80093aa:	6165      	str	r5, [r4, #20]
 80093ac:	444e      	add	r6, r9
 80093ae:	eba5 0509 	sub.w	r5, r5, r9
 80093b2:	6026      	str	r6, [r4, #0]
 80093b4:	60a5      	str	r5, [r4, #8]
 80093b6:	463e      	mov	r6, r7
 80093b8:	42be      	cmp	r6, r7
 80093ba:	d900      	bls.n	80093be <__ssputs_r+0x86>
 80093bc:	463e      	mov	r6, r7
 80093be:	4632      	mov	r2, r6
 80093c0:	6820      	ldr	r0, [r4, #0]
 80093c2:	4641      	mov	r1, r8
 80093c4:	f000 f97c 	bl	80096c0 <memmove>
 80093c8:	68a3      	ldr	r3, [r4, #8]
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	1b9b      	subs	r3, r3, r6
 80093ce:	4432      	add	r2, r6
 80093d0:	60a3      	str	r3, [r4, #8]
 80093d2:	6022      	str	r2, [r4, #0]
 80093d4:	2000      	movs	r0, #0
 80093d6:	e7db      	b.n	8009390 <__ssputs_r+0x58>
 80093d8:	462a      	mov	r2, r5
 80093da:	f000 f997 	bl	800970c <_realloc_r>
 80093de:	4606      	mov	r6, r0
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d1e1      	bne.n	80093a8 <__ssputs_r+0x70>
 80093e4:	6921      	ldr	r1, [r4, #16]
 80093e6:	4650      	mov	r0, sl
 80093e8:	f7ff fefc 	bl	80091e4 <_free_r>
 80093ec:	e7c7      	b.n	800937e <__ssputs_r+0x46>
	...

080093f0 <_svfiprintf_r>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	4698      	mov	r8, r3
 80093f6:	898b      	ldrh	r3, [r1, #12]
 80093f8:	061b      	lsls	r3, r3, #24
 80093fa:	b09d      	sub	sp, #116	; 0x74
 80093fc:	4607      	mov	r7, r0
 80093fe:	460d      	mov	r5, r1
 8009400:	4614      	mov	r4, r2
 8009402:	d50e      	bpl.n	8009422 <_svfiprintf_r+0x32>
 8009404:	690b      	ldr	r3, [r1, #16]
 8009406:	b963      	cbnz	r3, 8009422 <_svfiprintf_r+0x32>
 8009408:	2140      	movs	r1, #64	; 0x40
 800940a:	f7ff ff3b 	bl	8009284 <_malloc_r>
 800940e:	6028      	str	r0, [r5, #0]
 8009410:	6128      	str	r0, [r5, #16]
 8009412:	b920      	cbnz	r0, 800941e <_svfiprintf_r+0x2e>
 8009414:	230c      	movs	r3, #12
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800941c:	e0d1      	b.n	80095c2 <_svfiprintf_r+0x1d2>
 800941e:	2340      	movs	r3, #64	; 0x40
 8009420:	616b      	str	r3, [r5, #20]
 8009422:	2300      	movs	r3, #0
 8009424:	9309      	str	r3, [sp, #36]	; 0x24
 8009426:	2320      	movs	r3, #32
 8009428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800942c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009430:	2330      	movs	r3, #48	; 0x30
 8009432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095dc <_svfiprintf_r+0x1ec>
 8009436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800943a:	f04f 0901 	mov.w	r9, #1
 800943e:	4623      	mov	r3, r4
 8009440:	469a      	mov	sl, r3
 8009442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009446:	b10a      	cbz	r2, 800944c <_svfiprintf_r+0x5c>
 8009448:	2a25      	cmp	r2, #37	; 0x25
 800944a:	d1f9      	bne.n	8009440 <_svfiprintf_r+0x50>
 800944c:	ebba 0b04 	subs.w	fp, sl, r4
 8009450:	d00b      	beq.n	800946a <_svfiprintf_r+0x7a>
 8009452:	465b      	mov	r3, fp
 8009454:	4622      	mov	r2, r4
 8009456:	4629      	mov	r1, r5
 8009458:	4638      	mov	r0, r7
 800945a:	f7ff ff6d 	bl	8009338 <__ssputs_r>
 800945e:	3001      	adds	r0, #1
 8009460:	f000 80aa 	beq.w	80095b8 <_svfiprintf_r+0x1c8>
 8009464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009466:	445a      	add	r2, fp
 8009468:	9209      	str	r2, [sp, #36]	; 0x24
 800946a:	f89a 3000 	ldrb.w	r3, [sl]
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 80a2 	beq.w	80095b8 <_svfiprintf_r+0x1c8>
 8009474:	2300      	movs	r3, #0
 8009476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800947a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800947e:	f10a 0a01 	add.w	sl, sl, #1
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	9307      	str	r3, [sp, #28]
 8009486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800948a:	931a      	str	r3, [sp, #104]	; 0x68
 800948c:	4654      	mov	r4, sl
 800948e:	2205      	movs	r2, #5
 8009490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009494:	4851      	ldr	r0, [pc, #324]	; (80095dc <_svfiprintf_r+0x1ec>)
 8009496:	f7f6 febb 	bl	8000210 <memchr>
 800949a:	9a04      	ldr	r2, [sp, #16]
 800949c:	b9d8      	cbnz	r0, 80094d6 <_svfiprintf_r+0xe6>
 800949e:	06d0      	lsls	r0, r2, #27
 80094a0:	bf44      	itt	mi
 80094a2:	2320      	movmi	r3, #32
 80094a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094a8:	0711      	lsls	r1, r2, #28
 80094aa:	bf44      	itt	mi
 80094ac:	232b      	movmi	r3, #43	; 0x2b
 80094ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b2:	f89a 3000 	ldrb.w	r3, [sl]
 80094b6:	2b2a      	cmp	r3, #42	; 0x2a
 80094b8:	d015      	beq.n	80094e6 <_svfiprintf_r+0xf6>
 80094ba:	9a07      	ldr	r2, [sp, #28]
 80094bc:	4654      	mov	r4, sl
 80094be:	2000      	movs	r0, #0
 80094c0:	f04f 0c0a 	mov.w	ip, #10
 80094c4:	4621      	mov	r1, r4
 80094c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ca:	3b30      	subs	r3, #48	; 0x30
 80094cc:	2b09      	cmp	r3, #9
 80094ce:	d94e      	bls.n	800956e <_svfiprintf_r+0x17e>
 80094d0:	b1b0      	cbz	r0, 8009500 <_svfiprintf_r+0x110>
 80094d2:	9207      	str	r2, [sp, #28]
 80094d4:	e014      	b.n	8009500 <_svfiprintf_r+0x110>
 80094d6:	eba0 0308 	sub.w	r3, r0, r8
 80094da:	fa09 f303 	lsl.w	r3, r9, r3
 80094de:	4313      	orrs	r3, r2
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	46a2      	mov	sl, r4
 80094e4:	e7d2      	b.n	800948c <_svfiprintf_r+0x9c>
 80094e6:	9b03      	ldr	r3, [sp, #12]
 80094e8:	1d19      	adds	r1, r3, #4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	9103      	str	r1, [sp, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfbb      	ittet	lt
 80094f2:	425b      	neglt	r3, r3
 80094f4:	f042 0202 	orrlt.w	r2, r2, #2
 80094f8:	9307      	strge	r3, [sp, #28]
 80094fa:	9307      	strlt	r3, [sp, #28]
 80094fc:	bfb8      	it	lt
 80094fe:	9204      	strlt	r2, [sp, #16]
 8009500:	7823      	ldrb	r3, [r4, #0]
 8009502:	2b2e      	cmp	r3, #46	; 0x2e
 8009504:	d10c      	bne.n	8009520 <_svfiprintf_r+0x130>
 8009506:	7863      	ldrb	r3, [r4, #1]
 8009508:	2b2a      	cmp	r3, #42	; 0x2a
 800950a:	d135      	bne.n	8009578 <_svfiprintf_r+0x188>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	1d1a      	adds	r2, r3, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	9203      	str	r2, [sp, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfb8      	it	lt
 8009518:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800951c:	3402      	adds	r4, #2
 800951e:	9305      	str	r3, [sp, #20]
 8009520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095ec <_svfiprintf_r+0x1fc>
 8009524:	7821      	ldrb	r1, [r4, #0]
 8009526:	2203      	movs	r2, #3
 8009528:	4650      	mov	r0, sl
 800952a:	f7f6 fe71 	bl	8000210 <memchr>
 800952e:	b140      	cbz	r0, 8009542 <_svfiprintf_r+0x152>
 8009530:	2340      	movs	r3, #64	; 0x40
 8009532:	eba0 000a 	sub.w	r0, r0, sl
 8009536:	fa03 f000 	lsl.w	r0, r3, r0
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	4303      	orrs	r3, r0
 800953e:	3401      	adds	r4, #1
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009546:	4826      	ldr	r0, [pc, #152]	; (80095e0 <_svfiprintf_r+0x1f0>)
 8009548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800954c:	2206      	movs	r2, #6
 800954e:	f7f6 fe5f 	bl	8000210 <memchr>
 8009552:	2800      	cmp	r0, #0
 8009554:	d038      	beq.n	80095c8 <_svfiprintf_r+0x1d8>
 8009556:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <_svfiprintf_r+0x1f4>)
 8009558:	bb1b      	cbnz	r3, 80095a2 <_svfiprintf_r+0x1b2>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	3307      	adds	r3, #7
 800955e:	f023 0307 	bic.w	r3, r3, #7
 8009562:	3308      	adds	r3, #8
 8009564:	9303      	str	r3, [sp, #12]
 8009566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009568:	4433      	add	r3, r6
 800956a:	9309      	str	r3, [sp, #36]	; 0x24
 800956c:	e767      	b.n	800943e <_svfiprintf_r+0x4e>
 800956e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009572:	460c      	mov	r4, r1
 8009574:	2001      	movs	r0, #1
 8009576:	e7a5      	b.n	80094c4 <_svfiprintf_r+0xd4>
 8009578:	2300      	movs	r3, #0
 800957a:	3401      	adds	r4, #1
 800957c:	9305      	str	r3, [sp, #20]
 800957e:	4619      	mov	r1, r3
 8009580:	f04f 0c0a 	mov.w	ip, #10
 8009584:	4620      	mov	r0, r4
 8009586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800958a:	3a30      	subs	r2, #48	; 0x30
 800958c:	2a09      	cmp	r2, #9
 800958e:	d903      	bls.n	8009598 <_svfiprintf_r+0x1a8>
 8009590:	2b00      	cmp	r3, #0
 8009592:	d0c5      	beq.n	8009520 <_svfiprintf_r+0x130>
 8009594:	9105      	str	r1, [sp, #20]
 8009596:	e7c3      	b.n	8009520 <_svfiprintf_r+0x130>
 8009598:	fb0c 2101 	mla	r1, ip, r1, r2
 800959c:	4604      	mov	r4, r0
 800959e:	2301      	movs	r3, #1
 80095a0:	e7f0      	b.n	8009584 <_svfiprintf_r+0x194>
 80095a2:	ab03      	add	r3, sp, #12
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	462a      	mov	r2, r5
 80095a8:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <_svfiprintf_r+0x1f8>)
 80095aa:	a904      	add	r1, sp, #16
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7fc fc75 	bl	8005e9c <_printf_float>
 80095b2:	1c42      	adds	r2, r0, #1
 80095b4:	4606      	mov	r6, r0
 80095b6:	d1d6      	bne.n	8009566 <_svfiprintf_r+0x176>
 80095b8:	89ab      	ldrh	r3, [r5, #12]
 80095ba:	065b      	lsls	r3, r3, #25
 80095bc:	f53f af2c 	bmi.w	8009418 <_svfiprintf_r+0x28>
 80095c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095c2:	b01d      	add	sp, #116	; 0x74
 80095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	ab03      	add	r3, sp, #12
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	462a      	mov	r2, r5
 80095ce:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <_svfiprintf_r+0x1f8>)
 80095d0:	a904      	add	r1, sp, #16
 80095d2:	4638      	mov	r0, r7
 80095d4:	f7fc ff06 	bl	80063e4 <_printf_i>
 80095d8:	e7eb      	b.n	80095b2 <_svfiprintf_r+0x1c2>
 80095da:	bf00      	nop
 80095dc:	0800a824 	.word	0x0800a824
 80095e0:	0800a82e 	.word	0x0800a82e
 80095e4:	08005e9d 	.word	0x08005e9d
 80095e8:	08009339 	.word	0x08009339
 80095ec:	0800a82a 	.word	0x0800a82a

080095f0 <nan>:
 80095f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80095f8 <nan+0x8>
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	00000000 	.word	0x00000000
 80095fc:	7ff80000 	.word	0x7ff80000

08009600 <_sbrk_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d06      	ldr	r5, [pc, #24]	; (800961c <_sbrk_r+0x1c>)
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	f7f9 f962 	bl	80028d4 <_sbrk>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_sbrk_r+0x1a>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_sbrk_r+0x1a>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	200005ec 	.word	0x200005ec

08009620 <strncmp>:
 8009620:	b510      	push	{r4, lr}
 8009622:	b16a      	cbz	r2, 8009640 <strncmp+0x20>
 8009624:	3901      	subs	r1, #1
 8009626:	1884      	adds	r4, r0, r2
 8009628:	f810 3b01 	ldrb.w	r3, [r0], #1
 800962c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009630:	4293      	cmp	r3, r2
 8009632:	d103      	bne.n	800963c <strncmp+0x1c>
 8009634:	42a0      	cmp	r0, r4
 8009636:	d001      	beq.n	800963c <strncmp+0x1c>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f5      	bne.n	8009628 <strncmp+0x8>
 800963c:	1a98      	subs	r0, r3, r2
 800963e:	bd10      	pop	{r4, pc}
 8009640:	4610      	mov	r0, r2
 8009642:	e7fc      	b.n	800963e <strncmp+0x1e>

08009644 <__ascii_wctomb>:
 8009644:	b149      	cbz	r1, 800965a <__ascii_wctomb+0x16>
 8009646:	2aff      	cmp	r2, #255	; 0xff
 8009648:	bf85      	ittet	hi
 800964a:	238a      	movhi	r3, #138	; 0x8a
 800964c:	6003      	strhi	r3, [r0, #0]
 800964e:	700a      	strbls	r2, [r1, #0]
 8009650:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009654:	bf98      	it	ls
 8009656:	2001      	movls	r0, #1
 8009658:	4770      	bx	lr
 800965a:	4608      	mov	r0, r1
 800965c:	4770      	bx	lr
	...

08009660 <__assert_func>:
 8009660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009662:	4614      	mov	r4, r2
 8009664:	461a      	mov	r2, r3
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <__assert_func+0x2c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	68d8      	ldr	r0, [r3, #12]
 800966e:	b14c      	cbz	r4, 8009684 <__assert_func+0x24>
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <__assert_func+0x30>)
 8009672:	9100      	str	r1, [sp, #0]
 8009674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009678:	4906      	ldr	r1, [pc, #24]	; (8009694 <__assert_func+0x34>)
 800967a:	462b      	mov	r3, r5
 800967c:	f000 f80e 	bl	800969c <fiprintf>
 8009680:	f000 fa84 	bl	8009b8c <abort>
 8009684:	4b04      	ldr	r3, [pc, #16]	; (8009698 <__assert_func+0x38>)
 8009686:	461c      	mov	r4, r3
 8009688:	e7f3      	b.n	8009672 <__assert_func+0x12>
 800968a:	bf00      	nop
 800968c:	20000010 	.word	0x20000010
 8009690:	0800a835 	.word	0x0800a835
 8009694:	0800a842 	.word	0x0800a842
 8009698:	0800a870 	.word	0x0800a870

0800969c <fiprintf>:
 800969c:	b40e      	push	{r1, r2, r3}
 800969e:	b503      	push	{r0, r1, lr}
 80096a0:	4601      	mov	r1, r0
 80096a2:	ab03      	add	r3, sp, #12
 80096a4:	4805      	ldr	r0, [pc, #20]	; (80096bc <fiprintf+0x20>)
 80096a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096aa:	6800      	ldr	r0, [r0, #0]
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	f000 f87d 	bl	80097ac <_vfiprintf_r>
 80096b2:	b002      	add	sp, #8
 80096b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b8:	b003      	add	sp, #12
 80096ba:	4770      	bx	lr
 80096bc:	20000010 	.word	0x20000010

080096c0 <memmove>:
 80096c0:	4288      	cmp	r0, r1
 80096c2:	b510      	push	{r4, lr}
 80096c4:	eb01 0402 	add.w	r4, r1, r2
 80096c8:	d902      	bls.n	80096d0 <memmove+0x10>
 80096ca:	4284      	cmp	r4, r0
 80096cc:	4623      	mov	r3, r4
 80096ce:	d807      	bhi.n	80096e0 <memmove+0x20>
 80096d0:	1e43      	subs	r3, r0, #1
 80096d2:	42a1      	cmp	r1, r4
 80096d4:	d008      	beq.n	80096e8 <memmove+0x28>
 80096d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096de:	e7f8      	b.n	80096d2 <memmove+0x12>
 80096e0:	4402      	add	r2, r0
 80096e2:	4601      	mov	r1, r0
 80096e4:	428a      	cmp	r2, r1
 80096e6:	d100      	bne.n	80096ea <memmove+0x2a>
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096f2:	e7f7      	b.n	80096e4 <memmove+0x24>

080096f4 <__malloc_lock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__malloc_lock+0x8>)
 80096f6:	f000 bc09 	b.w	8009f0c <__retarget_lock_acquire_recursive>
 80096fa:	bf00      	nop
 80096fc:	200005f4 	.word	0x200005f4

08009700 <__malloc_unlock>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__malloc_unlock+0x8>)
 8009702:	f000 bc04 	b.w	8009f0e <__retarget_lock_release_recursive>
 8009706:	bf00      	nop
 8009708:	200005f4 	.word	0x200005f4

0800970c <_realloc_r>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	4607      	mov	r7, r0
 8009710:	4614      	mov	r4, r2
 8009712:	460e      	mov	r6, r1
 8009714:	b921      	cbnz	r1, 8009720 <_realloc_r+0x14>
 8009716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800971a:	4611      	mov	r1, r2
 800971c:	f7ff bdb2 	b.w	8009284 <_malloc_r>
 8009720:	b922      	cbnz	r2, 800972c <_realloc_r+0x20>
 8009722:	f7ff fd5f 	bl	80091e4 <_free_r>
 8009726:	4625      	mov	r5, r4
 8009728:	4628      	mov	r0, r5
 800972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972c:	f000 fc54 	bl	8009fd8 <_malloc_usable_size_r>
 8009730:	42a0      	cmp	r0, r4
 8009732:	d20f      	bcs.n	8009754 <_realloc_r+0x48>
 8009734:	4621      	mov	r1, r4
 8009736:	4638      	mov	r0, r7
 8009738:	f7ff fda4 	bl	8009284 <_malloc_r>
 800973c:	4605      	mov	r5, r0
 800973e:	2800      	cmp	r0, #0
 8009740:	d0f2      	beq.n	8009728 <_realloc_r+0x1c>
 8009742:	4631      	mov	r1, r6
 8009744:	4622      	mov	r2, r4
 8009746:	f7ff f875 	bl	8008834 <memcpy>
 800974a:	4631      	mov	r1, r6
 800974c:	4638      	mov	r0, r7
 800974e:	f7ff fd49 	bl	80091e4 <_free_r>
 8009752:	e7e9      	b.n	8009728 <_realloc_r+0x1c>
 8009754:	4635      	mov	r5, r6
 8009756:	e7e7      	b.n	8009728 <_realloc_r+0x1c>

08009758 <__sfputc_r>:
 8009758:	6893      	ldr	r3, [r2, #8]
 800975a:	3b01      	subs	r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	b410      	push	{r4}
 8009760:	6093      	str	r3, [r2, #8]
 8009762:	da08      	bge.n	8009776 <__sfputc_r+0x1e>
 8009764:	6994      	ldr	r4, [r2, #24]
 8009766:	42a3      	cmp	r3, r4
 8009768:	db01      	blt.n	800976e <__sfputc_r+0x16>
 800976a:	290a      	cmp	r1, #10
 800976c:	d103      	bne.n	8009776 <__sfputc_r+0x1e>
 800976e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009772:	f000 b94b 	b.w	8009a0c <__swbuf_r>
 8009776:	6813      	ldr	r3, [r2, #0]
 8009778:	1c58      	adds	r0, r3, #1
 800977a:	6010      	str	r0, [r2, #0]
 800977c:	7019      	strb	r1, [r3, #0]
 800977e:	4608      	mov	r0, r1
 8009780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009784:	4770      	bx	lr

08009786 <__sfputs_r>:
 8009786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009788:	4606      	mov	r6, r0
 800978a:	460f      	mov	r7, r1
 800978c:	4614      	mov	r4, r2
 800978e:	18d5      	adds	r5, r2, r3
 8009790:	42ac      	cmp	r4, r5
 8009792:	d101      	bne.n	8009798 <__sfputs_r+0x12>
 8009794:	2000      	movs	r0, #0
 8009796:	e007      	b.n	80097a8 <__sfputs_r+0x22>
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	463a      	mov	r2, r7
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ffda 	bl	8009758 <__sfputc_r>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d1f3      	bne.n	8009790 <__sfputs_r+0xa>
 80097a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097ac <_vfiprintf_r>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	460d      	mov	r5, r1
 80097b2:	b09d      	sub	sp, #116	; 0x74
 80097b4:	4614      	mov	r4, r2
 80097b6:	4698      	mov	r8, r3
 80097b8:	4606      	mov	r6, r0
 80097ba:	b118      	cbz	r0, 80097c4 <_vfiprintf_r+0x18>
 80097bc:	6983      	ldr	r3, [r0, #24]
 80097be:	b90b      	cbnz	r3, 80097c4 <_vfiprintf_r+0x18>
 80097c0:	f000 fb06 	bl	8009dd0 <__sinit>
 80097c4:	4b89      	ldr	r3, [pc, #548]	; (80099ec <_vfiprintf_r+0x240>)
 80097c6:	429d      	cmp	r5, r3
 80097c8:	d11b      	bne.n	8009802 <_vfiprintf_r+0x56>
 80097ca:	6875      	ldr	r5, [r6, #4]
 80097cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ce:	07d9      	lsls	r1, r3, #31
 80097d0:	d405      	bmi.n	80097de <_vfiprintf_r+0x32>
 80097d2:	89ab      	ldrh	r3, [r5, #12]
 80097d4:	059a      	lsls	r2, r3, #22
 80097d6:	d402      	bmi.n	80097de <_vfiprintf_r+0x32>
 80097d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097da:	f000 fb97 	bl	8009f0c <__retarget_lock_acquire_recursive>
 80097de:	89ab      	ldrh	r3, [r5, #12]
 80097e0:	071b      	lsls	r3, r3, #28
 80097e2:	d501      	bpl.n	80097e8 <_vfiprintf_r+0x3c>
 80097e4:	692b      	ldr	r3, [r5, #16]
 80097e6:	b9eb      	cbnz	r3, 8009824 <_vfiprintf_r+0x78>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 f960 	bl	8009ab0 <__swsetup_r>
 80097f0:	b1c0      	cbz	r0, 8009824 <_vfiprintf_r+0x78>
 80097f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f4:	07dc      	lsls	r4, r3, #31
 80097f6:	d50e      	bpl.n	8009816 <_vfiprintf_r+0x6a>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097fc:	b01d      	add	sp, #116	; 0x74
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	4b7b      	ldr	r3, [pc, #492]	; (80099f0 <_vfiprintf_r+0x244>)
 8009804:	429d      	cmp	r5, r3
 8009806:	d101      	bne.n	800980c <_vfiprintf_r+0x60>
 8009808:	68b5      	ldr	r5, [r6, #8]
 800980a:	e7df      	b.n	80097cc <_vfiprintf_r+0x20>
 800980c:	4b79      	ldr	r3, [pc, #484]	; (80099f4 <_vfiprintf_r+0x248>)
 800980e:	429d      	cmp	r5, r3
 8009810:	bf08      	it	eq
 8009812:	68f5      	ldreq	r5, [r6, #12]
 8009814:	e7da      	b.n	80097cc <_vfiprintf_r+0x20>
 8009816:	89ab      	ldrh	r3, [r5, #12]
 8009818:	0598      	lsls	r0, r3, #22
 800981a:	d4ed      	bmi.n	80097f8 <_vfiprintf_r+0x4c>
 800981c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800981e:	f000 fb76 	bl	8009f0e <__retarget_lock_release_recursive>
 8009822:	e7e9      	b.n	80097f8 <_vfiprintf_r+0x4c>
 8009824:	2300      	movs	r3, #0
 8009826:	9309      	str	r3, [sp, #36]	; 0x24
 8009828:	2320      	movs	r3, #32
 800982a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800982e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009832:	2330      	movs	r3, #48	; 0x30
 8009834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099f8 <_vfiprintf_r+0x24c>
 8009838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800983c:	f04f 0901 	mov.w	r9, #1
 8009840:	4623      	mov	r3, r4
 8009842:	469a      	mov	sl, r3
 8009844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009848:	b10a      	cbz	r2, 800984e <_vfiprintf_r+0xa2>
 800984a:	2a25      	cmp	r2, #37	; 0x25
 800984c:	d1f9      	bne.n	8009842 <_vfiprintf_r+0x96>
 800984e:	ebba 0b04 	subs.w	fp, sl, r4
 8009852:	d00b      	beq.n	800986c <_vfiprintf_r+0xc0>
 8009854:	465b      	mov	r3, fp
 8009856:	4622      	mov	r2, r4
 8009858:	4629      	mov	r1, r5
 800985a:	4630      	mov	r0, r6
 800985c:	f7ff ff93 	bl	8009786 <__sfputs_r>
 8009860:	3001      	adds	r0, #1
 8009862:	f000 80aa 	beq.w	80099ba <_vfiprintf_r+0x20e>
 8009866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009868:	445a      	add	r2, fp
 800986a:	9209      	str	r2, [sp, #36]	; 0x24
 800986c:	f89a 3000 	ldrb.w	r3, [sl]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 80a2 	beq.w	80099ba <_vfiprintf_r+0x20e>
 8009876:	2300      	movs	r3, #0
 8009878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800987c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009880:	f10a 0a01 	add.w	sl, sl, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800988c:	931a      	str	r3, [sp, #104]	; 0x68
 800988e:	4654      	mov	r4, sl
 8009890:	2205      	movs	r2, #5
 8009892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009896:	4858      	ldr	r0, [pc, #352]	; (80099f8 <_vfiprintf_r+0x24c>)
 8009898:	f7f6 fcba 	bl	8000210 <memchr>
 800989c:	9a04      	ldr	r2, [sp, #16]
 800989e:	b9d8      	cbnz	r0, 80098d8 <_vfiprintf_r+0x12c>
 80098a0:	06d1      	lsls	r1, r2, #27
 80098a2:	bf44      	itt	mi
 80098a4:	2320      	movmi	r3, #32
 80098a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098aa:	0713      	lsls	r3, r2, #28
 80098ac:	bf44      	itt	mi
 80098ae:	232b      	movmi	r3, #43	; 0x2b
 80098b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b4:	f89a 3000 	ldrb.w	r3, [sl]
 80098b8:	2b2a      	cmp	r3, #42	; 0x2a
 80098ba:	d015      	beq.n	80098e8 <_vfiprintf_r+0x13c>
 80098bc:	9a07      	ldr	r2, [sp, #28]
 80098be:	4654      	mov	r4, sl
 80098c0:	2000      	movs	r0, #0
 80098c2:	f04f 0c0a 	mov.w	ip, #10
 80098c6:	4621      	mov	r1, r4
 80098c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098cc:	3b30      	subs	r3, #48	; 0x30
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d94e      	bls.n	8009970 <_vfiprintf_r+0x1c4>
 80098d2:	b1b0      	cbz	r0, 8009902 <_vfiprintf_r+0x156>
 80098d4:	9207      	str	r2, [sp, #28]
 80098d6:	e014      	b.n	8009902 <_vfiprintf_r+0x156>
 80098d8:	eba0 0308 	sub.w	r3, r0, r8
 80098dc:	fa09 f303 	lsl.w	r3, r9, r3
 80098e0:	4313      	orrs	r3, r2
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	46a2      	mov	sl, r4
 80098e6:	e7d2      	b.n	800988e <_vfiprintf_r+0xe2>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	1d19      	adds	r1, r3, #4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	9103      	str	r1, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bfbb      	ittet	lt
 80098f4:	425b      	neglt	r3, r3
 80098f6:	f042 0202 	orrlt.w	r2, r2, #2
 80098fa:	9307      	strge	r3, [sp, #28]
 80098fc:	9307      	strlt	r3, [sp, #28]
 80098fe:	bfb8      	it	lt
 8009900:	9204      	strlt	r2, [sp, #16]
 8009902:	7823      	ldrb	r3, [r4, #0]
 8009904:	2b2e      	cmp	r3, #46	; 0x2e
 8009906:	d10c      	bne.n	8009922 <_vfiprintf_r+0x176>
 8009908:	7863      	ldrb	r3, [r4, #1]
 800990a:	2b2a      	cmp	r3, #42	; 0x2a
 800990c:	d135      	bne.n	800997a <_vfiprintf_r+0x1ce>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	1d1a      	adds	r2, r3, #4
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	9203      	str	r2, [sp, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfb8      	it	lt
 800991a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800991e:	3402      	adds	r4, #2
 8009920:	9305      	str	r3, [sp, #20]
 8009922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a08 <_vfiprintf_r+0x25c>
 8009926:	7821      	ldrb	r1, [r4, #0]
 8009928:	2203      	movs	r2, #3
 800992a:	4650      	mov	r0, sl
 800992c:	f7f6 fc70 	bl	8000210 <memchr>
 8009930:	b140      	cbz	r0, 8009944 <_vfiprintf_r+0x198>
 8009932:	2340      	movs	r3, #64	; 0x40
 8009934:	eba0 000a 	sub.w	r0, r0, sl
 8009938:	fa03 f000 	lsl.w	r0, r3, r0
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	4303      	orrs	r3, r0
 8009940:	3401      	adds	r4, #1
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	482c      	ldr	r0, [pc, #176]	; (80099fc <_vfiprintf_r+0x250>)
 800994a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800994e:	2206      	movs	r2, #6
 8009950:	f7f6 fc5e 	bl	8000210 <memchr>
 8009954:	2800      	cmp	r0, #0
 8009956:	d03f      	beq.n	80099d8 <_vfiprintf_r+0x22c>
 8009958:	4b29      	ldr	r3, [pc, #164]	; (8009a00 <_vfiprintf_r+0x254>)
 800995a:	bb1b      	cbnz	r3, 80099a4 <_vfiprintf_r+0x1f8>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	3307      	adds	r3, #7
 8009960:	f023 0307 	bic.w	r3, r3, #7
 8009964:	3308      	adds	r3, #8
 8009966:	9303      	str	r3, [sp, #12]
 8009968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996a:	443b      	add	r3, r7
 800996c:	9309      	str	r3, [sp, #36]	; 0x24
 800996e:	e767      	b.n	8009840 <_vfiprintf_r+0x94>
 8009970:	fb0c 3202 	mla	r2, ip, r2, r3
 8009974:	460c      	mov	r4, r1
 8009976:	2001      	movs	r0, #1
 8009978:	e7a5      	b.n	80098c6 <_vfiprintf_r+0x11a>
 800997a:	2300      	movs	r3, #0
 800997c:	3401      	adds	r4, #1
 800997e:	9305      	str	r3, [sp, #20]
 8009980:	4619      	mov	r1, r3
 8009982:	f04f 0c0a 	mov.w	ip, #10
 8009986:	4620      	mov	r0, r4
 8009988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800998c:	3a30      	subs	r2, #48	; 0x30
 800998e:	2a09      	cmp	r2, #9
 8009990:	d903      	bls.n	800999a <_vfiprintf_r+0x1ee>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0c5      	beq.n	8009922 <_vfiprintf_r+0x176>
 8009996:	9105      	str	r1, [sp, #20]
 8009998:	e7c3      	b.n	8009922 <_vfiprintf_r+0x176>
 800999a:	fb0c 2101 	mla	r1, ip, r1, r2
 800999e:	4604      	mov	r4, r0
 80099a0:	2301      	movs	r3, #1
 80099a2:	e7f0      	b.n	8009986 <_vfiprintf_r+0x1da>
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <_vfiprintf_r+0x258>)
 80099ac:	a904      	add	r1, sp, #16
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7fc fa74 	bl	8005e9c <_printf_float>
 80099b4:	4607      	mov	r7, r0
 80099b6:	1c78      	adds	r0, r7, #1
 80099b8:	d1d6      	bne.n	8009968 <_vfiprintf_r+0x1bc>
 80099ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099bc:	07d9      	lsls	r1, r3, #31
 80099be:	d405      	bmi.n	80099cc <_vfiprintf_r+0x220>
 80099c0:	89ab      	ldrh	r3, [r5, #12]
 80099c2:	059a      	lsls	r2, r3, #22
 80099c4:	d402      	bmi.n	80099cc <_vfiprintf_r+0x220>
 80099c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c8:	f000 faa1 	bl	8009f0e <__retarget_lock_release_recursive>
 80099cc:	89ab      	ldrh	r3, [r5, #12]
 80099ce:	065b      	lsls	r3, r3, #25
 80099d0:	f53f af12 	bmi.w	80097f8 <_vfiprintf_r+0x4c>
 80099d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d6:	e711      	b.n	80097fc <_vfiprintf_r+0x50>
 80099d8:	ab03      	add	r3, sp, #12
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	462a      	mov	r2, r5
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <_vfiprintf_r+0x258>)
 80099e0:	a904      	add	r1, sp, #16
 80099e2:	4630      	mov	r0, r6
 80099e4:	f7fc fcfe 	bl	80063e4 <_printf_i>
 80099e8:	e7e4      	b.n	80099b4 <_vfiprintf_r+0x208>
 80099ea:	bf00      	nop
 80099ec:	0800a894 	.word	0x0800a894
 80099f0:	0800a8b4 	.word	0x0800a8b4
 80099f4:	0800a874 	.word	0x0800a874
 80099f8:	0800a824 	.word	0x0800a824
 80099fc:	0800a82e 	.word	0x0800a82e
 8009a00:	08005e9d 	.word	0x08005e9d
 8009a04:	08009787 	.word	0x08009787
 8009a08:	0800a82a 	.word	0x0800a82a

08009a0c <__swbuf_r>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	460e      	mov	r6, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	4605      	mov	r5, r0
 8009a14:	b118      	cbz	r0, 8009a1e <__swbuf_r+0x12>
 8009a16:	6983      	ldr	r3, [r0, #24]
 8009a18:	b90b      	cbnz	r3, 8009a1e <__swbuf_r+0x12>
 8009a1a:	f000 f9d9 	bl	8009dd0 <__sinit>
 8009a1e:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <__swbuf_r+0x98>)
 8009a20:	429c      	cmp	r4, r3
 8009a22:	d12b      	bne.n	8009a7c <__swbuf_r+0x70>
 8009a24:	686c      	ldr	r4, [r5, #4]
 8009a26:	69a3      	ldr	r3, [r4, #24]
 8009a28:	60a3      	str	r3, [r4, #8]
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	071a      	lsls	r2, r3, #28
 8009a2e:	d52f      	bpl.n	8009a90 <__swbuf_r+0x84>
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	b36b      	cbz	r3, 8009a90 <__swbuf_r+0x84>
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	6820      	ldr	r0, [r4, #0]
 8009a38:	1ac0      	subs	r0, r0, r3
 8009a3a:	6963      	ldr	r3, [r4, #20]
 8009a3c:	b2f6      	uxtb	r6, r6
 8009a3e:	4283      	cmp	r3, r0
 8009a40:	4637      	mov	r7, r6
 8009a42:	dc04      	bgt.n	8009a4e <__swbuf_r+0x42>
 8009a44:	4621      	mov	r1, r4
 8009a46:	4628      	mov	r0, r5
 8009a48:	f000 f92e 	bl	8009ca8 <_fflush_r>
 8009a4c:	bb30      	cbnz	r0, 8009a9c <__swbuf_r+0x90>
 8009a4e:	68a3      	ldr	r3, [r4, #8]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	60a3      	str	r3, [r4, #8]
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	6022      	str	r2, [r4, #0]
 8009a5a:	701e      	strb	r6, [r3, #0]
 8009a5c:	6963      	ldr	r3, [r4, #20]
 8009a5e:	3001      	adds	r0, #1
 8009a60:	4283      	cmp	r3, r0
 8009a62:	d004      	beq.n	8009a6e <__swbuf_r+0x62>
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	07db      	lsls	r3, r3, #31
 8009a68:	d506      	bpl.n	8009a78 <__swbuf_r+0x6c>
 8009a6a:	2e0a      	cmp	r6, #10
 8009a6c:	d104      	bne.n	8009a78 <__swbuf_r+0x6c>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4628      	mov	r0, r5
 8009a72:	f000 f919 	bl	8009ca8 <_fflush_r>
 8009a76:	b988      	cbnz	r0, 8009a9c <__swbuf_r+0x90>
 8009a78:	4638      	mov	r0, r7
 8009a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <__swbuf_r+0x9c>)
 8009a7e:	429c      	cmp	r4, r3
 8009a80:	d101      	bne.n	8009a86 <__swbuf_r+0x7a>
 8009a82:	68ac      	ldr	r4, [r5, #8]
 8009a84:	e7cf      	b.n	8009a26 <__swbuf_r+0x1a>
 8009a86:	4b09      	ldr	r3, [pc, #36]	; (8009aac <__swbuf_r+0xa0>)
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	bf08      	it	eq
 8009a8c:	68ec      	ldreq	r4, [r5, #12]
 8009a8e:	e7ca      	b.n	8009a26 <__swbuf_r+0x1a>
 8009a90:	4621      	mov	r1, r4
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 f80c 	bl	8009ab0 <__swsetup_r>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d0cb      	beq.n	8009a34 <__swbuf_r+0x28>
 8009a9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009aa0:	e7ea      	b.n	8009a78 <__swbuf_r+0x6c>
 8009aa2:	bf00      	nop
 8009aa4:	0800a894 	.word	0x0800a894
 8009aa8:	0800a8b4 	.word	0x0800a8b4
 8009aac:	0800a874 	.word	0x0800a874

08009ab0 <__swsetup_r>:
 8009ab0:	4b32      	ldr	r3, [pc, #200]	; (8009b7c <__swsetup_r+0xcc>)
 8009ab2:	b570      	push	{r4, r5, r6, lr}
 8009ab4:	681d      	ldr	r5, [r3, #0]
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	b125      	cbz	r5, 8009ac6 <__swsetup_r+0x16>
 8009abc:	69ab      	ldr	r3, [r5, #24]
 8009abe:	b913      	cbnz	r3, 8009ac6 <__swsetup_r+0x16>
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f000 f985 	bl	8009dd0 <__sinit>
 8009ac6:	4b2e      	ldr	r3, [pc, #184]	; (8009b80 <__swsetup_r+0xd0>)
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	d10f      	bne.n	8009aec <__swsetup_r+0x3c>
 8009acc:	686c      	ldr	r4, [r5, #4]
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ad4:	0719      	lsls	r1, r3, #28
 8009ad6:	d42c      	bmi.n	8009b32 <__swsetup_r+0x82>
 8009ad8:	06dd      	lsls	r5, r3, #27
 8009ada:	d411      	bmi.n	8009b00 <__swsetup_r+0x50>
 8009adc:	2309      	movs	r3, #9
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aea:	e03e      	b.n	8009b6a <__swsetup_r+0xba>
 8009aec:	4b25      	ldr	r3, [pc, #148]	; (8009b84 <__swsetup_r+0xd4>)
 8009aee:	429c      	cmp	r4, r3
 8009af0:	d101      	bne.n	8009af6 <__swsetup_r+0x46>
 8009af2:	68ac      	ldr	r4, [r5, #8]
 8009af4:	e7eb      	b.n	8009ace <__swsetup_r+0x1e>
 8009af6:	4b24      	ldr	r3, [pc, #144]	; (8009b88 <__swsetup_r+0xd8>)
 8009af8:	429c      	cmp	r4, r3
 8009afa:	bf08      	it	eq
 8009afc:	68ec      	ldreq	r4, [r5, #12]
 8009afe:	e7e6      	b.n	8009ace <__swsetup_r+0x1e>
 8009b00:	0758      	lsls	r0, r3, #29
 8009b02:	d512      	bpl.n	8009b2a <__swsetup_r+0x7a>
 8009b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b06:	b141      	cbz	r1, 8009b1a <__swsetup_r+0x6a>
 8009b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	d002      	beq.n	8009b16 <__swsetup_r+0x66>
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff fb67 	bl	80091e4 <_free_r>
 8009b16:	2300      	movs	r3, #0
 8009b18:	6363      	str	r3, [r4, #52]	; 0x34
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	2300      	movs	r3, #0
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	f043 0308 	orr.w	r3, r3, #8
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	b94b      	cbnz	r3, 8009b4a <__swsetup_r+0x9a>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b40:	d003      	beq.n	8009b4a <__swsetup_r+0x9a>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 fa07 	bl	8009f58 <__smakebuf_r>
 8009b4a:	89a0      	ldrh	r0, [r4, #12]
 8009b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b50:	f010 0301 	ands.w	r3, r0, #1
 8009b54:	d00a      	beq.n	8009b6c <__swsetup_r+0xbc>
 8009b56:	2300      	movs	r3, #0
 8009b58:	60a3      	str	r3, [r4, #8]
 8009b5a:	6963      	ldr	r3, [r4, #20]
 8009b5c:	425b      	negs	r3, r3
 8009b5e:	61a3      	str	r3, [r4, #24]
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	b943      	cbnz	r3, 8009b76 <__swsetup_r+0xc6>
 8009b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b68:	d1ba      	bne.n	8009ae0 <__swsetup_r+0x30>
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	0781      	lsls	r1, r0, #30
 8009b6e:	bf58      	it	pl
 8009b70:	6963      	ldrpl	r3, [r4, #20]
 8009b72:	60a3      	str	r3, [r4, #8]
 8009b74:	e7f4      	b.n	8009b60 <__swsetup_r+0xb0>
 8009b76:	2000      	movs	r0, #0
 8009b78:	e7f7      	b.n	8009b6a <__swsetup_r+0xba>
 8009b7a:	bf00      	nop
 8009b7c:	20000010 	.word	0x20000010
 8009b80:	0800a894 	.word	0x0800a894
 8009b84:	0800a8b4 	.word	0x0800a8b4
 8009b88:	0800a874 	.word	0x0800a874

08009b8c <abort>:
 8009b8c:	b508      	push	{r3, lr}
 8009b8e:	2006      	movs	r0, #6
 8009b90:	f000 fa52 	bl	800a038 <raise>
 8009b94:	2001      	movs	r0, #1
 8009b96:	f7f8 fe25 	bl	80027e4 <_exit>
	...

08009b9c <__sflush_r>:
 8009b9c:	898a      	ldrh	r2, [r1, #12]
 8009b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	0710      	lsls	r0, r2, #28
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	d458      	bmi.n	8009c5c <__sflush_r+0xc0>
 8009baa:	684b      	ldr	r3, [r1, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dc05      	bgt.n	8009bbc <__sflush_r+0x20>
 8009bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dc02      	bgt.n	8009bbc <__sflush_r+0x20>
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bbe:	2e00      	cmp	r6, #0
 8009bc0:	d0f9      	beq.n	8009bb6 <__sflush_r+0x1a>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bc8:	682f      	ldr	r7, [r5, #0]
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	d032      	beq.n	8009c34 <__sflush_r+0x98>
 8009bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	075a      	lsls	r2, r3, #29
 8009bd4:	d505      	bpl.n	8009be2 <__sflush_r+0x46>
 8009bd6:	6863      	ldr	r3, [r4, #4]
 8009bd8:	1ac0      	subs	r0, r0, r3
 8009bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bdc:	b10b      	cbz	r3, 8009be2 <__sflush_r+0x46>
 8009bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009be0:	1ac0      	subs	r0, r0, r3
 8009be2:	2300      	movs	r3, #0
 8009be4:	4602      	mov	r2, r0
 8009be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009be8:	6a21      	ldr	r1, [r4, #32]
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b0      	blx	r6
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	d106      	bne.n	8009c02 <__sflush_r+0x66>
 8009bf4:	6829      	ldr	r1, [r5, #0]
 8009bf6:	291d      	cmp	r1, #29
 8009bf8:	d82c      	bhi.n	8009c54 <__sflush_r+0xb8>
 8009bfa:	4a2a      	ldr	r2, [pc, #168]	; (8009ca4 <__sflush_r+0x108>)
 8009bfc:	40ca      	lsrs	r2, r1
 8009bfe:	07d6      	lsls	r6, r2, #31
 8009c00:	d528      	bpl.n	8009c54 <__sflush_r+0xb8>
 8009c02:	2200      	movs	r2, #0
 8009c04:	6062      	str	r2, [r4, #4]
 8009c06:	04d9      	lsls	r1, r3, #19
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	d504      	bpl.n	8009c18 <__sflush_r+0x7c>
 8009c0e:	1c42      	adds	r2, r0, #1
 8009c10:	d101      	bne.n	8009c16 <__sflush_r+0x7a>
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	b903      	cbnz	r3, 8009c18 <__sflush_r+0x7c>
 8009c16:	6560      	str	r0, [r4, #84]	; 0x54
 8009c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1a:	602f      	str	r7, [r5, #0]
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	d0ca      	beq.n	8009bb6 <__sflush_r+0x1a>
 8009c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c24:	4299      	cmp	r1, r3
 8009c26:	d002      	beq.n	8009c2e <__sflush_r+0x92>
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f7ff fadb 	bl	80091e4 <_free_r>
 8009c2e:	2000      	movs	r0, #0
 8009c30:	6360      	str	r0, [r4, #52]	; 0x34
 8009c32:	e7c1      	b.n	8009bb8 <__sflush_r+0x1c>
 8009c34:	6a21      	ldr	r1, [r4, #32]
 8009c36:	2301      	movs	r3, #1
 8009c38:	4628      	mov	r0, r5
 8009c3a:	47b0      	blx	r6
 8009c3c:	1c41      	adds	r1, r0, #1
 8009c3e:	d1c7      	bne.n	8009bd0 <__sflush_r+0x34>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0c4      	beq.n	8009bd0 <__sflush_r+0x34>
 8009c46:	2b1d      	cmp	r3, #29
 8009c48:	d001      	beq.n	8009c4e <__sflush_r+0xb2>
 8009c4a:	2b16      	cmp	r3, #22
 8009c4c:	d101      	bne.n	8009c52 <__sflush_r+0xb6>
 8009c4e:	602f      	str	r7, [r5, #0]
 8009c50:	e7b1      	b.n	8009bb6 <__sflush_r+0x1a>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c58:	81a3      	strh	r3, [r4, #12]
 8009c5a:	e7ad      	b.n	8009bb8 <__sflush_r+0x1c>
 8009c5c:	690f      	ldr	r7, [r1, #16]
 8009c5e:	2f00      	cmp	r7, #0
 8009c60:	d0a9      	beq.n	8009bb6 <__sflush_r+0x1a>
 8009c62:	0793      	lsls	r3, r2, #30
 8009c64:	680e      	ldr	r6, [r1, #0]
 8009c66:	bf08      	it	eq
 8009c68:	694b      	ldreq	r3, [r1, #20]
 8009c6a:	600f      	str	r7, [r1, #0]
 8009c6c:	bf18      	it	ne
 8009c6e:	2300      	movne	r3, #0
 8009c70:	eba6 0807 	sub.w	r8, r6, r7
 8009c74:	608b      	str	r3, [r1, #8]
 8009c76:	f1b8 0f00 	cmp.w	r8, #0
 8009c7a:	dd9c      	ble.n	8009bb6 <__sflush_r+0x1a>
 8009c7c:	6a21      	ldr	r1, [r4, #32]
 8009c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c80:	4643      	mov	r3, r8
 8009c82:	463a      	mov	r2, r7
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b0      	blx	r6
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	dc06      	bgt.n	8009c9a <__sflush_r+0xfe>
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c92:	81a3      	strh	r3, [r4, #12]
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c98:	e78e      	b.n	8009bb8 <__sflush_r+0x1c>
 8009c9a:	4407      	add	r7, r0
 8009c9c:	eba8 0800 	sub.w	r8, r8, r0
 8009ca0:	e7e9      	b.n	8009c76 <__sflush_r+0xda>
 8009ca2:	bf00      	nop
 8009ca4:	20400001 	.word	0x20400001

08009ca8 <_fflush_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	690b      	ldr	r3, [r1, #16]
 8009cac:	4605      	mov	r5, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	b913      	cbnz	r3, 8009cb8 <_fflush_r+0x10>
 8009cb2:	2500      	movs	r5, #0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	b118      	cbz	r0, 8009cc2 <_fflush_r+0x1a>
 8009cba:	6983      	ldr	r3, [r0, #24]
 8009cbc:	b90b      	cbnz	r3, 8009cc2 <_fflush_r+0x1a>
 8009cbe:	f000 f887 	bl	8009dd0 <__sinit>
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <_fflush_r+0x6c>)
 8009cc4:	429c      	cmp	r4, r3
 8009cc6:	d11b      	bne.n	8009d00 <_fflush_r+0x58>
 8009cc8:	686c      	ldr	r4, [r5, #4]
 8009cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0ef      	beq.n	8009cb2 <_fflush_r+0xa>
 8009cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cd4:	07d0      	lsls	r0, r2, #31
 8009cd6:	d404      	bmi.n	8009ce2 <_fflush_r+0x3a>
 8009cd8:	0599      	lsls	r1, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_fflush_r+0x3a>
 8009cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cde:	f000 f915 	bl	8009f0c <__retarget_lock_acquire_recursive>
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f7ff ff59 	bl	8009b9c <__sflush_r>
 8009cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cec:	07da      	lsls	r2, r3, #31
 8009cee:	4605      	mov	r5, r0
 8009cf0:	d4e0      	bmi.n	8009cb4 <_fflush_r+0xc>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	059b      	lsls	r3, r3, #22
 8009cf6:	d4dd      	bmi.n	8009cb4 <_fflush_r+0xc>
 8009cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cfa:	f000 f908 	bl	8009f0e <__retarget_lock_release_recursive>
 8009cfe:	e7d9      	b.n	8009cb4 <_fflush_r+0xc>
 8009d00:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <_fflush_r+0x70>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <_fflush_r+0x62>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7df      	b.n	8009cca <_fflush_r+0x22>
 8009d0a:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <_fflush_r+0x74>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7da      	b.n	8009cca <_fflush_r+0x22>
 8009d14:	0800a894 	.word	0x0800a894
 8009d18:	0800a8b4 	.word	0x0800a8b4
 8009d1c:	0800a874 	.word	0x0800a874

08009d20 <std>:
 8009d20:	2300      	movs	r3, #0
 8009d22:	b510      	push	{r4, lr}
 8009d24:	4604      	mov	r4, r0
 8009d26:	e9c0 3300 	strd	r3, r3, [r0]
 8009d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d2e:	6083      	str	r3, [r0, #8]
 8009d30:	8181      	strh	r1, [r0, #12]
 8009d32:	6643      	str	r3, [r0, #100]	; 0x64
 8009d34:	81c2      	strh	r2, [r0, #14]
 8009d36:	6183      	str	r3, [r0, #24]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	2208      	movs	r2, #8
 8009d3c:	305c      	adds	r0, #92	; 0x5c
 8009d3e:	f7fc f805 	bl	8005d4c <memset>
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <std+0x38>)
 8009d44:	6263      	str	r3, [r4, #36]	; 0x24
 8009d46:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <std+0x3c>)
 8009d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <std+0x40>)
 8009d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <std+0x44>)
 8009d50:	6224      	str	r4, [r4, #32]
 8009d52:	6323      	str	r3, [r4, #48]	; 0x30
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	bf00      	nop
 8009d58:	0800a071 	.word	0x0800a071
 8009d5c:	0800a093 	.word	0x0800a093
 8009d60:	0800a0cb 	.word	0x0800a0cb
 8009d64:	0800a0ef 	.word	0x0800a0ef

08009d68 <_cleanup_r>:
 8009d68:	4901      	ldr	r1, [pc, #4]	; (8009d70 <_cleanup_r+0x8>)
 8009d6a:	f000 b8af 	b.w	8009ecc <_fwalk_reent>
 8009d6e:	bf00      	nop
 8009d70:	08009ca9 	.word	0x08009ca9

08009d74 <__sfmoreglue>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	1e4a      	subs	r2, r1, #1
 8009d78:	2568      	movs	r5, #104	; 0x68
 8009d7a:	4355      	muls	r5, r2
 8009d7c:	460e      	mov	r6, r1
 8009d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d82:	f7ff fa7f 	bl	8009284 <_malloc_r>
 8009d86:	4604      	mov	r4, r0
 8009d88:	b140      	cbz	r0, 8009d9c <__sfmoreglue+0x28>
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8009d90:	300c      	adds	r0, #12
 8009d92:	60a0      	str	r0, [r4, #8]
 8009d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d98:	f7fb ffd8 	bl	8005d4c <memset>
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}

08009da0 <__sfp_lock_acquire>:
 8009da0:	4801      	ldr	r0, [pc, #4]	; (8009da8 <__sfp_lock_acquire+0x8>)
 8009da2:	f000 b8b3 	b.w	8009f0c <__retarget_lock_acquire_recursive>
 8009da6:	bf00      	nop
 8009da8:	200005f8 	.word	0x200005f8

08009dac <__sfp_lock_release>:
 8009dac:	4801      	ldr	r0, [pc, #4]	; (8009db4 <__sfp_lock_release+0x8>)
 8009dae:	f000 b8ae 	b.w	8009f0e <__retarget_lock_release_recursive>
 8009db2:	bf00      	nop
 8009db4:	200005f8 	.word	0x200005f8

08009db8 <__sinit_lock_acquire>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__sinit_lock_acquire+0x8>)
 8009dba:	f000 b8a7 	b.w	8009f0c <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	200005f3 	.word	0x200005f3

08009dc4 <__sinit_lock_release>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__sinit_lock_release+0x8>)
 8009dc6:	f000 b8a2 	b.w	8009f0e <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	200005f3 	.word	0x200005f3

08009dd0 <__sinit>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	f7ff fff0 	bl	8009db8 <__sinit_lock_acquire>
 8009dd8:	69a3      	ldr	r3, [r4, #24]
 8009dda:	b11b      	cbz	r3, 8009de4 <__sinit+0x14>
 8009ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de0:	f7ff bff0 	b.w	8009dc4 <__sinit_lock_release>
 8009de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009de8:	6523      	str	r3, [r4, #80]	; 0x50
 8009dea:	4b13      	ldr	r3, [pc, #76]	; (8009e38 <__sinit+0x68>)
 8009dec:	4a13      	ldr	r2, [pc, #76]	; (8009e3c <__sinit+0x6c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	bf04      	itt	eq
 8009df6:	2301      	moveq	r3, #1
 8009df8:	61a3      	streq	r3, [r4, #24]
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 f820 	bl	8009e40 <__sfp>
 8009e00:	6060      	str	r0, [r4, #4]
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 f81c 	bl	8009e40 <__sfp>
 8009e08:	60a0      	str	r0, [r4, #8]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 f818 	bl	8009e40 <__sfp>
 8009e10:	2200      	movs	r2, #0
 8009e12:	60e0      	str	r0, [r4, #12]
 8009e14:	2104      	movs	r1, #4
 8009e16:	6860      	ldr	r0, [r4, #4]
 8009e18:	f7ff ff82 	bl	8009d20 <std>
 8009e1c:	68a0      	ldr	r0, [r4, #8]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	2109      	movs	r1, #9
 8009e22:	f7ff ff7d 	bl	8009d20 <std>
 8009e26:	68e0      	ldr	r0, [r4, #12]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	2112      	movs	r1, #18
 8009e2c:	f7ff ff78 	bl	8009d20 <std>
 8009e30:	2301      	movs	r3, #1
 8009e32:	61a3      	str	r3, [r4, #24]
 8009e34:	e7d2      	b.n	8009ddc <__sinit+0xc>
 8009e36:	bf00      	nop
 8009e38:	0800a428 	.word	0x0800a428
 8009e3c:	08009d69 	.word	0x08009d69

08009e40 <__sfp>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	4607      	mov	r7, r0
 8009e44:	f7ff ffac 	bl	8009da0 <__sfp_lock_acquire>
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <__sfp+0x84>)
 8009e4a:	681e      	ldr	r6, [r3, #0]
 8009e4c:	69b3      	ldr	r3, [r6, #24]
 8009e4e:	b913      	cbnz	r3, 8009e56 <__sfp+0x16>
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7ff ffbd 	bl	8009dd0 <__sinit>
 8009e56:	3648      	adds	r6, #72	; 0x48
 8009e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	d503      	bpl.n	8009e68 <__sfp+0x28>
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	b30b      	cbz	r3, 8009ea8 <__sfp+0x68>
 8009e64:	6836      	ldr	r6, [r6, #0]
 8009e66:	e7f7      	b.n	8009e58 <__sfp+0x18>
 8009e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e6c:	b9d5      	cbnz	r5, 8009ea4 <__sfp+0x64>
 8009e6e:	4b16      	ldr	r3, [pc, #88]	; (8009ec8 <__sfp+0x88>)
 8009e70:	60e3      	str	r3, [r4, #12]
 8009e72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e76:	6665      	str	r5, [r4, #100]	; 0x64
 8009e78:	f000 f847 	bl	8009f0a <__retarget_lock_init_recursive>
 8009e7c:	f7ff ff96 	bl	8009dac <__sfp_lock_release>
 8009e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e88:	6025      	str	r5, [r4, #0]
 8009e8a:	61a5      	str	r5, [r4, #24]
 8009e8c:	2208      	movs	r2, #8
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e94:	f7fb ff5a 	bl	8005d4c <memset>
 8009e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	3468      	adds	r4, #104	; 0x68
 8009ea6:	e7d9      	b.n	8009e5c <__sfp+0x1c>
 8009ea8:	2104      	movs	r1, #4
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f7ff ff62 	bl	8009d74 <__sfmoreglue>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	6030      	str	r0, [r6, #0]
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d1d5      	bne.n	8009e64 <__sfp+0x24>
 8009eb8:	f7ff ff78 	bl	8009dac <__sfp_lock_release>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	e7ee      	b.n	8009ea0 <__sfp+0x60>
 8009ec2:	bf00      	nop
 8009ec4:	0800a428 	.word	0x0800a428
 8009ec8:	ffff0001 	.word	0xffff0001

08009ecc <_fwalk_reent>:
 8009ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	4688      	mov	r8, r1
 8009ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ed8:	2700      	movs	r7, #0
 8009eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ede:	f1b9 0901 	subs.w	r9, r9, #1
 8009ee2:	d505      	bpl.n	8009ef0 <_fwalk_reent+0x24>
 8009ee4:	6824      	ldr	r4, [r4, #0]
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d1f7      	bne.n	8009eda <_fwalk_reent+0xe>
 8009eea:	4638      	mov	r0, r7
 8009eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef0:	89ab      	ldrh	r3, [r5, #12]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d907      	bls.n	8009f06 <_fwalk_reent+0x3a>
 8009ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009efa:	3301      	adds	r3, #1
 8009efc:	d003      	beq.n	8009f06 <_fwalk_reent+0x3a>
 8009efe:	4629      	mov	r1, r5
 8009f00:	4630      	mov	r0, r6
 8009f02:	47c0      	blx	r8
 8009f04:	4307      	orrs	r7, r0
 8009f06:	3568      	adds	r5, #104	; 0x68
 8009f08:	e7e9      	b.n	8009ede <_fwalk_reent+0x12>

08009f0a <__retarget_lock_init_recursive>:
 8009f0a:	4770      	bx	lr

08009f0c <__retarget_lock_acquire_recursive>:
 8009f0c:	4770      	bx	lr

08009f0e <__retarget_lock_release_recursive>:
 8009f0e:	4770      	bx	lr

08009f10 <__swhatbuf_r>:
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	460e      	mov	r6, r1
 8009f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	b096      	sub	sp, #88	; 0x58
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	461d      	mov	r5, r3
 8009f20:	da07      	bge.n	8009f32 <__swhatbuf_r+0x22>
 8009f22:	2300      	movs	r3, #0
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	89b3      	ldrh	r3, [r6, #12]
 8009f28:	061a      	lsls	r2, r3, #24
 8009f2a:	d410      	bmi.n	8009f4e <__swhatbuf_r+0x3e>
 8009f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f30:	e00e      	b.n	8009f50 <__swhatbuf_r+0x40>
 8009f32:	466a      	mov	r2, sp
 8009f34:	f000 f902 	bl	800a13c <_fstat_r>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	dbf2      	blt.n	8009f22 <__swhatbuf_r+0x12>
 8009f3c:	9a01      	ldr	r2, [sp, #4]
 8009f3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f46:	425a      	negs	r2, r3
 8009f48:	415a      	adcs	r2, r3
 8009f4a:	602a      	str	r2, [r5, #0]
 8009f4c:	e7ee      	b.n	8009f2c <__swhatbuf_r+0x1c>
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	2000      	movs	r0, #0
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	b016      	add	sp, #88	; 0x58
 8009f56:	bd70      	pop	{r4, r5, r6, pc}

08009f58 <__smakebuf_r>:
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f5c:	079d      	lsls	r5, r3, #30
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	d507      	bpl.n	8009f74 <__smakebuf_r+0x1c>
 8009f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	6123      	str	r3, [r4, #16]
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	6163      	str	r3, [r4, #20]
 8009f70:	b002      	add	sp, #8
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	ab01      	add	r3, sp, #4
 8009f76:	466a      	mov	r2, sp
 8009f78:	f7ff ffca 	bl	8009f10 <__swhatbuf_r>
 8009f7c:	9900      	ldr	r1, [sp, #0]
 8009f7e:	4605      	mov	r5, r0
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff f97f 	bl	8009284 <_malloc_r>
 8009f86:	b948      	cbnz	r0, 8009f9c <__smakebuf_r+0x44>
 8009f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8c:	059a      	lsls	r2, r3, #22
 8009f8e:	d4ef      	bmi.n	8009f70 <__smakebuf_r+0x18>
 8009f90:	f023 0303 	bic.w	r3, r3, #3
 8009f94:	f043 0302 	orr.w	r3, r3, #2
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	e7e3      	b.n	8009f64 <__smakebuf_r+0xc>
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	; (8009fd4 <__smakebuf_r+0x7c>)
 8009f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	6020      	str	r0, [r4, #0]
 8009fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa8:	81a3      	strh	r3, [r4, #12]
 8009faa:	9b00      	ldr	r3, [sp, #0]
 8009fac:	6163      	str	r3, [r4, #20]
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	6120      	str	r0, [r4, #16]
 8009fb2:	b15b      	cbz	r3, 8009fcc <__smakebuf_r+0x74>
 8009fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 f8d1 	bl	800a160 <_isatty_r>
 8009fbe:	b128      	cbz	r0, 8009fcc <__smakebuf_r+0x74>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	f043 0301 	orr.w	r3, r3, #1
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	89a0      	ldrh	r0, [r4, #12]
 8009fce:	4305      	orrs	r5, r0
 8009fd0:	81a5      	strh	r5, [r4, #12]
 8009fd2:	e7cd      	b.n	8009f70 <__smakebuf_r+0x18>
 8009fd4:	08009d69 	.word	0x08009d69

08009fd8 <_malloc_usable_size_r>:
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f18      	subs	r0, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfbc      	itt	lt
 8009fe2:	580b      	ldrlt	r3, [r1, r0]
 8009fe4:	18c0      	addlt	r0, r0, r3
 8009fe6:	4770      	bx	lr

08009fe8 <_raise_r>:
 8009fe8:	291f      	cmp	r1, #31
 8009fea:	b538      	push	{r3, r4, r5, lr}
 8009fec:	4604      	mov	r4, r0
 8009fee:	460d      	mov	r5, r1
 8009ff0:	d904      	bls.n	8009ffc <_raise_r+0x14>
 8009ff2:	2316      	movs	r3, #22
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ffe:	b112      	cbz	r2, 800a006 <_raise_r+0x1e>
 800a000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a004:	b94b      	cbnz	r3, 800a01a <_raise_r+0x32>
 800a006:	4620      	mov	r0, r4
 800a008:	f000 f830 	bl	800a06c <_getpid_r>
 800a00c:	462a      	mov	r2, r5
 800a00e:	4601      	mov	r1, r0
 800a010:	4620      	mov	r0, r4
 800a012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a016:	f000 b817 	b.w	800a048 <_kill_r>
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d00a      	beq.n	800a034 <_raise_r+0x4c>
 800a01e:	1c59      	adds	r1, r3, #1
 800a020:	d103      	bne.n	800a02a <_raise_r+0x42>
 800a022:	2316      	movs	r3, #22
 800a024:	6003      	str	r3, [r0, #0]
 800a026:	2001      	movs	r0, #1
 800a028:	e7e7      	b.n	8009ffa <_raise_r+0x12>
 800a02a:	2400      	movs	r4, #0
 800a02c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a030:	4628      	mov	r0, r5
 800a032:	4798      	blx	r3
 800a034:	2000      	movs	r0, #0
 800a036:	e7e0      	b.n	8009ffa <_raise_r+0x12>

0800a038 <raise>:
 800a038:	4b02      	ldr	r3, [pc, #8]	; (800a044 <raise+0xc>)
 800a03a:	4601      	mov	r1, r0
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	f7ff bfd3 	b.w	8009fe8 <_raise_r>
 800a042:	bf00      	nop
 800a044:	20000010 	.word	0x20000010

0800a048 <_kill_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d07      	ldr	r5, [pc, #28]	; (800a068 <_kill_r+0x20>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	4611      	mov	r1, r2
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	f7f8 fbb5 	bl	80027c4 <_kill>
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	d102      	bne.n	800a064 <_kill_r+0x1c>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	b103      	cbz	r3, 800a064 <_kill_r+0x1c>
 800a062:	6023      	str	r3, [r4, #0]
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	200005ec 	.word	0x200005ec

0800a06c <_getpid_r>:
 800a06c:	f7f8 bba2 	b.w	80027b4 <_getpid>

0800a070 <__sread>:
 800a070:	b510      	push	{r4, lr}
 800a072:	460c      	mov	r4, r1
 800a074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a078:	f000 f894 	bl	800a1a4 <_read_r>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	bfab      	itete	ge
 800a080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a082:	89a3      	ldrhlt	r3, [r4, #12]
 800a084:	181b      	addge	r3, r3, r0
 800a086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a08a:	bfac      	ite	ge
 800a08c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a08e:	81a3      	strhlt	r3, [r4, #12]
 800a090:	bd10      	pop	{r4, pc}

0800a092 <__swrite>:
 800a092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	461f      	mov	r7, r3
 800a098:	898b      	ldrh	r3, [r1, #12]
 800a09a:	05db      	lsls	r3, r3, #23
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	d505      	bpl.n	800a0b0 <__swrite+0x1e>
 800a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f000 f868 	bl	800a180 <_lseek_r>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	4632      	mov	r2, r6
 800a0be:	463b      	mov	r3, r7
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c6:	f000 b817 	b.w	800a0f8 <_write_r>

0800a0ca <__sseek>:
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d2:	f000 f855 	bl	800a180 <_lseek_r>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	bf15      	itete	ne
 800a0dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0e6:	81a3      	strheq	r3, [r4, #12]
 800a0e8:	bf18      	it	ne
 800a0ea:	81a3      	strhne	r3, [r4, #12]
 800a0ec:	bd10      	pop	{r4, pc}

0800a0ee <__sclose>:
 800a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f2:	f000 b813 	b.w	800a11c <_close_r>
	...

0800a0f8 <_write_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d07      	ldr	r5, [pc, #28]	; (800a118 <_write_r+0x20>)
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	4608      	mov	r0, r1
 800a100:	4611      	mov	r1, r2
 800a102:	2200      	movs	r2, #0
 800a104:	602a      	str	r2, [r5, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f7f8 fb93 	bl	8002832 <_write>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_write_r+0x1e>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	b103      	cbz	r3, 800a116 <_write_r+0x1e>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	200005ec 	.word	0x200005ec

0800a11c <_close_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d06      	ldr	r5, [pc, #24]	; (800a138 <_close_r+0x1c>)
 800a120:	2300      	movs	r3, #0
 800a122:	4604      	mov	r4, r0
 800a124:	4608      	mov	r0, r1
 800a126:	602b      	str	r3, [r5, #0]
 800a128:	f7f8 fb9f 	bl	800286a <_close>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_close_r+0x1a>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_close_r+0x1a>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	200005ec 	.word	0x200005ec

0800a13c <_fstat_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	; (800a15c <_fstat_r+0x20>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	f7f8 fb9a 	bl	8002882 <_fstat>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d102      	bne.n	800a158 <_fstat_r+0x1c>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	b103      	cbz	r3, 800a158 <_fstat_r+0x1c>
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	bd38      	pop	{r3, r4, r5, pc}
 800a15a:	bf00      	nop
 800a15c:	200005ec 	.word	0x200005ec

0800a160 <_isatty_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d06      	ldr	r5, [pc, #24]	; (800a17c <_isatty_r+0x1c>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	602b      	str	r3, [r5, #0]
 800a16c:	f7f8 fb99 	bl	80028a2 <_isatty>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_isatty_r+0x1a>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_isatty_r+0x1a>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	200005ec 	.word	0x200005ec

0800a180 <_lseek_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d07      	ldr	r5, [pc, #28]	; (800a1a0 <_lseek_r+0x20>)
 800a184:	4604      	mov	r4, r0
 800a186:	4608      	mov	r0, r1
 800a188:	4611      	mov	r1, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	602a      	str	r2, [r5, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	f7f8 fb92 	bl	80028b8 <_lseek>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_lseek_r+0x1e>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_lseek_r+0x1e>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	200005ec 	.word	0x200005ec

0800a1a4 <_read_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d07      	ldr	r5, [pc, #28]	; (800a1c4 <_read_r+0x20>)
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	602a      	str	r2, [r5, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f7f8 fb20 	bl	80027f8 <_read>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_read_r+0x1e>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_read_r+0x1e>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	200005ec 	.word	0x200005ec

0800a1c8 <_init>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	bf00      	nop
 800a1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ce:	bc08      	pop	{r3}
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	4770      	bx	lr

0800a1d4 <_fini>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	bf00      	nop
 800a1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1da:	bc08      	pop	{r3}
 800a1dc:	469e      	mov	lr, r3
 800a1de:	4770      	bx	lr
